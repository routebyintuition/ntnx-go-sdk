{
    "info": {
        "version": "3.1.0", 
        "description": "Move programming from the user to the machine.", 
        "title": "Nutanix Intentful API"
    }, 
    "paths": {
        "/access_control_policies": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_intent_response"
                        }
                    }
                }, 
                "description": "An Access Control Policy (ACP) represents the association of a User with a role, in a given 'Context' (i.e. where can the role be exercised) e.g. an ACP can represent the following: User1 has Role1 within the boundaries of Project1. (i.e. if Role1 allows the User to update-VM, he/she can do so ONLY for VMs belonging to Project1)\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "access_control_policies"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "access_control_policy", 
                "summary": "Create a new Access Control Policy"
            }
        }, 
        "/access_control_policies/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of Access Control Policies, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "access_control_policies"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "access_control_policy", 
                "summary": "Get a list of existing Access Control Policies"
            }
        }, 
        "/access_control_policies/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to update a existing Access Control Policy based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "access_control_policies"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "access_control_policy", 
                "summary": "Update a existing Access Control Policy"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing Access Control Policy.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "access_control_policies"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "access_control_policy", 
                "summary": "Get a exiting Access Control Policy"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/access_control_policy_status"
                        }
                    }
                }, 
                "description": "Delete an existing Access Control Policy. Warning - deleting an Access Control Policy will automatically detach the associated users and user-groups, thereby revoking the access they were granted because of this Access Control Policy.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "access_control_policies"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "access_control_policy", 
                "summary": "Delete a existing Access Control Policy"
            }
        }, 
        "/accounts": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/account_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/account_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "x-doc-hide": true, 
                "summary": "Create Account", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "account", 
                "description": "Given a spec creates a Account with associated metadata\n"
            }
        }, 
        "/accounts/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/account_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/account_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "x-doc-hide": true, 
                "summary": "List the Account", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "account", 
                "description": "List the Account with associated metadata"
            }
        }, 
        "/accounts/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/account_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/account_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "x-doc-hide": true, 
                "summary": "Update Account", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "account", 
                "description": "Given a spec and Account UUID, update Account\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/account_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Account", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "account", 
                "description": "Given a UUID, returns a Account definition"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/account_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete Account", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "account", 
                "description": "Delete an Account given its UUID"
            }
        }, 
        "/accounts/{uuid}/verify": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/account_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "accounts"
                ], 
                "x-doc-hide": true, 
                "summary": "Verify account", 
                "x-ntnx-operations": [
                    "verify"
                ], 
                "x-ntnx-kind": "account", 
                "description": "Verify account settings"
            }
        }, 
        "/action_rule_results": {
            "post": {
                "description": "For testing purpose.", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_rule_results"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new action_rule_result", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "action_rule_result", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_intent_response"
                        }
                    }
                }
            }
        }, 
        "/action_rule_results/action/{action}": {
            "post": {
                "description": "Abort or resume the rule execution instance.\n", 
                "parameters": [
                    {
                        "description": "The action type.", 
                        "in": "path", 
                        "x-ntnx-enum": [
                            "ABORT"
                        ], 
                        "required": true, 
                        "type": "string", 
                        "name": "action"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_action_input"
                        }
                    }
                ], 
                "tags": [
                    "action_rule_results"
                ], 
                "x-doc-hide": true, 
                "summary": "Perform an action to abort/resume action rule execution instance.\n", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "action_rule_result", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }
                }
            }
        }, 
        "/action_rule_results/list": {
            "post": {
                "description": "This operation gets a list of action_rule_result, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "action_rule_results"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing action_rule_result", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_rule_result", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_status"
                        }
                    }
                }
            }
        }, 
        "/action_rule_results/{uuid}": {
            "get": {
                "description": "This operation gets a existing action_rule_result.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_rule_results"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting action_rule_result", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_rule_result", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing action_rule_result.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_rule_results"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing action_rule_result", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "action_rule_result", 
                "responses": {
                    "default": {
                        "description": "internal error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_result_status"
                        }
                    }, 
                    "202": {
                        "description": "Request succeeded"
                    }
                }
            }
        }, 
        "/action_rules": {
            "post": {
                "description": "This operation submits a request to create a new action_rule based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new action_rule", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "action_rule", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_intent_response"
                        }
                    }
                }
            }
        }, 
        "/action_rules/list": {
            "post": {
                "description": "This operation gets a list of action_rule, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "action_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing action_rule", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_rule", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_status"
                        }
                    }
                }
            }
        }, 
        "/action_rules/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing action_rule based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing action_rule", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "action_rule", 
                "responses": {
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing action_rule.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting action_rule", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_rule", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing action_rule.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing action_rule", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "action_rule", 
                "responses": {
                    "default": {
                        "description": "internal error", 
                        "schema": {
                            "$ref": "#/definitions/action_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request succeeded"
                    }
                }
            }
        }, 
        "/action_templates": {
            "post": {
                "description": "This operation submits a request to create a new action_template based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_template_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_templates"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new action_template", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "action_template", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_template_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_template_intent_response"
                        }
                    }
                }
            }
        }, 
        "/action_templates/list": {
            "post": {
                "description": "This operation gets a list of action_template, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/action_template_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "action_templates"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing action_template", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_template", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_template_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_template_status"
                        }
                    }
                }
            }
        }, 
        "/action_templates/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing action_template based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_template_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_templates"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing action_template", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "action_template", 
                "responses": {
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/action_template_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/action_template_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_template_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing action_template.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_templates"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting action_template", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_template", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_template_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_template_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_template_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing action_template.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_templates"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing action_template", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "action_template", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_template_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted"
                    }
                }
            }
        }, 
        "/action_trigger_types": {
            "post": {
                "description": "This operation submits a request to create a new action_trigger_type based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_trigger_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new action_trigger_type", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "action_trigger_type", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_intent_response"
                        }
                    }
                }
            }
        }, 
        "/action_trigger_types/list": {
            "post": {
                "description": "This operation gets a list of action_trigger_type, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "action_trigger_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing action_trigger_type", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_trigger_type", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_status"
                        }
                    }
                }
            }
        }, 
        "/action_trigger_types/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing action_trigger_type based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_trigger_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing action_trigger_type", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "action_trigger_type", 
                "responses": {
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing action_trigger_type.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_trigger_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting action_trigger_type", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_trigger_type", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_status"
                        }
                    }
                }
            }
        }, 
        "/action_trigger_types/{uuid}/display_metadata": {
            "get": {
                "description": "This operation gets action trigger type UI display metadata.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_trigger_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Get action trigger type UI display metadata", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_trigger_type", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/display_metadata"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_trigger_type_status"
                        }
                    }
                }
            }
        }, 
        "/action_types": {
            "post": {
                "description": "This operation submits a request to create a new action_type based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_type_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new action_type", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "action_type", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_type_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_type_intent_response"
                        }
                    }
                }
            }
        }, 
        "/action_types/list": {
            "post": {
                "description": "This operation gets a list of action_type, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/action_type_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "action_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing action_type", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_type", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_type_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_type_status"
                        }
                    }
                }
            }
        }, 
        "/action_types/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing action_type based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/action_type_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "action_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing action_type", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "action_type", 
                "responses": {
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/action_type_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/action_type_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_type_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing action_type.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting action_type", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_type", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/action_type_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_type_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_type_status"
                        }
                    }
                }
            }
        }, 
        "/action_types/{uuid}/display_metadata": {
            "get": {
                "description": "This operation gets action type UI display metadata.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "action_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Get action type UI display metadata", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "action_type", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/display_metadata"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/action_type_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/action_type_status"
                        }
                    }
                }
            }
        }, 
        "/alerts/action/{action}": {
            "post": {
                "description": "Acknowledge alerts being looked at or be resolved.\n", 
                "parameters": [
                    {
                        "description": "The action type.", 
                        "in": "path", 
                        "x-ntnx-enum": [
                            "ACKNOWLEDGE", 
                            "RESOLVE"
                        ], 
                        "required": true, 
                        "type": "string", 
                        "name": "action"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/alert_action_input"
                        }
                    }
                ], 
                "tags": [
                    "alerts"
                ], 
                "x-doc-hide": false, 
                "summary": "Perform an action to acknowledge or resolve alerts.\n", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "alert", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/alert_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }
                }
            }
        }, 
        "/alerts/list": {
            "post": {
                "description": "This operation gets a list of alert, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/alert_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "alerts"
                ], 
                "x-doc-hide": false, 
                "summary": "Get a list of existing alert", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "alert", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/alert_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/alert_status"
                        }
                    }
                }
            }
        }, 
        "/alerts/notify": {
            "post": {
                "description": "This operation submits a request to create a new alert based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/alert_notification_input"
                        }
                    }
                ], 
                "tags": [
                    "alerts"
                ], 
                "x-doc-hide": false, 
                "summary": "Create a new alert", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "alert", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/alert_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }
                }
            }
        }, 
        "/alerts/{uuid}": {
            "get": {
                "description": "This operation gets a existing alert.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "alerts"
                ], 
                "x-doc-hide": false, 
                "summary": "Get a exiting alert", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "alert", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/alert_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/alert_status"
                        }
                    }
                }
            }
        }, 
        "/app_runlogs/archival_policy/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_archive_list_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "app_runlogs"
                ], 
                "x-doc-hide": true, 
                "summary": "Returns archive information of the runlogs", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app_runlog", 
                "description": "Returns archive information of the runlogs"
            }
        }, 
        "/app_runlogs/archival_policy/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_archive_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "app_runlogs"
                ], 
                "x-doc-hide": true, 
                "summary": "Returns archive information of the runlogs", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app_runlog", 
                "description": "Returns archive information of the runlogs"
            }
        }, 
        "/app_runlogs/archive_file/{uuid}/download": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "type": "string", 
                            "format": "binary"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "produces": [
                    "application/octet-stream"
                ], 
                "tags": [
                    "app_runlogs"
                ], 
                "x-doc-hide": true, 
                "summary": "Returns archive containing script and output file for download", 
                "x-ntnx-operations": [
                    "archive_download"
                ], 
                "x-ntnx-kind": "app_runlog", 
                "description": "Returns archive containing script and output file for download"
            }
        }, 
        "/app_tasks": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_task_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/app_task_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "app_tasks"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new app_task", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "app_task", 
                "description": "This operation submits a request to create a new app_task based on the input parameters.\n"
            }
        }, 
        "/app_tasks/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_task_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/app_task_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "app_tasks"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing app_tasks", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app_task", 
                "description": "This operation gets a list of app_tasks, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n"
            }
        }, 
        "/app_tasks/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_task_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/app_task_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "app_tasks"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing app_task", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "app_task", 
                "description": "This operation submits a request to update a existing app_task based on the input parameters.\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_task_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "app_tasks"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting app_task", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app_task", 
                "description": "This operation gets a existing app_task."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "app_tasks"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing app_task", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "app_task", 
                "description": "This operation submits a request to delete a existing app_task."
            }
        }, 
        "/app_tasks/{uuid}/share": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_task_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/app_task_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/app_task_share_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "app_tasks"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing app_task", 
                "x-ntnx-operations": [
                    "share"
                ], 
                "x-ntnx-kind": "app_task", 
                "description": "Share the library task between projects."
            }
        }, 
        "/apps": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/app_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/app_custom_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Create Application", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Given a spec creates a Application with associated metadata\n"
            }
        }, 
        "/apps/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Successful operation", 
                        "schema": {
                            "$ref": "#/definitions/app_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Error", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/app_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "List the Application", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app", 
                "description": "List the Application with associated metadata"
            }
        }, 
        "/apps/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/app_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/app_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Update Application", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Given a spec and Application UUID, update Application\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Application", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Given a UUID, returns a Application definition"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete Application", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Delete a Application given its UUID"
            }
        }, 
        "/apps/{uuid}/actions/{action_uuid}/run": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_actionrun_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "action_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of Action in Application to execute"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/app_actionrun_input"
                        }
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "The API to run an action of appplication on provided target.", 
                "x-ntnx-operations": [
                    "action_run"
                ], 
                "x-ntnx-kind": "app", 
                "description": "The API to run an action of appplication on provided target."
            }
        }, 
        "/apps/{uuid}/app_runlogs/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_list"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "List the Runlogs", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app", 
                "description": "List the runlog with associated metadata"
            }
        }, 
        "/apps/{uuid}/app_runlogs/{runlog_uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "runlog_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of runlog to get"
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Runlog", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Given a UUID, returns the runlog"
            }
        }, 
        "/apps/{uuid}/app_runlogs/{runlog_uuid}/abort": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "runlog_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of runlog to abort"
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Abort Runlog", 
                "x-ntnx-operations": [
                    "runlog_abort"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Abort the given Runlog"
            }
        }, 
        "/apps/{uuid}/app_runlogs/{runlog_uuid}/output": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_output_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "runlog_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of runlog to get"
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Returns last 10 lines of output of runlog", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Returns last ten lines of output"
            }
        }, 
        "/apps/{uuid}/app_runlogs/{runlog_uuid}/output/download": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "type": "string", 
                            "format": "binary"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_runlog_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "runlog_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of runlog to get"
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Returns output file for download", 
                "x-ntnx-operations": [
                    "runlog_download"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Returns output file for downlaod"
            }
        }, 
        "/apps/{uuid}/substrates/{substrate_uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/app_substrate_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/app_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "substrate_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of substrate element to get"
                    }
                ], 
                "tags": [
                    "apps"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Substrate Element", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "app", 
                "description": "Given a UUID, returns the substrate element"
            }
        }, 
        "/availability_zones": {
            "post": {
                "description": "Create an availability zone", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "availability_zones"
                ], 
                "x-doc-hide": true, 
                "summary": "Create an availability zone", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_intent_response"
                        }
                    }
                }
            }
        }, 
        "/availability_zones/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }
                }, 
                "description": "Get availability zones", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "availability_zones"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "summary": "Get availability zones"
            }
        }, 
        "/availability_zones/sync": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_input"
                        }
                    }
                ], 
                "tags": [
                    "availability_zones"
                ], 
                "description": "Sync global entities like protection rules, recovery plans to all\nconnected availability zones.\n", 
                "x-doc-hide": true, 
                "summary": "Sync global entities to all connected availability zones."
            }
        }, 
        "/availability_zones/{uuid}": {
            "put": {
                "description": "Modify availability zone", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "availability_zones"
                ], 
                "x-doc-hide": true, 
                "summary": "Modify availability zone", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }
                }
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }
                }, 
                "description": "Get details for an availability zones", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "availability_zones"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "summary": "Get details for an availability zones"
            }, 
            "delete": {
                "description": "Delete an availability zone", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "availability_zones"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete an availability zone", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "availability_zone", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/availability_zone_status"
                        }
                    }
                }
            }
        }, 
        "/aws/availability_zones/list": {
            "post": {
                "description": "List all the AWS roles. Supported filters are:\n- account_uuid\n- region\nUse account_uuid filter to list all the availability zones on\na particular AWS account.\nUse the account_uuid and region filters together to list all the\navailability zones on a particular region of an AWS account .\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_availability_zone_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/availability_zones"
                ], 
                "x-doc-hide": true, 
                "summary": "List all the AWS availability zones", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_availability_zone", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_availability_zone_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }
            }
        }, 
        "/aws/elastic_ips/list": {
            "post": {
                "description": "List all AWS elastic IPs. Supported filters are:\n- account_uuid\n- region\n- free_public_ip_address_only\n- eip_type\nUse account_uuid filter to list all the elastic IPs on the default\nregion of a particular account.\nUse account_uuid and region filters together to list the elastic IPs\non an AWS account in the particular region.\nSet the free_public_ip_address_only filter to True to return only\nfree public IPs in the above two cases.\nSet eip_type filter to either 'standard' or 'vpc' when\nonly_free_public_ips is set to True.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_elastic_ip_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/elastic_ips"
                ], 
                "x-doc-hide": true, 
                "summary": "List AWS elastic IPs.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_elastic_ip", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_elastic_ip_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_elastic_ip_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/aws_elastic_ip_status"
                        }
                    }
                }
            }
        }, 
        "/aws/images/list": {
            "post": {
                "description": "List AWS AMIs . Supported filters are:\n- account_uuid\n- region\n- executable_only\n- public_images\n- image_name\nUse account_uuid to list images on a particular account.\nUse account_uuid and region filters together to list images\nbelonging to a particular region.\nSet executable_only to True in either of the above two cases\nto list only executable images.\nSet public_images to True if AWS community AMIs also\nhave to be listed\nProvide image_name to limit the results to\nthose AMI names containing the provided name\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_image_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/images"
                ], 
                "x-doc-hide": true, 
                "summary": "List all AWS AMIs.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_image", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_image_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_image_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/aws_image_status"
                        }
                    }
                }
            }
        }, 
        "/aws/key_pairs/list": {
            "post": {
                "description": "List all the AWS key pairs. Supported filters are:\n- account_uuid\n- region\nUse account_uuid filter to list all the key pairs on the default region of\na particular AWS account.\nUse account_uuid and region filters together to list the key pairs on\na particular region of an AWS account.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_key_pair_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/key_pairs"
                ], 
                "x-doc-hide": true, 
                "summary": "List all the AWS key pairs", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_key_pair", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_key_pair_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }
            }
        }, 
        "/aws/machine_types/list": {
            "post": {
                "description": "List all the AWS machine types. No filters to be mentioned.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_machine_type_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/machine_types"
                ], 
                "x-doc-hide": true, 
                "summary": "List all the AWS machine types", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_machine_type", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_machine_type_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }
            }
        }, 
        "/aws/regions/list": {
            "post": {
                "description": "List all the AWS regions. No filters to be mentioned.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_region_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/regions"
                ], 
                "x-doc-hide": true, 
                "summary": "List all the AWS regions", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_region", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_region_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }
            }
        }, 
        "/aws/roles/list": {
            "post": {
                "description": "List all the AWS roles. Supported filters are:\n- account_uuid\n- region\nUse account_uuid filter to list all the roles on the default region of a\nparticular AWS account.\nUse account_uuid and region filter together to list all the roles on a\nparticular region of an aws_account.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_role_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/roles"
                ], 
                "x-doc-hide": true, 
                "summary": "List all the AWS roles", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_role", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_role_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }
            }
        }, 
        "/aws/security_groups/list": {
            "post": {
                "description": "List all AWS Security Groups. Supported filters are:\n- account_uuid\n- region\n- vpc_id\n- include_classic_sg\nUse account_uuid to list all security groups on the default\nregion of a particular AWS account.\nUse account_uuid and region filters together to list all\nsecurity groups in a particular region.\nUse account_uuid, region and vpc_id filters together to list all\nsecurity groups in a particular vpc.\nSet include_classic_sg filter to 'True' to also show\nEC2 classic security groups in the above three cases.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_security_group_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/security_groups"
                ], 
                "x-doc-hide": true, 
                "summary": "List all AWS Security Groups", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_security_group", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_security_group_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_security_group_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/aws_security_group_status"
                        }
                    }
                }
            }
        }, 
        "/aws/security_groups/{account_uuid}/{region}/{id}": {
            "get": {
                "description": "Get an AWS security group", 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "account_uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "^[a-z]{2}-[a-z\\-]*-[1-9]{1}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "region", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "^sg-[a-f0-9]{1,17}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "aws/security_groups"
                ], 
                "x-doc-hide": true, 
                "summary": "Get an AWS security group", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_security_group", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_security_group_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_security_group_intent_resource"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/aws_security_group_status"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/aws_security_group_status"
                        }
                    }
                }
            }
        }, 
        "/aws/subnets/list": {
            "post": {
                "description": "List all AWS subnets. Supported filters are:\n- account_uuid\n- region\n- vpc_id\n- availability_zone\nUse account_uuid filter to list all the subnets on the default\nregion of a particular account.\nUse account_uuid and region filters together to list the subnets on\nall VPCs and AZs of a particular region.\nUse account_uuid, region and vpc_id filter together to list the\nsubnets on a particular VPC.\nUse account_uuid, region and availability_zone filter together to list\nthe subnets on a particualr AZ.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_subnet_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/subnets"
                ], 
                "x-doc-hide": true, 
                "summary": "List all AWS subnets.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_subnet", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_subnet_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_subnet_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/aws_subnet_status"
                        }
                    }
                }
            }
        }, 
        "/aws/subnets/{account_uuid}/{region}/{id}": {
            "get": {
                "description": "Get details for a subnet.", 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "account_uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "^[a-z]{2}-[a-z\\-]*-[1-9]{1}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "region", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "^subnet-[a-f0-9]{1,17}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "aws/subnets"
                ], 
                "x-doc-hide": true, 
                "summary": "Get details for an AWS subnet", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_subnet", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_subnet_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_subnet_intent_resource"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/aws_subnet_status"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/aws_subnet_status"
                        }
                    }
                }
            }
        }, 
        "/aws/vms": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "aws/vms"
                ], 
                "x-doc-hide": true, 
                "summary": "Create an AWS instance(VM)", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "aws_vm", 
                "description": "A VM is a logical representation of a computer (CPU, memory, storage, and operating system)\n"
            }
        }, 
        "/aws/vms/list": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_list_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/vms"
                ], 
                "x-doc-hide": true, 
                "summary": "List AWS VMs.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_vm", 
                "description": "List VMs with associated metadata. Supported filters are:\n- account_uuid\n- region\n- power_state\nUse the account_uuid filter to get all the VMs on the default region of a\nparticular account.\nUse account_uuid and region filters together to list all the VMs in a\nparticular region.\nSet the power_state to running, stopped, and terminated. in the above two cases\nto list only VMs in the particular power state.\n"
            }
        }, 
        "/aws/vms/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "aws/vms"
                ], 
                "x-doc-hide": true, 
                "summary": "Update an AWS VM.", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "aws_vm", 
                "description": "Given an intenful spec and VM uuid, update an AWS VM."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "aws/vms"
                ], 
                "x-doc-hide": true, 
                "summary": "Get an AWS VM.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_vm", 
                "description": "Given a UUID, returns an AWS VM definition."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/aws_vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "aws/vms"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete an AWS VM.", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "aws_vm", 
                "description": "Delete an AWS VM given its uuid."
            }
        }, 
        "/aws/volume_types/list": {
            "post": {
                "description": "List all the AWS volume types. No filters to be mentioned.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_volume_type_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/volume_types"
                ], 
                "x-doc-hide": true, 
                "summary": "List all the AWS volume types", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_volume_type", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_volume_type_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }
            }
        }, 
        "/aws/vpcs/list": {
            "post": {
                "description": "List all AWS VPCs. Supported filters are:\n- account_uuid\n- region\nUse account_uuid to list all VPCs on the default region of a\nparticular AWS account.\nUse account_uuid and region filters together to list the\nVPCs in a particular region.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/aws_vpc_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "aws/vpcs"
                ], 
                "x-doc-hide": true, 
                "summary": "List all AWS VPCs", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_vpc", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_vpc_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_vpc_list_intent_response"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/aws_vpc_status"
                        }
                    }
                }
            }
        }, 
        "/aws/vpcs/{account_uuid}/{region}/{id}": {
            "get": {
                "description": "Get an AWS VPC.", 
                "parameters": [
                    {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "account_uuid", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "^[a-z]{2}-[a-z\\-]*-[1-9]{1}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "region", 
                        "in": "path"
                    }, 
                    {
                        "pattern": "^vpc-[a-f0-9]{1,17}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "aws/vpcs"
                ], 
                "x-doc-hide": true, 
                "summary": "Get an AWS VPC", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "aws_vpc", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/aws_vpc_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/aws_vpc_intent_resource"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/aws_vpc_status"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/aws_vpc_status"
                        }
                    }
                }
            }
        }, 
        "/az_proxy": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "query", 
                        "type": "string", 
                        "description": "Availability Zone Name", 
                        "name": "az_name"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "HTTP method to call", 
                        "in": "query", 
                        "name": "method"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "URL path to call on remote cluster", 
                        "in": "query", 
                        "name": "url_path"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "description": "content type for the call", 
                        "name": "content_type"
                    }, 
                    {
                        "in": "body", 
                        "name": "az_proxy_body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                ], 
                "tags": [
                    "remote_connections"
                ], 
                "description": "Proxies request to remote cluster, uses remote connection\nto call endpoint on remote cluster\n", 
                "x-doc-hide": true, 
                "summary": "Proxies request to remote AZ"
            }
        }, 
        "/batch": {
            "post": {
                "description": "Batching allows for instructions for several operations to be sent\nusing a single HTTP request. Depending on the batch parameters, the\nNutanix v3 gateway processes each independent operation sequentially\nor in parallel. Once all operations in the batch have been completed,\na consolidated response is returned and the HTTP connection is closed.\nThe batch API takes an array of logical HTTP requests represented as\nJSON arrays. Maximum size of the array should not exceed 60.\nEach request comprises the following:\n- A method (corresponding to HTTP methods such as GET, PUT, and POST)\n- A relative URL (relative_url)\n- (Optional) A body (for POST and PUT requests).\nThe batch API returns an array of logical HTTP responses represented\nas JSON arrays containing the following:\n- A status code\n- (Optional) A body represented as a JSON-encoded string\n", 
                "tags": [
                    "batch"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/batch_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "List of intent APIs", 
                        "name": "intent_list", 
                        "schema": {
                            "$ref": "#/definitions/batch_request"
                        }
                    }
                ], 
                "summary": "Submit a list of one or more intentful REST APIs to be processed"
            }
        }, 
        "/billing/account": {
            "get": {
                "description": "Get account information for the logged in user.", 
                "tags": [
                    "billing"
                ], 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/account_details"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "summary": "Get account information for the current user."
            }
        }, 
        "/billing/invoices": {
            "post": {
                "description": "Get all invoices for the tenant account.", 
                "tags": [
                    "billing"
                ], 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/billing_invoice_list"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "summary": "Get a list of existing billing_invoices"
            }
        }, 
        "/billing/summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/billing_summary"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "start_date", 
                        "in": "query", 
                        "format": "date"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "end_date", 
                        "in": "query", 
                        "format": "date"
                    }
                ], 
                "tags": [
                    "billing"
                ], 
                "description": "Get usage details for the current tenant grouped by day.", 
                "x-doc-hide": true, 
                "summary": "Get usage details for the current tenant."
            }
        }, 
        "/billing/unbilled_invoice": {
            "get": {
                "description": "Get sumamry of usages that are not yet invoiced to the user.", 
                "tags": [
                    "billing"
                ], 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/unbilled_invoice"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "summary": "Get unbilled usage summary."
            }
        }, 
        "/blackouts": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_response"
                        }
                    }
                }, 
                "description": "Create a blackout object", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Create blackout object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "blackouts"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "blackout", 
                "summary": "Create blackout object"
            }
        }, 
        "/blackouts/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Retrieve all blackout objects", 
                        "schema": {
                            "$ref": "#/definitions/blackout_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve blackout objects", 
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    }
                }, 
                "description": "Retrieve all blackout objects", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/blackout_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "blackouts"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "blackout", 
                "summary": "Retrieve all blackout objects"
            }
        }, 
        "/blackouts/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal error", 
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_response"
                        }
                    }
                }, 
                "description": "Update blackout entity", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update blackout", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "blackouts"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "blackout", 
                "summary": "Update blackout entity"
            }, 
            "get": {
                "responses": {
                    "default": {
                        "description": "Failed to retrieve blackout object", 
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    }, 
                    "202": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_response"
                        }
                    }
                }, 
                "description": "Retrieve specified blackout object", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "blackouts"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "blackout", 
                "summary": "Retrieve specified blackout object"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Failed to delete blackout object", 
                        "schema": {
                            "$ref": "#/definitions/blackout_status"
                        }
                    }, 
                    "202": {
                        "description": "Request succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blackout_intent_response"
                        }
                    }
                }, 
                "description": "Delete specified blackout object", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "blackouts"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "blackout", 
                "summary": "Delete specified blackout object"
            }
        }, 
        "/blueprints": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_custom_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Create Blueprint", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Given a spec creates a Blueprint with associated metadata\n"
            }
        }, 
        "/blueprints/brownfield_import/vms/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "List the vms available for import", 
                "x-ntnx-operations": [
                    "brownfield_view"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "List the blueprint launch pending request with the filters - platform_type - account_uuid - platform_filters"
            }
        }, 
        "/blueprints/import_file": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_upload_output"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "blueprint_file", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "format": "binary"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Create Blueprint from file", 
                "x-ntnx-operations": [
                    "upload"
                ], 
                "x-ntnx-kind": "blueprint", 
                "consumes": [
                    "application/octet-stream"
                ], 
                "description": "Creates a blueprint from uploaded file"
            }
        }, 
        "/blueprints/import_json": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_upload_output"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_upload_custom_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Create Blueprint using json", 
                "x-ntnx-operations": [
                    "import"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Given a spec creates a Blueprint with associated metadata\n"
            }
        }, 
        "/blueprints/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "List the Blueprint", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "List the Blueprint with associated metadata"
            }
        }, 
        "/blueprints/marketplace_launch": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_marketplace_launch_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_marketplace_launch_input"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Launch the marketplace item", 
                "x-ntnx-operations": [
                    "launch"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Launch the given marketplace item\n"
            }
        }, 
        "/blueprints/pending_launches/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_pending_launches_list_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "List the pending Blueprint launches", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "List the blueprint launch pending requests"
            }
        }, 
        "/blueprints/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of blueprint to be updated"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_custom_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Update Blueprint", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Given a spec and Blueprint UUID, update Blueprint\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of Blueprint to get"
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Blueprint", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Given a UUID, returns a Blueprint definition"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of the blueprint to be deleted"
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete Blueprint", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Delete a Blueprint given its UUID"
            }
        }, 
        "/blueprints/{uuid}/clone": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Blueprint cloning Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_clone_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of blueprint to be cloned"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_clone_input"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Clone the blueprint", 
                "x-ntnx-operations": [
                    "clone"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Clone the given blueprint\n"
            }
        }, 
        "/blueprints/{uuid}/export_file": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "format": "binary"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of Blueprint to get"
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Download blueprint file", 
                "x-ntnx-operations": [
                    "download"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Given a UUID, returns a Blueprint file"
            }
        }, 
        "/blueprints/{uuid}/export_json": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_download_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of Blueprint to get"
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Blueprint in json format", 
                "x-ntnx-operations": [
                    "export"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Given a UUID, returns a Blueprint definition"
            }
        }, 
        "/blueprints/{uuid}/launch": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_launch_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Uuid of blueprint to be launched"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_launch_input"
                        }
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Launch the blueprint", 
                "x-ntnx-operations": [
                    "launch"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Launch the given blueprint\n"
            }
        }, 
        "/blueprints/{uuid}/pending_launches/{launched_uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_pending_launches_resource"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/blueprint_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of Blueprint to get"
                    }, 
                    {
                        "in": "path", 
                        "name": "launched_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "Launched uuid of blueprint"
                    }
                ], 
                "tags": [
                    "blueprint"
                ], 
                "x-doc-hide": true, 
                "summary": "Get the pending launch details", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "blueprint", 
                "description": "Get the details of the pending launch with the given uuid"
            }
        }, 
        "/categories/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_key_list_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "List the category keys.\n", 
                "parameters": [
                    {
                        "required": false, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/category_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "view_name"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "List the category keys."
            }
        }, 
        "/categories/{name}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_key_status"
                        }
                    }, 
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/category_key_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "Create or Update a category Key.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 64
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/category_key"
                        }
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "create_or_update_name"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Create or Update a category Key."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_key_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "Get a category key.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 64
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "view_name"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Get a category key."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "Delete a category Key.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 64
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "delete_name"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Delete a category Key."
            }
        }, 
        "/categories/{name}/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_value_list_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "List the values for a specified key.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 64
                    }, 
                    {
                        "required": false, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/category_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "view_value"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "List the values for a specified key."
            }
        }, 
        "/categories/{name}/{value}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_value_status"
                        }
                    }, 
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/category_value_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "Create or Update a category value. Creates when value doesn't exist.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 64
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "value", 
                        "in": "path", 
                        "maxLength": 64
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/category_value"
                        }
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "create_or_update_value"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Create or Update a category value."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_value_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "Get a category value.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 64
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "value", 
                        "in": "path", 
                        "maxLength": 64
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "view_value"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Get a category value."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "Delete a category value.", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path", 
                        "maxLength": 64
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "value", 
                        "in": "path", 
                        "maxLength": 64
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "delete_value"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Delete a category value."
            }
        }, 
        "/category/query": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/category_query_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/category_status"
                        }
                    }
                }, 
                "description": "Get list of entities attached to categories or policies in which categories are used as defined by the filter criteria.\n", 
                "parameters": [
                    {
                        "in": "body", 
                        "name": "query", 
                        "schema": {
                            "$ref": "#/definitions/category_query_input"
                        }
                    }
                ], 
                "tags": [
                    "categories"
                ], 
                "x-ntnx-operations": [
                    "view_value"
                ], 
                "x-ntnx-kind": "category", 
                "summary": "Get category usage details."
            }
        }, 
        "/cells": {
            "post": {
                "description": "Create a cell instance", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Create cell object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/cell_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "cell"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a cell instance", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "cell", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cell_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    }
                }
            }
        }, 
        "/cells/list": {
            "post": {
                "description": "Retrieves all cells", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/cell_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "cell"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves all cells", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "cell", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cell_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    }
                }
            }
        }, 
        "/cells/{uuid}": {
            "put": {
                "description": "Update cell", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update cell", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/cell_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "cell"
                ], 
                "x-doc-hide": true, 
                "summary": "Update cell", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "cell", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cell_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Retrieves specified cell", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "cell"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves specified cell", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "cell", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cell_intent_response"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "Delete specified cell", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "cell"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete specified cell", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "cell", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cell_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cell_intent_response"
                        }
                    }
                }
            }
        }, 
        "/cloud_configs/{cloud_type}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_config_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/cloud_type"
                    }
                ], 
                "tags": [
                    "cloud"
                ], 
                "description": "Gets the Nutanix hosted cloud config.", 
                "x-doc-hide": true, 
                "summary": "Gets the Nutanix hosted cloud config."
            }
        }, 
        "/cloud_trusts": {
            "post": {
                "x-ntnx-permissions": [
                    "cloud_trust.create"
                ], 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "cloud"
                ], 
                "x-doc-hide": true, 
                "summary": "Pairs this cloud with the given cloud (Nutanix hosted cloud/ Onprem Cloud).", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "cloud_trust", 
                "description": "Performs cloud pairing by establishing a trust with the provided cloud."
            }
        }, 
        "/cloud_trusts/list": {
            "post": {
                "x-ntnx-permissions": [
                    "cloud_trust.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "A cloud trust object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "cloud"
                ], 
                "x-doc-hide": true, 
                "summary": "List trusted clouds.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "cloud_trust", 
                "description": "Gets list of trusted clouds."
            }
        }, 
        "/cloud_trusts/{uuid}": {
            "get": {
                "x-ntnx-permissions": [
                    "cloud_trust.view"
                ], 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "cloud"
                ], 
                "x-doc-hide": true, 
                "summary": "Get the details of the specified trusted cloud.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "cloud_trust", 
                "description": "Gets the details of the specified trusted cloud."
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "cloud_trust.delete"
                ], 
                "description": "Deletes the specified cloud pairing by un-establishing trust with the cloud.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "cloud"
                ], 
                "x-doc-hide": true, 
                "summary": "Deletes the specified cloud pairing.", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "cloud_trust", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/cloud_trust_intent_response"
                        }
                    }
                }
            }
        }, 
        "/clusters/entity_replication_target_details": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/placement_detail"
                        }
                    }
                }, 
                "description": "Get entity placement details.", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Entity spec.", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/placement_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-kind": "cluster", 
                "x-doc-hide": true, 
                "summary": "Get the placement information for an entity. This will be used to\nidentify the replication target for an entity snapshot or placement of\nthe entity.\n"
            }
        }, 
        "/clusters/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cluster_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cluster_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/cluster_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "This operation gets a list of clusters, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "x-ntnx-kind": "cluster", 
                "summary": "Get a list of existing clusters"
            }
        }, 
        "/clusters/multicluster_config": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Apply multicluster configuration from Prism Central.", 
                "x-ntnx-kind": "multicluster_config", 
                "x-doc-hide": true, 
                "summary": "Apply multicluster configuration from Prism Central."
            }
        }, 
        "/clusters/multicluster_config/{cluster_uuid}/migrate_ssp_config": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/ssp_migration_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "description": "The UUID of the entity.", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "cluster_uuid"
                    }, 
                    {
                        "required": false, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/ssp_config_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Migrate SSP config from a Prism Element.", 
                "x-ntnx-kind": "multicluster_config", 
                "x-doc-hide": true, 
                "summary": "Migrate SSP config from a Prism Element."
            }
        }, 
        "/clusters/multicluster_config/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Update a scheduled and unprocessed multicluster configuration request.\n", 
                "x-ntnx-kind": "multicluster_config", 
                "x-doc-hide": true, 
                "summary": "Update a scheduled and unprocessed multicluster configuration request.\n"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/multicluster_config_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Delete a scheduled and unprocessed multicluster configuration request.\n", 
                "x-ntnx-kind": "multicluster_config", 
                "x-doc-hide": true, 
                "summary": "Delete a scheduled and unprocessed multicluster configuration request.\n"
            }
        }, 
        "/clusters/multicluster_config/{uuid}/cancel": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Cancel a multicluster configuration request by cancelling all queued\ncluster configuration tasks.\n", 
                "x-ntnx-kind": "multicluster_config", 
                "x-doc-hide": true, 
                "summary": "Cancel a multicluster configuration request from Prism Central."
            }
        }, 
        "/clusters/multicluster_config/{uuid}/pause": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Pause a multicluster configuration request by pausing all\nqueued cluster configuration tasks.\n", 
                "x-ntnx-kind": "multicluster_config", 
                "x-doc-hide": true, 
                "summary": "Pause a multicluster configuration request from Prism Central."
            }
        }, 
        "/clusters/multicluster_config/{uuid}/resume": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "description": "Resume a paused multicluster configuration request.", 
                "x-ntnx-kind": "multicluster_config", 
                "x-doc-hide": true, 
                "summary": "Resume a paused multicluster configuration request."
            }
        }, 
        "/clusters/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cluster_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/cluster_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/cluster_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "description": "This operation submits a request to update a existing cluster based on the input parameters.\n", 
                "x-ntnx-kind": "cluster", 
                "summary": "Update a existing cluster"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cluster_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cluster_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "This operation gets a existing cluster.", 
                "x-ntnx-kind": "cluster", 
                "summary": "Get a exiting cluster"
            }
        }, 
        "/clusters/{uuid}/certificates/ca_certs": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/ca_cert"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Add a new CA certificate", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Add a new CA certificate"
            }
        }, 
        "/clusters/{uuid}/certificates/ca_certs/{ca_name}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "ca_name", 
                        "in": "path", 
                        "maxLength": 64
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete the CA certificate", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Delete the CA certificate specified by certificate authority name\n"
            }
        }, 
        "/clusters/{uuid}/certificates/client_auth": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/ca_chain_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Replace the CA chain for client authentication", 
                "x-ntnx-ref-keys": [
                    "client_auth_reference"
                ], 
                "x-ntnx-kind": "client_auth", 
                "description": "Replace the CA chain for client authentication"
            }, 
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/ca_chain_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Import CA chain for client authentication", 
                "x-ntnx-ref-keys": [
                    "client_auth_reference"
                ], 
                "x-ntnx-kind": "client_auth", 
                "description": "Import CA chain for client authentication"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Remove the CA chain for client authentication", 
                "x-ntnx-ref-keys": [
                    "client_auth_reference"
                ], 
                "x-ntnx-kind": "client_auth", 
                "description": "Remove the CA chain for client authentication"
            }
        }, 
        "/clusters/{uuid}/certificates/csrs": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/csrs_spec"
                        }
                    }
                ], 
                "produces": [
                    "application/octet-stream"
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Download CSRs from cluster", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Download Certificate Signing Requests from cluster"
            }
        }, 
        "/clusters/{uuid}/certificates/csrs/{node_ip}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "node_ip", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Download CSR from a discovered node", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Download Certificate Signing Request from a discovered node"
            }
        }, 
        "/clusters/{uuid}/certificates/pemkey": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Generate a 2048 bits cipher length RSA key", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Generate a 2048 bits cipher length RSA key"
            }
        }, 
        "/clusters/{uuid}/certificates/pemkey/import": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "spec", 
                        "schema": {
                            "$ref": "#/definitions/pemkey_spec"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Import a new key", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Import a new key"
            }
        }, 
        "/clusters/{uuid}/certificates/svm_certs/{kms_uuid}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "kms_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/certificate_spec_upload_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Add one or more certificates to a service VM", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Add one or more certificates to a service VM"
            }
        }, 
        "/clusters/{uuid}/certificates/svm_certs/{node_uuid}/{kms_uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "node_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "in": "path", 
                        "name": "kms_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "cert", 
                        "schema": {
                            "$ref": "#/definitions/certificate"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Replace the certificate on a service VM", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Replace the certificate on a service VM"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "name": "node_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string"
                    }, 
                    {
                        "in": "path", 
                        "name": "kms_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete the certificate on a service VM", 
                "x-ntnx-ref-keys": [
                    "certificate_reference"
                ], 
                "x-ntnx-kind": "certificate", 
                "description": "Delete the certificate on a service VM"
            }
        }, 
        "/clusters/{uuid}/cloud_credentials/{cloud_type}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "$ref": "#/parameters/cloud_type"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Add a cloud credential for accessing cloud sites", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "Add a cloud credential for accessing cloud sites"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "$ref": "#/parameters/cloud_type"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete all cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "Delete all cloud credentials"
            }
        }, 
        "/clusters/{uuid}/cloud_credentials/{cloud_type}/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "$ref": "#/parameters/cloud_type"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "This operation gets a list of cloud credentials, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n"
            }
        }, 
        "/clusters/{uuid}/cloud_credentials/{cloud_type}/{cloud_credentials_id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "$ref": "#/parameters/cloud_type"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "name": "cloud_credentials_id", 
                        "in": "path", 
                        "format": "int64"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "This operation submits a request to update a existing cloud credentials based on the input parameters.\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "$ref": "#/parameters/cloud_type"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "name": "cloud_credentials_id", 
                        "in": "path", 
                        "format": "int64"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "This operation gets a existing cloud credentials."
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/cloud_credentials_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "$ref": "#/parameters/cloud_type"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "name": "cloud_credentials_id", 
                        "in": "path", 
                        "format": "int64"
                    }
                ], 
                "tags": [
                    "clusters"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing cloud credentials", 
                "x-ntnx-ref-keys": [
                    "cloud_credentials_reference"
                ], 
                "x-ntnx-kind": "cloud_credentials", 
                "description": "This operation submits a request to delete a existing cloud credentials."
            }
        }, 
        "/common_report_configs": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-doc-hide": true, 
                "summary": "Create common report config.", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "common_report_config", 
                "description": "This operation submits a request to create a common report\nconfiguration with associated metadata based on the intentful spec.\n"
            }
        }, 
        "/common_report_configs/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-doc-hide": true, 
                "summary": "List the common report configs.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "common_report_config", 
                "description": "This operation retrieves a list of all the common report\nconfigurations with associated metadata.\n"
            }
        }, 
        "/common_report_configs/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "description": "This operation updates a common report configuration based on the\nUUID and intentful spec.\n", 
                "x-ntnx-kind": "common_report_config", 
                "summary": "Update common report config."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-doc-hide": true, 
                "summary": "Get common report config information.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "common_report_config", 
                "description": "This operation retrieves a common report configuration based on the\nUUID.\n"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/common_report_config_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete common report config.", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "common_report_config", 
                "description": "This operation submits a request to delete a common report\nconfiguration based on the UUID.\n"
            }
        }, 
        "/containers": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new Container", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "container", 
                "description": "This operation submits a request to create a new Container based on the input parameters.\n"
            }
        }, 
        "/containers/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/container_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/container_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing Containers", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "container", 
                "description": "This operation gets a list of Containers, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n"
            }
        }, 
        "/containers/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Intent Spec for Container.", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing Container", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "container", 
                "description": "This operation submits a request to update a existing Container based on the input parameters.\nOnly state change of container is allowed.\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting Container", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "container", 
                "description": "This operation gets a existing Container."
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/container_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/container_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "containers"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing Container", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "container", 
                "description": "This operation submits a request to delete a existing Container."
            }
        }, 
        "/datacenters": {
            "post": {
                "description": "Create a datacenter instance", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Create datacenter object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "datacenter"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a datacenter instance", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "datacenter", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    }
                }
            }
        }, 
        "/datacenters/list": {
            "post": {
                "description": "Retrieves all datacenters", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "datacenter"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves all datacenters", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "datacenter", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    }
                }
            }
        }, 
        "/datacenters/{uuid}": {
            "put": {
                "description": "Update datacenter", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update datacenter", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "datacenter"
                ], 
                "x-doc-hide": true, 
                "summary": "Update datacenter", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "datacenter", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Retrieves specified datacenter", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "datacenter"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves specified datacenter", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "datacenter", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_response"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "Delete specified datacenter", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "datacenter"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete specified datacenter", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "datacenter", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/datacenter_intent_response"
                        }
                    }
                }
            }
        }, 
        "/direct_connects/connections": {
            "post": {
                "description": "This operation submits a request to create a new direct_connect based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "direct_connects"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new direct_connect", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "direct_connect", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_response"
                        }
                    }
                }
            }
        }, 
        "/direct_connects/connections/list": {
            "post": {
                "description": "This operation gets a list of direct_connects, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "direct_connects"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing direct_connects", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "direct_connect", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    }
                }
            }
        }, 
        "/direct_connects/connections/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing direct_connect based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "direct_connects"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing direct_connect", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "direct_connect", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_response"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing direct_connect.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "direct_connects"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting direct_connect", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "direct_connect", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing direct_connect.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "direct_connects"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing direct_connect", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "direct_connect", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_intent_response"
                        }
                    }
                }
            }
        }, 
        "/direct_connects/virtual_interfaces": {
            "post": {
                "description": "This operation submits a request to create a new direct_connect_virtual_interface based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "direct_connect_virtual_interfaces"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new direct_connect_virtual_interface", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "direct_connect_virtual_interface", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_response"
                        }
                    }
                }
            }
        }, 
        "/direct_connects/virtual_interfaces/list": {
            "post": {
                "description": "This operation gets a list of direct_connect_virtual_interfaces, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "direct_connect_virtual_interfaces"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing direct_connect_virtual_interfaces", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "direct_connect_virtual_interface", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    }
                }
            }
        }, 
        "/direct_connects/virtual_interfaces/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing direct_connect_virtual_interface based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "direct_connect_virtual_interfaces"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing direct_connect_virtual_interface", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "direct_connect_virtual_interface", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_response"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing direct_connect_virtual_interface.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "direct_connect_virtual_interfaces"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting direct_connect_virtual_interface", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "direct_connect_virtual_interface", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing direct_connect_virtual_interface.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "direct_connect_virtual_interfaces"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing direct_connect_virtual_interface", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "direct_connect_virtual_interface", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/direct_connect_virtual_interface_intent_response"
                        }
                    }
                }
            }
        }, 
        "/directory_services": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to create a new directory service configuration based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "directory_service"
                ], 
                "x-ntnx-operations": [
                    "add"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Create a new directory service configuration"
            }
        }, 
        "/directory_services/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of directory service configurations, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "directory_service"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Get a list of existing directory service configurations"
            }
        }, 
        "/directory_services/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to update a existing directory service configuration based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "directory_service"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Update a existing directory service configuration"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing directory service configuration.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "directory_service"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Get a exiting directory service configuration"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing directory service configuration.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "directory_service"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Delete a existing directory service configuration"
            }
        }, 
        "/directory_services/{uuid}/search": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_search_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_status"
                        }
                    }
                }, 
                "description": "Retrieves a user or a group available in the directory service based on\nthe UUID specified.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/directory_service_search_metadata"
                        }
                    }
                ], 
                "tags": [
                    "directory_service"
                ], 
                "x-ntnx-operations": [
                    "search"
                ], 
                "x-ntnx-kind": "directory_service", 
                "summary": "Search user or group in the directory service."
            }
        }, 
        "/disks/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/disk_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/disk_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/disk_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "disks"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing Disks", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "disk", 
                "description": "This operation gets a list of Disks, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n"
            }
        }, 
        "/disks/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/disk_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/disk_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "disks"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting Disk", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "disk", 
                "description": "This operation gets a existing Disk."
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/disk_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/disk_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "disks"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing Disk", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "disk", 
                "description": "This operation submits a request to delete a existing Disk."
            }
        }, 
        "/docker_registries": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Docker registry spec", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a docker registry", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "docker_registry", 
                "description": "Create a docker registry"
            }
        }, 
        "/docker_registries/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "x-doc-hide": true, 
                "summary": "List all docker registries", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "docker_registry", 
                "description": "List all docker registries"
            }
        }, 
        "/docker_registries/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Docker registry spec", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a docker registry", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "docker_registry", 
                "description": "Update a docker registry"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Failed to retrieve docker registry", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieve a Docker registry", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "docker_registry", 
                "description": "Retrieve a docker registry"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "x-doc-hide": true, 
                "summary": "Deletes a Docker registry", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "docker_registry", 
                "description": "Deletes a Docker registry"
            }
        }, 
        "/docker_registries/{uuid}/search/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search_list_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/docker_registry_image_search_list_intent_response"
                        }
                    }
                ], 
                "tags": [
                    "docker_registry"
                ], 
                "x-doc-hide": true, 
                "summary": "Searches docker containers for specified registry", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "docker_image", 
                "description": "Searches docker containers for specified registry"
            }
        }, 
        "/entity_sync_rules": {
            "post": {
                "description": "This operation submits a request to create a new entity_sync_rule based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "entity_sync_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new entity_sync_rule", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "entity_sync_rule", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_intent_response"
                        }
                    }
                }
            }
        }, 
        "/entity_sync_rules/list": {
            "post": {
                "description": "This operation gets a list of entity_sync_rules, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "entity_sync_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing entity_sync_rules", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "entity_sync_rule", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }
                }
            }
        }, 
        "/entity_sync_rules/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing entity_sync_rule based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "entity_sync_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing entity_sync_rule", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "entity_sync_rule", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing entity_sync_rule.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "entity_sync_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting entity_sync_rule", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "entity_sync_rule", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing entity_sync_rule.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "entity_sync_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing entity_sync_rule", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "entity_sync_rule", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted"
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }
                }
            }
        }, 
        "/entity_sync_rules/{uuid}/list_entities_to_sync": {
            "get": {
                "description": "Get the list of entities that are affected by this entity sync rule\nwhich needs to be synced to connected Availability Zones.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "entity_sync_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Get the list of entities which needs to be synced.\n", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "entity_sync_rule", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/list_entities_to_sync_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }
                }
            }
        }, 
        "/entity_sync_rules/{uuid}/process": {
            "post": {
                "description": "It will be used whenever user wants to process an entity sync rule\nimmediately, irrespective of sync trigger or schedule. It will override\nentities in case of conflicts.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "entity_sync_rules"
                ], 
                "x-doc-hide": true, 
                "summary": "Process an entity sync rule.", 
                "x-ntnx-operations": [
                    "process"
                ], 
                "x-ntnx-kind": "entity_sync_rule", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/entity_sync_rule_status"
                        }
                    }
                }
            }
        }, 
        "/environments": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/environment_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/environment_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "environments"
                ], 
                "x-doc-hide": true, 
                "summary": "Create Environment", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "environment", 
                "description": "Given a spec creates a Environment with associated metadata\n"
            }
        }, 
        "/environments/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/environment_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/environment_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "environments"
                ], 
                "x-doc-hide": true, 
                "summary": "List the Environment", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "environment", 
                "description": "List the Environment with associated metadata"
            }
        }, 
        "/environments/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/environment_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of environment to be updated"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/environment_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "environments"
                ], 
                "x-doc-hide": true, 
                "summary": "Update Environment", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "environment", 
                "description": "Given a spec and Environment UUID, update Environment\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/environment_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of Environment to get"
                    }
                ], 
                "tags": [
                    "environments"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Environment", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "environment", 
                "description": "Given a UUID, returns a Environment definition"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Request Succeeded", 
                        "schema": {
                            "$ref": "#/definitions/environment_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided", 
                        "schema": {
                            "$ref": "#/definitions/environment_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of the environment to be deleted"
                    }
                ], 
                "tags": [
                    "environments"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete Environment", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "environment", 
                "description": "Delete a Environment given its UUID"
            }
        }, 
        "/events": {
            "post": {
                "summary": "Proxies events request to nusights Db API server.", 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                ], 
                "description": "Input data is validated by REST layer in nusights DB server,this is a\n  passthrough.\n"
            }
        }, 
        "/fanout_proxy": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "query", 
                        "type": "string", 
                        "description": "One of the availability zones name of Xi portal.", 
                        "name": "az_name"
                    }, 
                    {
                        "description": "One of the availability zones uuid of Xi portal.", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "in": "query", 
                        "type": "string", 
                        "name": "az_physical_uuid"
                    }, 
                    {
                        "description": "Cluster uuid of remote PC or PE cluster.", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "in": "query", 
                        "type": "string", 
                        "name": "remote_cluster_uuid"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "HTTP method to call", 
                        "in": "query", 
                        "name": "method"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "URL path to call on remote cluster", 
                        "in": "query", 
                        "name": "url_path"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "description": "content type for the call", 
                        "name": "content_type"
                    }, 
                    {
                        "in": "query", 
                        "type": "string", 
                        "description": "entity kind e.g. vm, network", 
                        "name": "kind"
                    }, 
                    {
                        "description": "The UUID of the entity.", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "in": "query", 
                        "type": "string", 
                        "name": "entity_uuid"
                    }, 
                    {
                        "description": "The UUID of the tenant.", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "in": "query", 
                        "type": "string", 
                        "name": "tenant_uuid"
                    }, 
                    {
                        "in": "query", 
                        "type": "integer", 
                        "description": "Additional timeout in milliseconds for fanout calls.", 
                        "name": "timeout_ms"
                    }, 
                    {
                        "in": "body", 
                        "name": "fanout_proxy_body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                ], 
                "tags": [
                    "remote_connections"
                ], 
                "description": "Proxies request to remote cluster, uses remote connection\nto call endpoint on remote cluster.\n", 
                "x-doc-hide": true, 
                "summary": "Proxies request to remote cluster"
            }
        }, 
        "/file_store": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_response"
                        }
                    }
                }, 
                "description": "File items are binaries and unlike images are not limited by the file type (e.g ISOs, or disk images).", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "file_store"
                ], 
                "x-ntnx-kind": "file_item", 
                "x-doc-hide": true, 
                "summary": "Create a new file_item"
            }
        }, 
        "/file_store/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/file_item_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of file_items, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/file_item_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "file_store"
                ], 
                "x-ntnx-kind": "file_item", 
                "x-doc-hide": true, 
                "summary": "Get a list of existing file_items"
            }
        }, 
        "/file_store/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to update a existing file_item based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "file_store"
                ], 
                "x-ntnx-kind": "file_item", 
                "x-doc-hide": true, 
                "summary": "Update a existing file_item"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing file_item.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "file_store"
                ], 
                "x-ntnx-kind": "file_item", 
                "x-doc-hide": true, 
                "summary": "Get a exiting file_item"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/file_item_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing file_item.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "file_store"
                ], 
                "x-ntnx-kind": "file_item", 
                "x-doc-hide": true, 
                "summary": "Delete a existing file_item"
            }
        }, 
        "/file_store/{uuid}/file": {
            "put": {
                "description": "Upload the binary bits for a file item.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "file_item", 
                        "schema": {
                            "format": "binary"
                        }
                    }
                ], 
                "tags": [
                    "file_store"
                ], 
                "x-doc-hide": true, 
                "summary": "Upload file item contents", 
                "x-ntnx-kind": "file_item", 
                "consumes": [
                    "application/octet-stream"
                ], 
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Download the raw binary bits associated with a file item.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "file_store"
                ], 
                "produces": [
                    "application/octet-stream"
                ], 
                "x-doc-hide": true, 
                "summary": "Get file item contents", 
                "x-ntnx-kind": "file_item", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "type": "string", 
                            "format": "binary"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/file_item_status"
                        }
                    }
                }
            }
        }, 
        "/floating_ips": {
            "post": {
                "description": "This operation submits a request to create a new Floating IP based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "floating_ip"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new Floating IP", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "floating_ip", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_response"
                        }
                    }
                }
            }
        }, 
        "/floating_ips/list": {
            "post": {
                "description": "This operation gets a list of Floating IPs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "floating_ip"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing Floating IPs", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "floating_ip", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }
                }
            }
        }, 
        "/floating_ips/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing Floating IP based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "floating_ip"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing Floating IP", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "floating_ip", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing Floating IP.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "floating_ip"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting Floating IP", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "floating_ip", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing Floating IP.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "floating_ip"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing Floating IP", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "floating_ip", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/floating_ip_status"
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/accounts/{account_uuid}/zone/{zone_name}/instances/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of gcp instance"
                    }, 
                    {
                        "in": "path", 
                        "name": "account_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of account"
                    }, 
                    {
                        "description": "zone name for gcp account", 
                        "required": true, 
                        "type": "string", 
                        "name": "zone_name", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "gcp/instances"
                ], 
                "x-doc-hide": true, 
                "summary": "Get gcp vm", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_instance", 
                "description": "Given a UUID, returns a gcp vm"
            }
        }, 
        "/gcp/v1/disk_types/list": {
            "post": {
                "description": "List all disk types present in a zone. Supported filters are:\n- account_uuid\n- zone\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/disk_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud disk types", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_disk_type", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/firewalls/list": {
            "post": {
                "description": "List all firewalls available for a project. Supported filters are:\n- account_uuid\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/firewalls"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud firewalls", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_firewall", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/images/list": {
            "post": {
                "description": "List all images available for a GCP account. Supported filters are:\n- account_uuid\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/images"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud images", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_image", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/instances/list": {
            "post": {
                "description": "List all VM's present in a zone. Supported filters are:\n- account_uuid\n- zone\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/instances"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud vm instances", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_instance", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/machine_types/list": {
            "post": {
                "description": "List all machine types present in a zone. Supported filters are:\n- account_uuid\n- zone\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/machine_types"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud machine types", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_machine_type", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/networks/list": {
            "post": {
                "description": "List all network interfaces present in a zone. Supported filters are:\n- account_uuid\n- zone\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/networks"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud networks", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_network", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/persistent_disks/list": {
            "post": {
                "description": "List all persistent disks present in a zone. Supported filters are:\n- account_uuid\n- zone\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/persistent_disks"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud persistent disks", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_persistent_disk", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/regions/list": {
            "post": {
                "description": "List all regions present available for a GCP account. Supported filters are:\n- account_uuid\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/regions"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud regions", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_region", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/snapshots/list": {
            "post": {
                "description": "List all snapshots available for a GCP account. Supported filters are:\n- account_uuid\n- zone\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/snapshots"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud snapshots", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_snapshot", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/subnetworks/list": {
            "post": {
                "description": "List all subnetworks available for a GCP account. Supported filters are:\n- account_uuid\n- zone\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/subnetworks"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud subnetworks", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_subnetwork", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/gcp/v1/zones/list": {
            "post": {
                "description": "List all zones available for a GCP account. Supported filters are:\n- account_uuid\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/gcp_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "gcp/zones"
                ], 
                "x-doc-hide": true, 
                "summary": "Get Google cloud zones", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "gcp_zone", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "GCP resources response body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }
            }
        }, 
        "/graphql": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Failed to process requests.", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "200": {
                        "description": "Requests processed successfully.", 
                        "schema": {
                            "$ref": "#/definitions/graphql_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Graphql query to execute.", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/graphql_query"
                        }
                    }
                ], 
                "tags": [
                    "graphql"
                ], 
                "description": "Execute graphql query and return the data.\n", 
                "x-doc-hide": true, 
                "summary": "Execute graphql queries."
            }
        }, 
        "/groups": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/groups_get_entities_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/groups_get_entities_request"
                        }
                    }
                ], 
                "tags": [
                    "groups"
                ], 
                "description": "Get entities from entity db.", 
                "x-doc-hide": true, 
                "summary": "Get Entities."
            }
        }, 
        "/hosts/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/host_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/host_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "hosts"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "This operation gets a list of Hosts, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "x-ntnx-kind": "host", 
                "summary": "Get a list of existing Hosts"
            }
        }, 
        "/hosts/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/host_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Intent Spec of Host.", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/host_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "hosts"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing Host", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "host", 
                "description": "This operation submits a request to update a existing Host based on the input parameters.\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/host_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "hosts"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "This operation gets a existing Host.", 
                "x-ntnx-kind": "host", 
                "summary": "Get a exiting Host"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/host_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "hosts"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing Host", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "host", 
                "description": "This operation submits a request to delete a existing Host."
            }
        }, 
        "/hosts/{uuid}/run_ipmi_cmd": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/host_ipmi_cmd_result"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/host_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "The arguments for the IPMI tool as a single string", 
                        "name": "ipmi_args", 
                        "schema": {
                            "$ref": "#/definitions/host_ipmi_args"
                        }
                    }
                ], 
                "tags": [
                    "ipmi_cmd"
                ], 
                "x-doc-hide": true, 
                "summary": "Run IPMI command on the given host", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "host", 
                "description": "Run IPMI command on the given host"
            }
        }, 
        "/idempotence_identifiers": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": false, 
                        "in": "body", 
                        "description": "An idempotence identifier object.", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_input"
                        }
                    }
                ], 
                "tags": [
                    "idempotence_identifiers"
                ], 
                "description": "This operation submits a request to create an new idempotence_identifier based on the input parameters.\nThe idempotence_identifiers API allows users to generate an idempotent UUID4 with a user-provided identifier. The idempotent UUID(s) can later be passed in POST requests. By default,  Nutanix v3 APIs do not allow for operations to be created with user-provided UUIDs; each POST request received by the API gateway results in a UUID4 being automatically generated and returned in the response JSON.\n", 
                "x-ntnx-kind": "idempotence_identifier", 
                "summary": "Create an new idempotence_identifier \" (UUID4)\""
            }
        }, 
        "/idempotence_identifiers/salted": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/identifier_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/identifier_input"
                        }
                    }
                ], 
                "tags": [
                    "idempotence_identifiers"
                ], 
                "description": "This operation submits a request to create an new idempotence_identifier based on the input parameters.\nThis internal API generates idempotent UUID5(s)for given name or list of names. These are deterministic UUID5, so use caution as this can result in duplicated uuids across environments.\n", 
                "x-ntnx-kind": "idempotence_identifier", 
                "x-doc-hide": true, 
                "summary": "Create an new idempotence_identifier \" (Salted / UUID5)\""
            }
        }, 
        "/idempotence_identifiers/{client_identifier}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_identifier", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "idempotence_identifiers"
                ], 
                "description": "This operation gets an existing idempotence_identifier.", 
                "x-ntnx-kind": "idempotence_identifier", 
                "summary": "Get an exiting idempotence_identifier"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/idempotence_identifiers_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_identifier", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "idempotence_identifiers"
                ], 
                "description": "This operation submits a request to delete an existing idempotence_identifier.", 
                "x-ntnx-kind": "idempotence_identifier", 
                "summary": "Delete an existing idempotence_identifier"
            }
        }, 
        "/identity_providers": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to create a new identity_provider based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "identity_providers"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "identity_provider", 
                "summary": "Create a new identity_provider"
            }
        }, 
        "/identity_providers/callback": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                }, 
                "description": "Assertion consumer service url to which the SAML assertion is posted.\n", 
                "parameters": [
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "saml_response", 
                        "in": "formData"
                    }
                ], 
                "tags": [
                    "identity_providers"
                ], 
                "x-ntnx-kind": "identity_provider", 
                "x-doc-hide": true, 
                "summary": "Endpoint which will be called from the identity provider."
            }
        }, 
        "/identity_providers/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of identity_provider, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "identity_providers"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "identity_provider", 
                "summary": "Get a list of existing identity_provider"
            }
        }, 
        "/identity_providers/redirect_list": {
            "post": {
                "description": "This operation gets a list of identity_provider, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "identity_providers"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing identity_provider", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "identity_provider", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                }
            }
        }, 
        "/identity_providers/sp_metadata": {
            "get": {
                "description": "Endpoint which will give service provider metadata as output\n", 
                "x-ntnx-kind": "identity_provider", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "format": "binary"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                }, 
                "tags": [
                    "identity_providers"
                ], 
                "summary": "Endpoint which will give service provider metadata as output"
            }
        }, 
        "/identity_providers/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to update a existing identity_provider based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "identity_providers"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "identity_provider", 
                "summary": "Update a existing identity_provider"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing identity_provider.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "identity_providers"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "identity_provider", 
                "summary": "Get a exiting identity_provider"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted"
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/identity_provider_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing identity_provider.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "identity_providers"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "identity_provider", 
                "summary": "Delete a existing identity_provider"
            }
        }, 
        "/images": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/image_intent_response"
                        }
                    }
                }, 
                "description": "Images are raw ISO, QCOW2, or VMDK files that are uploaded by a user can be attached to a VM. An ISO image is attached as a virtual CD-ROM drive, and QCOW2 and VMDK files are attached as SCSI disks. An image has to be explicitly added to the self-service catalog before users can create VMs from it.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/image_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Create a new image"
            }
        }, 
        "/images/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/image_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of images, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/image_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Get a list of existing images"
            }
        }, 
        "/images/migrate": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/procedural_error_response"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }
                }, 
                "description": "Submits a request to create a task handling image migration operation, returns a task reference. This moves ownership of images from the PE cluster to PC. Image uuids can be obtained by querying the PE instance to list images on the PE. In the case where image uuid list is provided as empty, all images on the cluster that are not currently migrated to PC will be migrated to PC.\n", 
                "parameters": [
                    {
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/image_migrate_input"
                        }
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-operations": [
                    "migrate"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Migrate images from PE cluster to PC"
            }
        }, 
        "/images/remote_copy": {
            "post": {
                "description": "Submits a request to create a task handling image remote copy operation, returns a task uuid. In the case where image uuid list is provided as empty, all images on the local PC cluster will be copied to remote PC's cluster.\n", 
                "parameters": [
                    {
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/image_remote_copy_input"
                        }
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-doc-hide": true, 
                "summary": "Copy AHV images between on-prem and Xi", 
                "x-ntnx-operations": [
                    "remote_copy"
                ], 
                "x-ntnx-kind": "image", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/procedural_error_response"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }
                }
            }
        }, 
        "/images/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/image_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to update a existing image based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/image_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Update a existing image"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/image_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing image.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Get a exiting image"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/image_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing image.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "image", 
                "summary": "Delete a existing image"
            }
        }, 
        "/images/{uuid}/file": {
            "put": {
                "description": "Upload the binary bits of an image based on the UUID specified. Note that the image must be created first before an upload can be done. Also, once the image has been uploaded the image cannot be changed.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "image", 
                        "schema": {
                            "format": "binary"
                        }
                    }, 
                    {
                        "description": "Checksum type (e.g SHA_1, SHA_256).", 
                        "enum": [
                            "SHA_1", 
                            "SHA_256"
                        ], 
                        "type": "string", 
                        "name": "X-Nutanix-Checksum-Type", 
                        "in": "header"
                    }, 
                    {
                        "description": "Checksum bytes.", 
                        "type": "string", 
                        "name": "X-Nutanix-Checksum-Bytes", 
                        "in": "header"
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "summary": "Upload Image Contents", 
                "x-ntnx-operations": [
                    "update", 
                    "create"
                ], 
                "x-ntnx-kind": "image", 
                "consumes": [
                    "application/octet-stream"
                ], 
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Downloads the image based on the UUID specified.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "images"
                ], 
                "produces": [
                    "application/octet-stream"
                ], 
                "summary": "Get Image Contents", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "image", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "type": "string", 
                            "format": "binary"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/image_status"
                        }
                    }
                }
            }
        }, 
        "/logout": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/logout_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "tags": [
                    "users"
                ], 
                "description": "Logs out the current user.", 
                "x-ntnx-kind": "user", 
                "x-doc-hide": true, 
                "summary": "Logs out the current user"
            }
        }, 
        "/marketplace_items": {
            "post": {
                "description": "This operation submits a request to create a new marketplace item based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "marketplace_item"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new marketplace item", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "marketplace_item", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_response"
                        }
                    }
                }
            }
        }, 
        "/marketplace_items/config": {
            "post": {
                "description": "Enable or disable the Nutanix apps in the marketplace", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_config"
                        }
                    }
                ], 
                "tags": [
                    "marketplace_item"
                ], 
                "x-doc-hide": true, 
                "summary": "Enable or disable the Nutanix apps in the marketplace", 
                "x-ntnx-operations": [
                    "config"
                ], 
                "x-ntnx-kind": "marketplace_item", 
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_config"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }, 
                "description": "Retrieve configuration for whether Nutanix apps have been enabled\nor disabled\n", 
                "tags": [
                    "marketplace_item"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "marketplace_item", 
                "x-doc-hide": true, 
                "summary": "Retrieve configuration for Nutanix apps"
            }
        }, 
        "/marketplace_items/list": {
            "post": {
                "description": "This operation gets a list of marketplace items, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "marketplace_item"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing marketplace items", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "marketplace_item", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            }
        }, 
        "/marketplace_items/render": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_render_output"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_render_input"
                        }
                    }
                ], 
                "tags": [
                    "marketplace_item"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a Marketplace item from the given input.", 
                "x-ntnx-operations": [
                    "render"
                ], 
                "x-ntnx-kind": "marketplace_item", 
                "description": "Helper that translates the given input spec into the equivalent Marketplace item. This is then persisted in the system. NOTE, the result of this operation is the uuid of the created marketplace item.\n"
            }
        }, 
        "/marketplace_items/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing marketplace item based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "marketplace_item"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing marketplace item", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "marketplace_item", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing marketplace item.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "marketplace_item"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting marketplace item", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "marketplace_item", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing marketplace item.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "marketplace_item"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing marketplace item", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "marketplace_item", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/marketplace_item_status"
                        }
                    }
                }
            }
        }, 
        "/metrics/{api}": {
            "post": {
                "summary": "Proxies metrics request to nusights Db API server.", 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The API type for nusights Db API server", 
                        "in": "path", 
                        "maxLength": 64, 
                        "required": true, 
                        "type": "string", 
                        "name": "api"
                    }, 
                    {
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                ], 
                "description": "Input data is validated by REST layer in nusights DB server,this is a\n passthrough.\n"
            }
        }, 
        "/network_devices": {
            "post": {
                "description": "Create a network device instance", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Create network device object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "network_device"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a network device instance", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "network_device", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    }
                }
            }
        }, 
        "/network_devices/list": {
            "post": {
                "description": "Retrieves all network devices", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/network_device_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "network_device"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves all network devices", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "network_device", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_device_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    }
                }
            }
        }, 
        "/network_devices/{uuid}": {
            "put": {
                "description": "Update a network device", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update network device", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "network_device"
                ], 
                "x-doc-hide": true, 
                "summary": "Update network device", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "network_device", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Retrieves specified network device", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "network_device"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves specified network device", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "network_device", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_response"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "Delete specified network device", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "network_device"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete specified network device", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "network_device", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_device_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_device_intent_response"
                        }
                    }
                }
            }
        }, 
        "/network_function_chains": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "network_function_chains"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "description": "Given an intentful spec, creates a network function chain with associated metadata.\n", 
                "x-ntnx-kind": "network_function_chain", 
                "summary": "Create a new Network Function Chain"
            }
        }, 
        "/network_function_chains/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "network_function_chains"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "This operation gets a list of Network Function Chains, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "x-ntnx-kind": "network_function_chain", 
                "summary": "Get a list of existing Network Function Chains"
            }
        }, 
        "/network_function_chains/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "network_function_chains"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "description": "Given an intenful spec and uuid, update network function chain.\n", 
                "x-ntnx-kind": "network_function_chain", 
                "summary": "Update a existing Network Function Chain"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "network_function_chains"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "Given a UUID, returns a network_function_chain definition.", 
                "x-ntnx-kind": "network_function_chain", 
                "summary": "Get a exiting Network Function Chain"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/network_function_chain_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "network_function_chains"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "description": "Delete a network function chain given its uuid.", 
                "x-ntnx-kind": "network_function_chain", 
                "summary": "Delete a existing Network Function Chain"
            }
        }, 
        "/network_security_rules": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "network_security_rules"
                ], 
                "description": "This operation submits a request to create a new Network security rule based on the input parameters.\n", 
                "x-ntnx-kind": "network_security_rule", 
                "summary": "Create a new Network security rule"
            }
        }, 
        "/network_security_rules/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "network_security_rules"
                ], 
                "description": "This operation gets a list of Network security rules, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "x-ntnx-kind": "network_security_rule", 
                "summary": "Get all network security rules"
            }
        }, 
        "/network_security_rules/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "network_security_rules"
                ], 
                "description": "This operation submits a request to update a existing Network security rule based on the input parameters.\n", 
                "x-ntnx-kind": "network_security_rule", 
                "summary": "Update a existing Network security rule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "network_security_rules"
                ], 
                "description": "This operation gets a existing Network security rule.", 
                "x-ntnx-kind": "network_security_rule", 
                "summary": "Get a exiting Network security rule"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/network_security_rule_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "network_security_rules"
                ], 
                "description": "This operation submits a request to delete a existing Network security rule.", 
                "x-ntnx-kind": "network_security_rule", 
                "summary": "Delete a existing Network security rule"
            }
        }, 
        "/ngt_policies": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to create a new ngt_policy based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "ngt_policies"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "ngt_policy", 
                "summary": "Create a new ngt_policy"
            }
        }, 
        "/ngt_policies/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of ngt_policies, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "ngt_policies"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "ngt_policy", 
                "summary": "Get a list of existing ngt_policies"
            }
        }, 
        "/ngt_policies/{uuid}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to update a existing ngt_policy based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "ngt_policies"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "ngt_policy", 
                "summary": "Update a existing ngt_policy"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing ngt_policy.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "ngt_policies"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "ngt_policy", 
                "summary": "Get a exiting ngt_policy"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/ngt_policy_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing ngt_policy.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "ngt_policies"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "ngt_policy", 
                "summary": "Delete a existing ngt_policy"
            }
        }, 
        "/oauth/adfs_login": {
            "get": {
                "description": "Oauth2", 
                "tags": [
                    "oauth"
                ], 
                "x-doc-hide": true, 
                "responses": {
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        }, 
                        "description": "Redirect to ADFS Login Page"
                    }
                }, 
                "summary": "ADFS login url for idp"
            }
        }, 
        "/oauth/authorize": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }, 
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        }, 
                        "description": "authorization grant is provided in callback url callback url\nis in format {redirect_uri}/?code={grant_code}&state={state}\n"
                    }
                }, 
                "description": "Authorization confirmation post url", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Your client ID", 
                        "in": "formData", 
                        "name": "client_id"
                    }, 
                    {
                        "in": "formData", 
                        "type": "string", 
                        "description": "Whitespace-separated list of scopes you application needs", 
                        "name": "scope"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Must be 'code'", 
                        "in": "formData", 
                        "name": "response_type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Must be 'yes' or 'no'", 
                        "in": "formData", 
                        "name": "confirm"
                    }, 
                    {
                        "in": "formData", 
                        "type": "string", 
                        "description": "This URL is used to provide user authorization if the user accepted\naccess to the application or not\n", 
                        "name": "redirect_uri"
                    }, 
                    {
                        "in": "formData", 
                        "type": "string", 
                        "description": "state parameter to prevent cross site origin attacks", 
                        "name": "state"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-doc-hide": true, 
                "consumes": [
                    "application/x-www-form-urlencoded"
                ], 
                "summary": "Used to get authorization code from server"
            }
        }, 
        "/oauth/client": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "description": "Add new Oauth Client", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Oauth client details", 
                        "name": "oauth_client", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_input"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "x-doc-hide": true, 
                "summary": "This is used to register new oauth client"
            }
        }, 
        "/oauth/client/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_list"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "description": "Retrieves all oauth clients", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "x-doc-hide": true, 
                "summary": "Retrieves all oauth client"
            }
        }, 
        "/oauth/client/{client_id}": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }, 
                    "404": {
                        "description": "Client identifier does not exists", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "description": "Update Oauth client information", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_id", 
                        "in": "path"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Oauth client details", 
                        "name": "oauth_client", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_input"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "x-doc-hide": true, 
                "summary": "Used to update existing client details"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }, 
                    "404": {
                        "description": "Client identifier does not exists", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "description": "Get Oauth client information", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "x-doc-hide": true, 
                "summary": "Used to fetch existing oauth client details"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }, 
                    "404": {
                        "description": "Client identifier does not exists", 
                        "schema": {
                            "$ref": "#/definitions/oauth_client_status"
                        }
                    }
                }, 
                "description": "Delete existing Oauth client information", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "client_id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_client", 
                "x-doc-hide": true, 
                "summary": "Delete an existing Oauth client"
            }
        }, 
        "/oauth/generate_token": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_generate_token_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                }, 
                "description": "Generates an oauth token", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "oauth_generate_token_request", 
                        "schema": {
                            "$ref": "#/definitions/oauth_generate_token_request"
                        }
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_token", 
                "x-doc-hide": true, 
                "summary": "This is used when the user is already authenticated and would like to\ncreate bearer tokens for distribution\n"
            }
        }, 
        "/oauth/idp_callback": {
            "get": {
                "responses": {
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        }, 
                        "description": "Redirect to SSP UI."
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "code", 
                        "in": "query"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "name": "state", 
                        "in": "query"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "description": "Oauth2 callback from IDP to intent gateway", 
                "x-doc-hide": true, 
                "summary": "Oauth2 callback from IDP to intent gateway"
            }
        }, 
        "/oauth/idp_login": {
            "get": {
                "description": "Oauth2", 
                "tags": [
                    "oauth"
                ], 
                "x-doc-hide": true, 
                "responses": {
                    "302": {
                        "headers": {
                            "Location": {
                                "type": "string"
                            }
                        }, 
                        "description": "Redirect to IDP Login Page"
                    }
                }, 
                "summary": "Oauth2 login to idp"
            }
        }, 
        "/oauth/revoke_token": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }, 
                    "404": {
                        "description": "Token not found", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                }, 
                "description": "Revokes an oauth token", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "name": "token", 
                        "in": "query"
                    }, 
                    {
                        "name": "token_type_hint", 
                        "in": "query", 
                        "default": "access_token", 
                        "x-ntnx-enum": [
                            "access_token", 
                            "refresh_token"
                        ], 
                        "required": false, 
                        "type": "string"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-ntnx-kind": "oauth_token", 
                "x-doc-hide": true, 
                "summary": "Revoke a token will cause the token to be removed from system\nAny subsequent authorization calls with the token will fail\n"
            }
        }, 
        "/oauth/token": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/provider_oauth_token"
                        }
                    }, 
                    "400": {
                        "description": "Bad Request", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }, 
                    "401": {
                        "description": "Authentication Failure", 
                        "schema": {
                            "$ref": "#/definitions/oauth_status"
                        }
                    }
                }, 
                "description": "Returns an access token", 
                "parameters": [
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Must be authorization_code or refresh_token", 
                        "in": "formData", 
                        "name": "grant_type"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Your client ID", 
                        "in": "formData", 
                        "name": "client_id"
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Your client secret", 
                        "in": "formData", 
                        "name": "client_secret"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "authorization_code received in redirect_uri\nmust for grant_type = authorization_code\n", 
                        "in": "formData", 
                        "name": "code"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "refresh_token received with previous token\nmust for grant_type = refresh_token\n", 
                        "in": "formData", 
                        "name": "refresh_token"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "state parameter to prevent cross site origin attacks\nuse only if passed in getting authorization\n", 
                        "in": "formData", 
                        "name": "state"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "redirect uri used to get authorization\nmust for grant_type = authorization_code\n", 
                        "in": "formData", 
                        "name": "redirect_uri"
                    }
                ], 
                "tags": [
                    "oauth"
                ], 
                "x-doc-hide": true, 
                "consumes": [
                    "application/x-www-form-urlencoded"
                ], 
                "summary": "This callback is used to get token from Oauth2 provider"
            }
        }, 
        "/permissions": {
            "post": {
                "description": "\"Permissions define what a user can do with each type. For example,\nan admin can upload images; a DevOps user can create, edit, or delete\na VM; and an operations user can view a VM console.\"\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/permission_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "permissions"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a permission.", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "permission", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/permission_intent_response"
                        }
                    }
                }
            }
        }, 
        "/permissions/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/permission_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }
                }, 
                "description": "Get permissions.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/permission_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "permissions"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "permission", 
                "summary": "List the permissions."
            }
        }, 
        "/permissions/{uuid}": {
            "put": {
                "description": "Update a permission.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/permission_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "permissions"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a permission.", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "permission", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/permission_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }
                }
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/permission_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }
                }, 
                "description": "Get a permission.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "permissions"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "permission", 
                "summary": "Get a permission."
            }, 
            "delete": {
                "description": "Delete a permission.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "permissions"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a permission.", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "permission", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/permission_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/permission_status"
                        }
                    }
                }
            }
        }, 
        "/portal_services/software/{software_type}/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/software_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/software_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "software_type", 
                        "in": "path", 
                        "x-ntnx-enum": [
                            "NOS", 
                            "PRISM_CENTRAL"
                        ], 
                        "required": true, 
                        "type": "string", 
                        "description": "Software type"
                    }, 
                    {
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/software_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "portal_services"
                ], 
                "description": "Get a list of portal software with specified type", 
                "x-doc-hide": true, 
                "summary": "Get all available software on Nutanix Portal"
            }
        }, 
        "/portal_services/software/{software_type}/{version}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/portal_software"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/software_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "name": "software_type", 
                        "in": "path", 
                        "x-ntnx-enum": [
                            "NOS", 
                            "PRISM_CENTRAL"
                        ], 
                        "required": true, 
                        "type": "string", 
                        "description": "Software type"
                    }, 
                    {
                        "description": "Software version", 
                        "required": true, 
                        "type": "string", 
                        "name": "version", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "portal_services"
                ], 
                "description": "Get the software info with specified type and version", 
                "x-doc-hide": true, 
                "summary": "Get specified software information"
            }
        }, 
        "/portal_services/support_cases": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/support_case_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/support_case_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "portal_services"
                ], 
                "x-doc-hide": true, 
                "summary": "Create support case.", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "support_case", 
                "description": "Given a spec, creates a support case with associated metadata."
            }
        }, 
        "/portal_services/support_cases/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/support_case_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/support_case_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "portal_services"
                ], 
                "x-doc-hide": true, 
                "summary": "List support cases.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "support_case", 
                "description": "List of support cases. Supported filters are - - cluster_reference - serial_number\n"
            }
        }, 
        "/portal_services/support_cases/template/{template_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/support_case_template_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "ID of the screen for which it needs template.", 
                        "required": true, 
                        "type": "string", 
                        "name": "template_id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "portal_services"
                ], 
                "x-doc-hide": true, 
                "summary": "Get screen template from portal.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "support_case", 
                "description": "Given a template ID it fetches that template."
            }
        }, 
        "/portal_services/support_cases/upload": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/support_case_upload_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/support_case_upload_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/support_case_upload_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "portal_services"
                ], 
                "x-doc-hide": true, 
                "summary": "Upload attachements for a specific support case.", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "support_case_upload", 
                "description": "Given an intentful spec, trigger ncc health check and log uploads for a specified support case."
            }
        }, 
        "/portal_services/support_cases/{case_id}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/support_case_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/support_case_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "ID of the support case.", 
                        "required": true, 
                        "type": "string", 
                        "name": "case_id", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "portal_services"
                ], 
                "x-doc-hide": true, 
                "summary": "Get specified support case.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "support_case", 
                "description": "Returns the support case details for a given support case ID."
            }
        }, 
        "/prism_central": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Request succeeded.", 
                        "schema": {
                            "$ref": "#/definitions/prism_central"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error.", 
                        "schema": {
                            "$ref": "#/definitions/prism_central_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID Provided.", 
                        "schema": {
                            "$ref": "#/definitions/prism_central_status"
                        }
                    }
                }, 
                "tags": [
                    "prism_central"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "This operation gets a existing Prism Central.", 
                "x-ntnx-kind": "prism_central", 
                "x-doc-hide": true, 
                "summary": "Get a exiting Prism Central"
            }
        }, 
        "/prism_central/nodes": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/prism_central_nodes_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/prism_central_request_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/prism_central_nodes"
                        }
                    }
                ], 
                "tags": [
                    "prism_central"
                ], 
                "x-doc-hide": true, 
                "summary": "Add a new prism central VM to Prism Central cluster.", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "prism_central", 
                "description": "Given an intentful spec, add a new prism central vm to the cluster .\n"
            }
        }, 
        "/projects": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/project_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to create a new Project based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "The entity to create or modify a project.", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/project_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "projects"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "project", 
                "summary": "Create a new Project"
            }
        }, 
        "/projects/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/project_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of Projects, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/project_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "projects"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "project", 
                "summary": "Get a list of existing Projects"
            }
        }, 
        "/projects/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/project_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to update a existing Project based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "The entity used to create or modify a project.", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/project_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "projects"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "project", 
                "summary": "Update a existing Project"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/project_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing Project.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "projects"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "project", 
                "summary": "Get a exiting Project"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/project_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/project_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing Project.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "projects"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "project", 
                "summary": "Delete a existing Project"
            }
        }, 
        "/projects_internal": {
            "post": {
                "description": "This operation submits a request to create a new Project based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "The entity to create or modify a project.", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "project"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new Project", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "project", 
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_response"
                        }
                    }
                }
            }
        }, 
        "/projects_internal/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing Project based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "The entity used to create or modify a project.", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "project"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing Project", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "project", 
                "responses": {
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_response"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing Project.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "project"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting Project", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "project", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/project_internal_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }
            }
        }, 
        "/protection_rules": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_intent_response"
                        }
                    }
                }, 
                "description": "Create a protection rule", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "protection_rules"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "protection_rule", 
                "summary": "Create a protection rule"
            }
        }, 
        "/protection_rules/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }
                }, 
                "description": "Get protection rules", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "protection_rules"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "protection_rule", 
                "summary": "Get protection rules"
            }
        }, 
        "/protection_rules/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_intent_response"
                        }
                    }
                }, 
                "description": "Modify protection rule", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "protection_rules"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "protection_rule", 
                "summary": "Modify protection rule"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }
                }, 
                "description": "Get details for a protection rule", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "protection_rules"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "protection_rule", 
                "summary": "Get details for a protection rule"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }
                }, 
                "description": "Delete a protection rule", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "protection_rules"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "protection_rule", 
                "summary": "Delete a protection rule"
            }
        }, 
        "/protection_rules/{uuid}/process": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }
                }, 
                "description": "It will be used whenever user wants to process a protection rule\nimmediately. For example if an entity is protected by a protection\nrule, user can call this API to trigger protection rule processing.\nThis API doesn't wait for the processing to be completed. The API\ntriggers the protection rule processing and returns.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "protection_rules"
                ], 
                "x-ntnx-operations": [
                    "process"
                ], 
                "x-ntnx-kind": "protection_rule", 
                "summary": "Process a protection rule"
            }
        }, 
        "/protection_rules/{uuid}/query_entities": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/affected_entity_list"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/protection_rule_status"
                        }
                    }
                }, 
                "description": "Get a list of entities affected by a protection rule based on the\nfilters provided in the protection rule definition.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "protection_rules"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "protection_rule", 
                "summary": "Get a list of entities affected by a protection rule"
            }
        }, 
        "/public_cidrs": {
            "post": {
                "description": "This operation submits a request to create a new public_cidr based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "public_cidrs"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new public_cidr", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "public_cidr", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_response"
                        }
                    }
                }
            }
        }, 
        "/public_cidrs/list": {
            "post": {
                "description": "This operation gets a list of public_cidrs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "public_cidrs"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing public_cidrs", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "public_cidr", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    }
                }
            }
        }, 
        "/public_cidrs/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing public_cidr based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "public_cidrs"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing public_cidr", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "public_cidr", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_response"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing public_cidr.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "public_cidrs"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting public_cidr", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "public_cidr", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing public_cidr.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "public_cidrs"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing public_cidr", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "public_cidr", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_status"
                        }
                    }, 
                    "202": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/public_cidr_intent_response"
                        }
                    }
                }
            }
        }, 
        "/rackable_units/list": {
            "post": {
                "description": "Retrieves all rackable units", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "rackable_unit"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves all rackable units", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "rackable_unit", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_status"
                        }
                    }
                }
            }
        }, 
        "/rackable_units/{uuid}": {
            "put": {
                "description": "Update rackable unit", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update rackable unit", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "rackable_unit"
                ], 
                "x-doc-hide": true, 
                "summary": "Update rackable unit", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "rackable_unit", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_intent_response"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Retrieves specified rackable unit", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "rackable_unit"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves specified rackable unit", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "rackable_unit", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rackable_unit_status"
                        }
                    }
                }
            }
        }, 
        "/racks": {
            "post": {
                "description": "Create a rack instance", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Create rack object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/rack_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "rack"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a rack instance", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "rack", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/rack_intent_response"
                        }
                    }
                }
            }
        }, 
        "/racks/list": {
            "post": {
                "description": "Retrieves all racks", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/rack_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "rack"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves all racks", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "rack", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/rack_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }
                }
            }
        }, 
        "/racks/validate_rack_config": {
            "post": {
                "description": "Check whether given rack configuration in this cluster's context is valid or not. A rack configuration refers to a map of racks to the hosts it contains.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Validate rack configuration", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/validate_rack_config_input"
                        }
                    }
                ], 
                "tags": [
                    "rack"
                ], 
                "x-doc-hide": true, 
                "summary": "Validates Specified Rack Configuration", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "rack", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/validate_rack_config_output"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }
                }
            }
        }, 
        "/racks/{uuid}": {
            "put": {
                "description": "Update rack", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update rack", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/rack_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "rack"
                ], 
                "x-doc-hide": true, 
                "summary": "Update rack", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "rack", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/rack_intent_response"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Retrieves specified rack", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "rack"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves specified rack", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "rack", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/rack_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "Delete specified rack", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "rack"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete specified rack", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "rack", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/rack_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/rack_intent_response"
                        }
                    }
                }
            }
        }, 
        "/recovery_plan_jobs": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_response"
                        }
                    }
                }, 
                "description": "Create a Recovery Plan Job for a Recovery Plan with associated metadata\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "recovery_plan_jobs"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "recovery_plan_job", 
                "summary": "Create Recovery Plan Job"
            }
        }, 
        "/recovery_plan_jobs/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }
                }, 
                "description": "List the Recovery Plan Jobs", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "recovery_plan_jobs"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "recovery_plan_job", 
                "summary": "List the Recovery Plan Jobs"
            }
        }, 
        "/recovery_plan_jobs/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }
                }, 
                "description": "Given a UUID, returns a Recovery Plan Job state", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "recovery_plan_jobs"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "recovery_plan_job", 
                "summary": "Get Recovery Plan Job"
            }, 
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }
                }, 
                "description": "Delete a Recovery Plan Job given its UUID", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "recovery_plan_jobs"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "recovery_plan_job", 
                "summary": "Delete Recovery Plan Job"
            }
        }, 
        "/recovery_plan_jobs/{uuid}/{action}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }
                }, 
                "description": "Perform an action on Recovery Plan Job", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "name": "action", 
                        "in": "path", 
                        "x-ntnx-enum": [
                            "cleanup"
                        ], 
                        "required": true, 
                        "type": "string", 
                        "description": "Action to be performed on the Recovery Plan Job"
                    }, 
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "type": "object"
                        }
                    }
                ], 
                "tags": [
                    "recovery_plan_jobs"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "recovery_plan_job", 
                "summary": "Perform an action on Recovery Plan Job"
            }
        }, 
        "/recovery_plan_jobs/{uuid}/{status}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_execution_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_job_status"
                        }
                    }
                }, 
                "description": "Get the execution status of the Recovery Plan Job", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "name": "status", 
                        "in": "path", 
                        "x-ntnx-enum": [
                            "execution_status", 
                            "cleanup_status"
                        ], 
                        "required": true, 
                        "type": "string", 
                        "description": "Type of the Recovery Plan Job status"
                    }
                ], 
                "tags": [
                    "recovery_plan_jobs"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "recovery_plan_job", 
                "summary": "Get the execution status of the Recovery Plan Job"
            }
        }, 
        "/recovery_plans": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_intent_response"
                        }
                    }
                }, 
                "description": "Given a spec creates a Recovery Plan with associated metadata\n", 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "recovery_plans"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "recovery_plan", 
                "summary": "Create Recovery Plan"
            }
        }, 
        "/recovery_plans/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }
                }, 
                "description": "List the Recovery Plans with associated metadata", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "recovery_plans"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "recovery_plan", 
                "summary": "List the Recovery Plans"
            }
        }, 
        "/recovery_plans/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }
                }, 
                "description": "Given a spec and Recovery Plan UUID, update Recovery Plan\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "recovery_plans"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "recovery_plan", 
                "summary": "Update Recovery Plan"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }
                }, 
                "description": "Given a UUID, returns a Recovery Plan definition", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "recovery_plans"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "recovery_plan", 
                "summary": "Get Recovery Plan"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }
                }, 
                "description": "Delete a Recovery Plan given its UUID", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "recovery_plans"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "recovery_plan", 
                "summary": "Delete Recovery Plan"
            }
        }, 
        "/recovery_plans/{uuid}/entities": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_entities"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/recovery_plan_status"
                        }
                    }
                }, 
                "description": "Entities associated with the Recovery Plan. It includes the live entities and the entities for which Recovery Points are present on the local Availability Zones/Public Cloud.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "recovery_plans"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "recovery_plan", 
                "summary": "Get entities associated with the Recovery Plan"
            }
        }, 
        "/remote_connections": {
            "post": {
                "description": "Creates a remote connection", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Remote connection details", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "remote_connections"
                ], 
                "x-doc-hide": true, 
                "summary": "Creates a remote connection", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "remote_connection", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_response"
                        }
                    }
                }
            }
        }, 
        "/remote_connections/list": {
            "post": {
                "description": "Retrieve list of remote connections", 
                "parameters": [
                    {
                        "required": false, 
                        "in": "body", 
                        "description": "A remote connection object", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "remote_connections"
                ], 
                "x-doc-hide": true, 
                "summary": "Get list of remote connections", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "remote_connection", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                }
            }
        }, 
        "/remote_connections/{uuid}": {
            "put": {
                "description": "Update remote connection", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "body", 
                        "description": "Remote connection details", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "remote_connections"
                ], 
                "x-doc-hide": true, 
                "summary": "Used to update remote connection details", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "remote_connection", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Get remote connection", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "remote_connections"
                ], 
                "x-doc-hide": true, 
                "summary": "Used to fetch remote connection details", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "remote_connection", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "Delete existing remote connection and its information", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "remote_connections"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete an existing remote connection", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "remote_connection", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/remote_connection_status"
                        }
                    }
                }
            }
        }, 
        "/remote_rpc_request": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "description": "Execute Remote RPC", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "RPC payload.", 
                        "name": "payload", 
                        "schema": {
                            "$ref": "#/definitions/remote_rpc_request_input"
                        }
                    }, 
                    {
                        "required": true, 
                        "type": "string", 
                        "description": "Name of the service whose RPC needs to be invoked.", 
                        "in": "query", 
                        "name": "service_name"
                    }, 
                    {
                        "required": true, 
                        "type": "integer", 
                        "description": "Port at which the service is running", 
                        "in": "query", 
                        "name": "port"
                    }, 
                    {
                        "required": false, 
                        "type": "integer", 
                        "description": "timeout in milliseconds.", 
                        "in": "query", 
                        "name": "timeout_ms"
                    }, 
                    {
                        "required": false, 
                        "type": "string", 
                        "description": "base url for rpc call.", 
                        "in": "query", 
                        "name": "base_url"
                    }
                ], 
                "tags": [
                    "remote_connections"
                ], 
                "x-doc-hide": true, 
                "consumes": [
                    "application/octet-stream"
                ], 
                "summary": "Execute Remote RPC"
            }
        }, 
        "/report_configs": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "description": "Given an intentful spec, creates a report config with specified attributes.", 
                "x-ntnx-kind": "report_config", 
                "summary": "Create report config."
            }
        }, 
        "/report_configs/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/report_config_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/report_config_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "List the report configs with associated metadata.", 
                "x-ntnx-kind": "report_config", 
                "summary": "List the report configs."
            }
        }, 
        "/report_configs/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "description": "Given an intenful spec and report config uuid, update report config.", 
                "x-ntnx-kind": "report_config", 
                "summary": "Update report config."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "Given a UUID, returns a report config.", 
                "x-ntnx-kind": "report_config", 
                "summary": "Get report config information."
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_config_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/report_config_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "description": "Delete a report config given its uuid.", 
                "x-ntnx-kind": "report_config", 
                "summary": "Delete report config."
            }
        }, 
        "/report_instances": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "input_body", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "description": "This will generate the report for a specified report config uuid.", 
                "x-ntnx-kind": "report_instance", 
                "summary": "Create a report instance."
            }
        }, 
        "/report_instances/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "Get the list of all the generated report instances.", 
                "x-ntnx-kind": "report_instance", 
                "summary": "Get the list of all the Generated report instances."
            }
        }, 
        "/report_instances/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "Get the specified report instance.", 
                "x-ntnx-kind": "report_instance", 
                "summary": "Get the specified report instance."
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "description": "Delete the generated report instance.", 
                "x-ntnx-kind": "report_instance", 
                "summary": "Delete the generated report instance."
            }
        }, 
        "/reports/download/{type}/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "format": "binary"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }, 
                    "404": {
                        "description": "Invalid UUID provided"
                    }
                }, 
                "parameters": [
                    {
                        "name": "type", 
                        "in": "path", 
                        "pattern": "(\\breport_instance\\b|\\breport_instance_pdf\\b|\\breport_instance_csv\\b|\\blogo\\b)", 
                        "required": true, 
                        "type": "string", 
                        "description": "Type of resource to be downloaded. Supported types are.\n  - report_instance\n  - report_instance_pdf\n  - report_instance_csv\n  - logo\n"
                    }, 
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "produces": [
                    "application/pdf", 
                    "application/zip", 
                    "image/png", 
                    "image/jpeg"
                ], 
                "tags": [
                    "reports"
                ], 
                "summary": "Download a resource.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "report_instance", 
                "description": "Download a resource."
            }
        }, 
        "/reports/notify": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/report_instance_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "request_body", 
                        "schema": {
                            "$ref": "#/definitions/report_notification_spec"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "x-ntnx-operations": [
                    "notify"
                ], 
                "description": "Email the specified generated reports to specified recipients.", 
                "x-ntnx-kind": "report_instance", 
                "summary": "Email the specified generated reports to specified recipients."
            }
        }, 
        "/reports/upload/{type}": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/resource_upload_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error"
                    }
                }, 
                "parameters": [
                    {
                        "name": "type", 
                        "in": "path", 
                        "pattern": "(\\breport_instance\\b|\\breport_instance_pdf\\b|\\breport_instance_csv\\b|\\blogo\\b)", 
                        "required": true, 
                        "type": "string", 
                        "description": "Type of the file to be uploaded. Supported types are\n  - logo\n"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "file", 
                        "schema": {
                            "format": "binary"
                        }
                    }
                ], 
                "tags": [
                    "reports"
                ], 
                "summary": "Upload a file.", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "common_report_config", 
                "consumes": [
                    "application/pdf", 
                    "image/png", 
                    "image/jpeg"
                ], 
                "description": "This uploads a file and returns the UUID for the same."
            }
        }, 
        "/roles": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/role_intent_response"
                        }
                    }
                }, 
                "description": "\"A role is a collection of permissions defined for one or more kinds.\nA kind represents the type of an entity (such as VM). Roles are\ndefined by users who have permission to create roles and assign roles\nto projects. All users in a project inherit the role.\"\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/role_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "roles"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "Create a role."
            }
        }, 
        "/roles/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/role_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }
                }, 
                "description": "Get roles.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/role_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "roles"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "List the roles."
            }
        }, 
        "/roles/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/role_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }
                }, 
                "description": "Update a role.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/role_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "roles"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "Update a role."
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/role_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }
                }, 
                "description": "Get a role.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "roles"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "Get a role."
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/role_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/role_status"
                        }
                    }
                }, 
                "description": "Delete a role.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "roles"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "role", 
                "summary": "Delete a role."
            }
        }, 
        "/search": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/query_result"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "search_request", 
                        "schema": {
                            "$ref": "#/definitions/search_request"
                        }
                    }
                ], 
                "tags": [
                    "search"
                ], 
                "description": "Parse user query and give the structured search response\naccording to user query\n", 
                "x-doc-hide": true, 
                "summary": "Search Information on cluster"
            }
        }, 
        "/search/favorites": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/favorite"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "favorite", 
                        "schema": {
                            "$ref": "#/definitions/favorite"
                        }
                    }
                ], 
                "tags": [
                    "favorites"
                ], 
                "description": "Add a search query as user favorite.\n", 
                "x-doc-hide": true, 
                "summary": "Create a favorite"
            }, 
            "get": {
                "description": "Get all favorites for current logged in user.\n", 
                "tags": [
                    "favorites"
                ], 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/favorite_get_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "summary": "Get all favorites."
            }
        }, 
        "/search/favorites/{uuid}": {
            "delete": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "favorites"
                ], 
                "description": "Delete a favorite.", 
                "x-doc-hide": true, 
                "summary": "Delete a favorite."
            }
        }, 
        "/services/disaster_recovery": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/service_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/disaster_recovery_service_config_input"
                        }
                    }
                ], 
                "tags": [
                    "services"
                ], 
                "description": "Manage Disaster Recovery service.", 
                "x-doc-hide": true, 
                "summary": "Manage Disaster Recovery service."
            }
        }, 
        "/services/flow": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/flow_service_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/flow_service_config_input"
                        }
                    }
                ], 
                "tags": [
                    "services"
                ], 
                "description": "Manage Flow.", 
                "x-doc-hide": true, 
                "summary": "Manage Flow."
            }
        }, 
        "/services/microseg": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/service_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/microseg_service_config_input"
                        }
                    }
                ], 
                "tags": [
                    "services"
                ], 
                "description": "Manage Microsegmentation.", 
                "x-doc-hide": true, 
                "summary": "Manage Microsegmentation."
            }
        }, 
        "/services/nucalm": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/service_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/nucalm_service_config_input"
                        }
                    }
                ], 
                "tags": [
                    "services"
                ], 
                "description": "Manage NuCalm service.", 
                "x-doc-hide": true, 
                "summary": "Manage NuCalm service."
            }
        }, 
        "/services/oss": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/service_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/oss_service_config_input"
                        }
                    }
                ], 
                "tags": [
                    "services"
                ], 
                "description": "Manage Bucket Service Manager service.", 
                "x-doc-hide": true, 
                "summary": "Manage Bucket Service Manager service."
            }
        }, 
        "/services/xfit": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/service_config_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/xfit_service_input"
                        }
                    }
                ], 
                "tags": [
                    "services"
                ], 
                "description": "Manage xfit service, including enabling the service.", 
                "x-doc-hide": true, 
                "summary": "Manage xfit service."
            }
        }, 
        "/services/{service_name}/cluster_capability": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/cluster_capability_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The service name.", 
                        "in": "path", 
                        "maxLength": 64, 
                        "required": true, 
                        "type": "string", 
                        "name": "service_name"
                    }
                ], 
                "tags": [
                    "services"
                ], 
                "description": "Cluster feature capability status.", 
                "x-doc-hide": true, 
                "summary": "Cluster feature status."
            }
        }, 
        "/services/{service_name}/status": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/service_enablement_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "The service name.", 
                        "in": "path", 
                        "maxLength": 64, 
                        "required": true, 
                        "type": "string", 
                        "name": "service_name"
                    }, 
                    {
                        "in": "query", 
                        "type": "boolean", 
                        "description": "Whether or not to include the capabilities of this service in the response. Capabilities for service include if it can be enabled/disabled or not.\n", 
                        "name": "include_capabilities"
                    }
                ], 
                "tags": [
                    "services"
                ], 
                "description": "Service status.", 
                "x-doc-hide": true, 
                "summary": "Service status."
            }
        }, 
        "/ssh_user": {
            "post": {
                "description": "Add SSH User to the entity", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Create SSH User object", 
                        "name": "ssh_user_intent", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "ssh_user"
                ], 
                "x-doc-hide": true, 
                "summary": "Add SSH User to the entity", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "ssh_user", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_response"
                        }
                    }
                }
            }
        }, 
        "/ssh_user/list": {
            "post": {
                "description": "Retrieves all SSH Users on the cluster", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "ssh_user"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves all SSH Users on the cluster", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "ssh_user", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_list"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    }
                }
            }
        }, 
        "/ssh_user/{uuid}": {
            "put": {
                "description": "Update SSH User entity", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update SSH User", 
                        "name": "ssh_user_intent", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "ssh_user"
                ], 
                "x-doc-hide": true, 
                "summary": "Update SSH User entity", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "ssh_user", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_response"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Retrieves specified SSH User", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "ssh_user"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves specified SSH User", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "ssh_user", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_details"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "Unregister specified SSH User", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "ssh_user"
                ], 
                "x-doc-hide": true, 
                "summary": "Unregister specified SSH User", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "ssh_user", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/ssh_user_intent_response"
                        }
                    }
                }
            }
        }, 
        "/streaming_policies": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_response"
                        }
                    }
                }, 
                "description": "Create Streaming Policy", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Create Streaming Policy object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "streaming_policy"
                ], 
                "x-ntnx-kind": "streaming_policy", 
                "x-doc-hide": true, 
                "summary": "Create Streaming Policy"
            }
        }, 
        "/streaming_policies/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    }
                }, 
                "description": "Retrieves all Streaming Policies", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "streaming_policy"
                ], 
                "x-ntnx-kind": "streaming_policy", 
                "x-doc-hide": true, 
                "summary": "Retrieves all Streaming Policies"
            }
        }, 
        "/streaming_policies/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_response"
                        }
                    }
                }, 
                "description": "Update Streaming Policy entity", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update Streaming Policy", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "streaming_policy"
                ], 
                "x-ntnx-kind": "streaming_policy", 
                "x-doc-hide": true, 
                "summary": "Update Streaming Policy entity"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    }
                }, 
                "description": "Retrieves specified Streaming Policy", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "streaming_policy"
                ], 
                "x-ntnx-kind": "streaming_policy", 
                "x-doc-hide": true, 
                "summary": "Retrieves specified Streaming Policy"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/streaming_policy_intent_response"
                        }
                    }
                }, 
                "description": "Delete specified Streaming Policy", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "streaming_policy"
                ], 
                "x-ntnx-kind": "streaming_policy", 
                "x-doc-hide": true, 
                "summary": "Delete specified Streaming Policy"
            }
        }, 
        "/subnets": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to create a new subnet based on the input parameters.\nA subnet is a block of IP addresses.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "subnets"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "subnet", 
                "summary": "Create a new subnet"
            }
        }, 
        "/subnets/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/subnet_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of subnets, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/subnet_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "subnets"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "subnet", 
                "summary": "Get a list of existing subnets"
            }
        }, 
        "/subnets/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to update a existing subnet based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "subnets"
                ], 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "subnet", 
                "summary": "Update a existing subnet"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing subnet.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "subnets"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "subnet", 
                "summary": "Get a exiting subnet"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/subnet_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/subnet_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing subnet.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "subnets"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "subnet", 
                "summary": "Delete a existing subnet"
            }
        }, 
        "/tasks/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/task_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/task_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of Tasks, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": false, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/task_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "tasks"
                ], 
                "x-ntnx-kind": "task", 
                "x-doc-hide": true, 
                "summary": "Get a list of existing Tasks"
            }
        }, 
        "/tasks/poll": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/task_poll_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/task_status"
                        }
                    }
                }, 
                "description": "Poll for completion of tasks", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/task_poll_input"
                        }
                    }
                ], 
                "tags": [
                    "tasks"
                ], 
                "x-ntnx-kind": "task", 
                "x-doc-hide": true, 
                "summary": "Poll for completion of tasks"
            }
        }, 
        "/tasks/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/task"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/task_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/task_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "tasks"
                ], 
                "description": "This operation gets a existing Task.", 
                "x-ntnx-kind": "task", 
                "summary": "Get a exiting Task"
            }
        }, 
        "/tenant_clusters/account/terminate": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Server Error"
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }
                }, 
                "description": "Terminate a tenant account by stopping the tenant user vms in the cloud and unpairing from the trusted onprem cloud. This request is supported only on XI Prism Central.\n", 
                "tags": [
                    "tenants"
                ], 
                "x-ntnx-operations": [
                    "terminate"
                ], 
                "x-ntnx-kind": "tenant", 
                "x-doc-hide": true, 
                "summary": "Terminate a tenant account"
            }
        }, 
        "/tenant_clusters/config/tenants": {
            "post": {
                "description": "This operation submits a request to create a new Tenant based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/tenant"
                        }
                    }
                ], 
                "tags": [
                    "tenants"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new Tenant", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "tenant", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/tenant_status"
                        }
                    }, 
                    "201": {
                        "description": "Created", 
                        "schema": {
                            "$ref": "#/definitions/tenant_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/tenant_status"
                        }
                    }
                }
            }
        }, 
        "/tenant_clusters/physical_availability_zone": {
            "post": {
                "description": "Configure a Physical Availability zone.", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Physical Availability Zone Configuration details.", 
                        "name": "physical_availability_zone", 
                        "schema": {
                            "$ref": "#/definitions/physical_availability_zone"
                        }
                    }
                ], 
                "tags": [
                    "physical_availability_zone"
                ], 
                "x-doc-hide": true, 
                "summary": "Configure a Physical Availability zone.", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "physical_availability_zone", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/physical_availability_zone_status"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/physical_availability_zone_status"
                        }
                    }
                }
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Request succeeded.", 
                        "schema": {
                            "$ref": "#/definitions/physical_availability_zone"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error.", 
                        "schema": {
                            "$ref": "#/definitions/physical_availability_zone_status"
                        }
                    }
                }, 
                "tags": [
                    "physical_availability_zone"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "Physical Availability zone configuration.", 
                "x-ntnx-kind": "physical_availability_zone", 
                "x-doc-hide": true, 
                "summary": "Physical Availability zone configuration."
            }
        }, 
        "/tenant_clusters/physical_availability_zone/keys": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/key_set_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/physical_availability_zone_status"
                        }
                    }
                }, 
                "description": "JSON Web Key Set (JWKS) that contains public keys. The keys can be used to verify the signatures of tokens issued by the PC, My.Nutanix (IDP), IAM and Okta.\n", 
                "tags": [
                    "physical_availability_zone"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "physical_availability_zone", 
                "x-doc-hide": true, 
                "summary": "Get Physical Availability Zone's JWKS"
            }
        }, 
        "/underlay_subnets": {
            "post": {
                "description": "Create a underlay subnet instance", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Create underlay subnet object", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "underlay_subnet"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a underlay subnet instance", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "underlay_subnet", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    }
                }
            }
        }, 
        "/underlay_subnets/list": {
            "post": {
                "description": "Retrieves all underlay subnets", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "underlay_subnet"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves all underlay subnets", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "underlay_subnet", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    }
                }
            }
        }, 
        "/underlay_subnets/{uuid}": {
            "put": {
                "description": "Update underlay subnet", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "description": "Update underlay subnet", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "underlay_subnet"
                ], 
                "x-doc-hide": true, 
                "summary": "Update underlay subnet", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "underlay_subnet", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "Retrieves specified underlay subnet", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "underlay_subnet"
                ], 
                "x-doc-hide": true, 
                "summary": "Retrieves specified underlay subnet", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "underlay_subnet", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_response"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "Delete specified underlay subnet", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "underlay_subnet"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete specified underlay subnet", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "underlay_subnet", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_status"
                        }
                    }, 
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/underlay_subnet_intent_response"
                        }
                    }
                }
            }
        }, 
        "/user_groups": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_response"
                        }
                    }
                }, 
                "description": "Add a User group to the system.", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "user_groups"
                ], 
                "x-ntnx-operations": [
                    "add"
                ], 
                "x-ntnx-kind": "user_group", 
                "summary": "Add a User group."
            }
        }, 
        "/user_groups/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/user_group_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of User Groups, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/user_group_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "user_groups"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "user_group", 
                "summary": "Get a list of existing User Groups"
            }
        }, 
        "/user_groups/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing User Group based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "user_groups"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing User Group", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "user_group", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }
                }
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }
                }, 
                "description": "A user group is a grouping of users either defined locally or in a Directory service.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "user_groups"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "user_group", 
                "summary": "Get a exiting User Group"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/user_group_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/user_group_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing User Group.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "user_groups"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "user_group", 
                "summary": "Delete a existing User Group"
            }
        }, 
        "/users": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    }
                }, 
                "description": "This operation submits a request to create a new User based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/user_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "users"
                ], 
                "x-ntnx-operations": [
                    "add"
                ], 
                "x-ntnx-kind": "user", 
                "summary": "Create a new User"
            }
        }, 
        "/users/info": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/user_info"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }, 
                "tags": [
                    "users"
                ], 
                "description": "Gets the Access Control Policies attached to a user,\nalongwith other user-specific information.\n", 
                "x-ntnx-kind": "user", 
                "x-doc-hide": true, 
                "summary": "Retrieves the Access control policies and other user data\nfor logged in user.\n"
            }
        }, 
        "/users/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/user_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }, 
                "description": "This operation gets a list of Users, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/user_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "users"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "user", 
                "summary": "Get a list of existing Users"
            }
        }, 
        "/users/me": {
            "get": {
                "x-ntnx-kind": "user", 
                "summary": "Retrieves currently logged in user.", 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }, 
                "tags": [
                    "users"
                ], 
                "description": "Displays the user currently logged in."
            }
        }, 
        "/users/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing User based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/user_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "users"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing User", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "user", 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }, 
                "description": "This operation gets a existing User.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "users"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "user", 
                "summary": "Get a exiting User"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/user_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/user_status"
                        }
                    }
                }, 
                "description": "This operation submits a request to delete a existing User.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "users"
                ], 
                "x-ntnx-operations": [
                    "remove"
                ], 
                "x-ntnx-kind": "user", 
                "summary": "Delete a existing User"
            }
        }, 
        "/users/{uuid}/project_usage_summary": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/user_usage_in_projects"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/resource_domain_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/resource_domain_status"
                        }
                    }
                }, 
                "description": "Retrieves specified user resource domain information.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "users"
                ], 
                "x-ntnx-operations": [
                    "view_project_usage_summary"
                ], 
                "x-ntnx-kind": "user", 
                "summary": "Retrieves specified user resource domain information."
            }
        }, 
        "/versions": {
            "get": {
                "description": "A version is the major and minor number of the API.", 
                "tags": [
                    "versions"
                ], 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/versions"
                        }
                    }
                }, 
                "summary": "Get details on the api version"
            }
        }, 
        "/virtual_networks": {
            "post": {
                "description": "This operation submits a request to create a new virtual network based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "virtual_network"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new virtual network", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "virtual_network", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_response"
                        }
                    }
                }
            }
        }, 
        "/virtual_networks/list": {
            "post": {
                "description": "This operation gets a list of virtual networks, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "virtual_network"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing virtual networks", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "virtual_network", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }
                }
            }
        }, 
        "/virtual_networks/routing_policies": {
            "post": {
                "description": "This operation submits a request to create a new routing_policy based on the input parameters.\nA routing policy that defines traffic behavior.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "routing_policies"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new routing_policy", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "routing_policy", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_intent_response"
                        }
                    }
                }
            }
        }, 
        "/virtual_networks/routing_policies/list": {
            "post": {
                "description": "This operation gets a list of routing_policies, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "routing_policies"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing routing_policies", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "routing_policy", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }
                }
            }
        }, 
        "/virtual_networks/routing_policies/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing routing_policy based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "routing_policies"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing routing_policy", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "routing_policy", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing routing_policy.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "routing_policies"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting routing_policy", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "routing_policy", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing routing_policy.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "routing_policies"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing routing_policy", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "routing_policy", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }
                }
            }
        }, 
        "/virtual_networks/routing_policies/{uuid}/reset_counters": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }
                }, 
                "description": "This operation clears the counter values for a particular routing policy.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "routing_policies"
                ], 
                "x-ntnx-operations": [
                    "clear_counters"
                ], 
                "x-ntnx-kind": "routing_policy", 
                "summary": "Clear routing policy counters."
            }
        }, 
        "/virtual_networks/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing virtual network based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "virtual_network"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing virtual network", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "virtual_network", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing virtual network.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "virtual_network"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting virtual network", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "virtual_network", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing virtual network.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "virtual_network"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing virtual network", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "virtual_network", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/virtual_network_status"
                        }
                    }
                }
            }
        }, 
        "/virtual_networks/{uuid}/routing_policies/reset_counters": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/routing_policy_status"
                        }
                    }
                }, 
                "description": "This operation clears the counter values for all routing policies in the virtual network.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "routing_policies"
                ], 
                "x-ntnx-operations": [
                    "clear_counters"
                ], 
                "x-ntnx-kind": "routing_policy", 
                "summary": "Clear all routing policy counters."
            }
        }, 
        "/vm_recovery_points": {
            "post": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.create"
                ], 
                "description": "This operation submits a request to create a new vm recovery point based on the input parameters.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vm_recovery_points"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new vm recovery point", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "vm_recovery_point", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_response"
                        }
                    }
                }
            }
        }, 
        "/vm_recovery_points/list": {
            "post": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.view"
                ], 
                "description": "This operation gets a list of vm recovery point, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vm_recovery_points"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing vm recovery point", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vm_recovery_point", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                }
            }
        }, 
        "/vm_recovery_points/{uuid}": {
            "put": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.update"
                ], 
                "description": "This operation submits a request to update a existing vm recovery point based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vm_recovery_points"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing vm recovery point", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "vm_recovery_point", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                }
            }, 
            "get": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.view"
                ], 
                "description": "This operation gets a existing vm recovery point.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vm_recovery_points"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting vm recovery point", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vm_recovery_point", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                }
            }, 
            "delete": {
                "x-ntnx-permissions": [
                    "vm_recovery_point.delete"
                ], 
                "description": "This operation submits a request to delete a existing vm recovery point.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vm_recovery_points"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing vm recovery point", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "vm_recovery_point", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                }
            }
        }, 
        "/vm_recovery_points/{uuid}/clone": {
            "post": {
                "description": "Submits a request to create a task handling vm_recovery_point clone operation, returns a task reference. This replicates the vm_recovery_point to target availability zone.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_points_clone_input"
                        }
                    }
                ], 
                "tags": [
                    "vm_recovery_points"
                ], 
                "x-doc-hide": true, 
                "summary": "Clone a vm_recovery_point.", 
                "x-ntnx-operations": [
                    "clone"
                ], 
                "x-ntnx-kind": "vm_recovery_point", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                }
            }
        }, 
        "/vm_recovery_points/{uuid}/restore": {
            "post": {
                "description": "Submits a request to create a task handling the restore of vm recovery point, returns the task reference. This operation is used to create a vm out of the vm recovery point. Follow the task to get the reference of the created vm.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_restore_input"
                        }
                    }
                ], 
                "tags": [
                    "vm_recovery_points"
                ], 
                "x-doc-hide": true, 
                "summary": "Restore a vm recovery point.", 
                "x-ntnx-operations": [
                    "restore"
                ], 
                "x-ntnx-kind": "vm_recovery_point", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                }
            }
        }, 
        "/vm_recovery_points/{uuid}/validate_restore": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_validate_restore_output"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_recovery_point_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vm_recovery_points"
                ], 
                "x-doc-hide": true, 
                "summary": "Validates the feasibility of vm restoration from the\nvm recovery point.\n", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vm_recovery_point", 
                "description": "Validates the feasibility of vm restoration from the\nvm recovery point, if not feasible return the reason behind it.\n"
            }
        }, 
        "/vm_snapshots": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "x-doc-hide": true, 
                "summary": "Create VM snapshot", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "vm_snapshot", 
                "description": "Given an intentful spec, creates a snapshot with associated metadata\n"
            }
        }, 
        "/vm_snapshots/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "x-doc-hide": true, 
                "summary": "Get VM snapshots", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vm_snapshot", 
                "description": "Get VM snapshots. Here is a list of supported filters\n- entity_uuid==UUID of the virtual machine\n"
            }
        }, 
        "/vm_snapshots/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "x-doc-hide": true, 
                "summary": "Update VM snapshot", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "vm_snapshot", 
                "description": "Given an intenful spec and snapshot UUID, update VM snapshot\n"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "x-doc-hide": true, 
                "summary": "Get VM snapshot", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vm_snapshot", 
                "description": "Given a UUID, returns a VM snapshot definition"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vm_snapshot"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete VM snapshot", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "vm_snapshot", 
                "description": "Delete a VM snapshot given its UUID"
            }
        }, 
        "/vms": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vms"
                ], 
                "x-ntnx-operations": [
                    "create"
                ], 
                "description": "This operation submits a request to create a new VM based on the input parameters.\n", 
                "x-ntnx-kind": "vm", 
                "summary": "Create a new VM"
            }
        }, 
        "/vms/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vm_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vms"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "This operation gets a list of VMs, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "x-ntnx-kind": "vm", 
                "summary": "Get a list of existing VMs"
            }
        }, 
        "/vms/{uuid}": {
            "put": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vms"
                ], 
                "x-ntnx-operations": [
                    "update", 
                    "update_power_state"
                ], 
                "description": "This operation submits a request to update a existing VM based on the input parameters.\n", 
                "x-ntnx-kind": "vm", 
                "summary": "Update a existing VM"
            }, 
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vms"
                ], 
                "x-ntnx-operations": [
                    "view"
                ], 
                "description": "This operation gets a existing VM.", 
                "x-ntnx-kind": "vm", 
                "summary": "Get a exiting VM"
            }, 
            "delete": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vm_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vms"
                ], 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "description": "This operation submits a request to delete a existing VM.", 
                "x-ntnx-kind": "vm", 
                "summary": "Delete a existing VM"
            }
        }, 
        "/vms/{uuid}/clone": {
            "post": {
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_clone_input"
                        }
                    }
                ], 
                "tags": [
                    "vms"
                ], 
                "x-ntnx-operations": [
                    "clone"
                ], 
                "description": "Submits a request to create a task handling vm clone operation, returns a task reference. This creates a new vm by cloning the current vm.\n", 
                "x-ntnx-kind": "vm", 
                "summary": "Clone a vm."
            }
        }, 
        "/vms/{uuid}/snapshot": {
            "post": {
                "description": "Submits a request to create a task handling the snapshot operation on the vm, returns a task reference. This creates a point in time recovery point.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_snapshot_input"
                        }
                    }
                ], 
                "tags": [
                    "vms"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a vm recovery point.", 
                "x-ntnx-operations": [
                    "snapshot"
                ], 
                "x-ntnx-kind": "vm", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/procedural_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }
            }
        }, 
        "/vms/{uuid}/validate_migration": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vm_validate_migration_output"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vm_status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vm_validate_migration_input"
                        }
                    }
                ], 
                "tags": [
                    "vms"
                ], 
                "x-doc-hide": true, 
                "summary": "Validates the feasibility of VM migration to given migration target.\n", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vm", 
                "description": "Validates the feasibility of VM migration to given migration target,\nif not feasible returns the reason behind it.\n"
            }
        }, 
        "/vms/{uuid}/vm_disk/{vm_disk_uuid}/data": {
            "put": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "type": "object", 
                            "description": "Return object indicating the status of the write.", 
                            "properties": {
                                "bytes_written": {
                                    "type": "integer", 
                                    "description": "Number of bytes written to the identity disk.", 
                                    "format": "int32"
                                }
                            }
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "description": "VM disk device UUID", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm_disk_uuid"
                    }, 
                    {
                        "minimum": 0, 
                        "description": "Offset within the disk. Defaults to 0.", 
                        "format": "int32", 
                        "in": "query", 
                        "type": "integer", 
                        "maximum": 16777216, 
                        "name": "offset"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "data", 
                        "schema": {
                            "format": "byte"
                        }
                    }
                ], 
                "description": "Write to an identity disk attached to a VM at the provided offset.", 
                "x-doc-hide": true, 
                "consumes": [
                    "application/octet-stream"
                ], 
                "summary": "Write to a VM disk."
            }, 
            "get": {
                "summary": "Read from a VM disk.", 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "type": "string", 
                            "format": "byte"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "in": "path", 
                        "description": "VM disk device UUID", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "name": "vm_disk_uuid"
                    }, 
                    {
                        "minimum": 0, 
                        "description": "Offset within the disk. Defaults to 0.", 
                        "format": "int32", 
                        "in": "query", 
                        "type": "integer", 
                        "maximum": 16777216, 
                        "name": "offset"
                    }, 
                    {
                        "minimum": 0, 
                        "name": "length", 
                        "format": "int32", 
                        "in": "query", 
                        "type": "integer", 
                        "maximum": 16777216, 
                        "description": "Amount to read from disk. By default this will be the max size (16 MB)."
                    }
                ], 
                "description": "Read from an identity disk attached to a VM from the provided offset."
            }
        }, 
        "/vmware/v6/accounts/{account_uuid}/templates/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of template"
                    }, 
                    {
                        "in": "path", 
                        "name": "account_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of account"
                    }
                ], 
                "tags": [
                    "vmware/template"
                ], 
                "x-doc-hide": true, 
                "summary": "Get vmware template", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_template", 
                "description": "Given a UUID, returns a vmware template"
            }
        }, 
        "/vmware/v6/accounts/{account_uuid}/vms/{uuid}": {
            "get": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "in": "path", 
                        "name": "uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of vm"
                    }, 
                    {
                        "in": "path", 
                        "name": "account_uuid", 
                        "format": "UUID", 
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "required": true, 
                        "type": "string", 
                        "description": "uuid of account"
                    }
                ], 
                "tags": [
                    "vmware/vm"
                ], 
                "x-doc-hide": true, 
                "summary": "Get vmware vm", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_vm", 
                "description": "Given a UUID, returns a vmware vm"
            }
        }, 
        "/vmware/v6/cluster/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/cluster"
                ], 
                "x-doc-hide": true, 
                "summary": "List all clusters", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_cluster", 
                "description": "List all clusters in a datacenter. Supported filters are:\n- account_uuid\n"
            }
        }, 
        "/vmware/v6/datacenter/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/datacenter"
                ], 
                "x-doc-hide": true, 
                "summary": "List datacenters", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_datacenter", 
                "description": "List all datatcenters in a vcenter account. Supported filters are:\n- account_uuid\n"
            }
        }, 
        "/vmware/v6/datastore/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/datastore"
                ], 
                "x-doc-hide": true, 
                "summary": "List datastores", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_datastore", 
                "description": "List all datastores in a host. Supported filters are:\n- account_uuid\n- hostname\n"
            }
        }, 
        "/vmware/v6/host/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/host"
                ], 
                "x-doc-hide": true, 
                "summary": "List all hosts", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_host", 
                "description": "List all hosts in a datacenter. Supported filters are:\n- account_uuid\n"
            }
        }, 
        "/vmware/v6/network/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/network"
                ], 
                "x-doc-hide": true, 
                "summary": "List all networks", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_network", 
                "description": "List all networks types supported by the host. Supported filters are:\n- account_uuid\n- hostname\n"
            }
        }, 
        "/vmware/v6/network_adapter/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/network_adapter"
                ], 
                "x-doc-hide": true, 
                "summary": "List all network adapters supported", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_netadapter", 
                "description": "List all network adapter supported by vmware."
            }
        }, 
        "/vmware/v6/resourcepool/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/resourcepool"
                ], 
                "x-doc-hide": true, 
                "summary": "List resource pool", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_resourcepool", 
                "description": "List all resource pools in a host. Supported filters are:\n- account_uuid\n- hostname\n"
            }
        }, 
        "/vmware/v6/storage_pod/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/storage_pod"
                ], 
                "x-doc-hide": true, 
                "summary": "List all storage_pods", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_storage_pod", 
                "description": "List all storage_pods in a datacenter. Supported filters are:\n- account_uuid\n"
            }
        }, 
        "/vmware/v6/template/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/template"
                ], 
                "x-doc-hide": true, 
                "summary": "List vm templates", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_template", 
                "description": "List all vm templates in a datacenter. Supported filters are:\n- account_uuid\n"
            }
        }, 
        "/vmware/v6/timezone/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/timezone"
                ], 
                "x-doc-hide": true, 
                "summary": "List all timezones", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_timezone", 
                "description": "List all timezones supported by the guest os. Supported filters are:\n- account_uuid\n- guest_os\n"
            }
        }, 
        "/vmware/v6/vm/list": {
            "post": {
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }, 
                    "404": {
                        "description": "Entity not found", 
                        "schema": {
                            "additionalProperties": true
                        }
                    }
                }, 
                "parameters": [
                    {
                        "description": "Request body", 
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vmware_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vmware/vm"
                ], 
                "x-doc-hide": true, 
                "summary": "List all virtual machines", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vmware_vm", 
                "description": "List all virtual machines. Supported filters are:\n- account_uuid\n"
            }
        }, 
        "/vpn_connections": {
            "post": {
                "description": "This operation submits a request to create a new vpn_connection based on the input parameters.\nA vpn_connection respresents the configuration\n              needed to establish an IPSEC vpn tunnel between the local\n              and remote vpn gateways. The vpn_gateway objects must be\n              created first.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vpn_connection"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new vpn_connection", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "vpn_connection", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_intent_response"
                        }
                    }
                }
            }
        }, 
        "/vpn_connections/list": {
            "post": {
                "description": "This operation gets a list of vpn_connections, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vpn_connection"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing vpn_connections", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vpn_connection", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }
                }
            }
        }, 
        "/vpn_connections/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing vpn_connection based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vpn_connection"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing vpn_connection", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "vpn_connection", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing vpn_connection.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vpn_connection"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting vpn_connection", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vpn_connection", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing vpn_connection.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vpn_connection"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing vpn_connection", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "vpn_connection", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }
                }
            }
        }, 
        "/vpn_connections/{uuid}/vendor_config": {
            "get": {
                "description": "Get list of vendor devices for which configuration steps can be downloaded.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vpn_connection"
                ], 
                "x-doc-hide": true, 
                "summary": "Vendor devices for which configuration steps can be downloaded.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vpn_connection", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vendor_config_list_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }
                }
            }
        }, 
        "/vpn_connections/{uuid}/vendor_config/{name}": {
            "get": {
                "description": "Download the configuration steps for the given vendor device's latest version.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "description": "Vendor device name.", 
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vpn_connection"
                ], 
                "produces": [
                    "text/plain"
                ], 
                "x-doc-hide": true, 
                "summary": "Download vendor device configuration steps.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vpn_connection", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }
                }
            }
        }, 
        "/vpn_connections/{uuid}/vendor_config/{name}/{version}": {
            "get": {
                "description": "Download the configuration steps for the given vendor device and version.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "description": "Vendor device name.", 
                        "required": true, 
                        "type": "string", 
                        "name": "name", 
                        "in": "path"
                    }, 
                    {
                        "description": "Vendor device version.", 
                        "required": true, 
                        "type": "string", 
                        "name": "version", 
                        "in": "path"
                    }
                ], 
                "tags": [
                    "vpn_connection"
                ], 
                "produces": [
                    "text/plain"
                ], 
                "x-doc-hide": true, 
                "summary": "Download vendor device configuration steps.", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vpn_connection", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success"
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_connection_status"
                        }
                    }
                }
            }
        }, 
        "/vpn_gateways": {
            "post": {
                "description": "This operation submits a request to create a new vpn_gateway based on the input parameters.\nA vpn_gateway respresents the virtual\n              appliance that can peer with a remote gateway instance to\n              provide VPN functionality.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vpn_gateway"
                ], 
                "x-doc-hide": true, 
                "summary": "Create a new vpn_gateway", 
                "x-ntnx-operations": [
                    "create"
                ], 
                "x-ntnx-kind": "vpn_gateway", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_intent_response"
                        }
                    }
                }
            }
        }, 
        "/vpn_gateways/list": {
            "post": {
                "description": "This operation gets a list of vpn_gateways, allowing for sorting and pagination. Note: Entities that have not been created successfully are not listed.\n", 
                "parameters": [
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "get_entities_request", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_list_metadata"
                        }
                    }
                ], 
                "tags": [
                    "vpn_gateway"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a list of existing vpn_gateways", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vpn_gateway", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_list_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_status"
                        }
                    }
                }
            }
        }, 
        "/vpn_gateways/{uuid}": {
            "put": {
                "description": "This operation submits a request to update a existing vpn_gateway based on the input parameters.\n", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }, 
                    {
                        "required": true, 
                        "in": "body", 
                        "name": "body", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_intent_input"
                        }
                    }
                ], 
                "tags": [
                    "vpn_gateway"
                ], 
                "x-doc-hide": true, 
                "summary": "Update a existing vpn_gateway", 
                "x-ntnx-operations": [
                    "update"
                ], 
                "x-ntnx-kind": "vpn_gateway", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_status"
                        }
                    }
                }
            }, 
            "get": {
                "description": "This operation gets a existing vpn_gateway.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vpn_gateway"
                ], 
                "x-doc-hide": true, 
                "summary": "Get a exiting vpn_gateway", 
                "x-ntnx-operations": [
                    "view"
                ], 
                "x-ntnx-kind": "vpn_gateway", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_intent_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_status"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_status"
                        }
                    }
                }
            }, 
            "delete": {
                "description": "This operation submits a request to delete a existing vpn_gateway.", 
                "parameters": [
                    {
                        "$ref": "#/parameters/uuid"
                    }
                ], 
                "tags": [
                    "vpn_gateway"
                ], 
                "x-doc-hide": true, 
                "summary": "Delete a existing vpn_gateway", 
                "x-ntnx-operations": [
                    "delete"
                ], 
                "x-ntnx-kind": "vpn_gateway", 
                "x-ntnx-force-cli": true, 
                "responses": {
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_status"
                        }
                    }, 
                    "202": {
                        "description": "Request Accepted", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_intent_response"
                        }
                    }, 
                    "404": {
                        "description": "Invalid UUID provided", 
                        "schema": {
                            "$ref": "#/definitions/vpn_gateway_status"
                        }
                    }
                }
            }
        }, 
        "/xig_dns_config": {
            "get": {
                "summary": "Get PC's DNS Config for Xi Intent Gatedway.", 
                "x-doc-hide": true, 
                "responses": {
                    "200": {
                        "description": "Success", 
                        "schema": {
                            "$ref": "#/definitions/xig_dns_config_response"
                        }
                    }, 
                    "default": {
                        "description": "Internal Error", 
                        "schema": {
                            "$ref": "#/definitions/status"
                        }
                    }
                }, 
                "description": "PC's DNS configuration for Xi Intent Gateway.\n"
            }
        }
    }, 
    "schemes": [
        "https"
    ], 
    "parameters": {
        "cloud_type": {
            "description": "The Cloud Type.", 
            "in": "path", 
            "pattern": "(\\bAWS\\b|\\bAZURE\\b|\\bNUTANIX_HOSTED_CLOUD\\b|\\bONPREM_CLOUD\\b)", 
            "required": true, 
            "type": "string", 
            "name": "cloud_type"
        }, 
        "uuid": {
            "description": "The UUID of the entity.", 
            "format": "UUID", 
            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
            "required": true, 
            "x-example": "0e09cf83-ac68-4f28-af70-6df9a43df4f0", 
            "in": "path", 
            "type": "string", 
            "name": "uuid"
        }
    }, 
    "produces": [
        "application/json"
    ], 
    "basePath": "/api/nutanix/v3", 
    "securityDefinitions": {
        "basicAuth": {
            "type": "basic"
        }
    }, 
    "definitions": {
        "access_control_policy": {
            "title": "Access Control Policy.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the Access Control Policy.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "title": "Access Control Policy Resources.", 
                    "required": [
                        "role_reference"
                    ], 
                    "type": "object", 
                    "properties": {
                        "role_reference": {
                            "description": "The Role being assigned to a given user(s).", 
                            "$ref": "#/definitions/role_reference"
                        }, 
                        "user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "The User(s) being assigned a given role."
                        }, 
                        "filter_list": {
                            "x-ntnx-one-of": [
                                {
                                    "required": [
                                        "context_list"
                                    ]
                                }
                            ], 
                            "type": "object", 
                            "properties": {
                                "context_list": {
                                    "items": {
                                        "$ref": "#/definitions/filter"
                                    }, 
                                    "type": "array", 
                                    "description": "The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list. Note - the absence of a scope expression in a filter implies global context.\n"
                                }
                            }, 
                            "description": "The list of filters, which define the entities.\n"
                        }, 
                        "user_group_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_group_reference"
                            }, 
                            "type": "array", 
                            "description": "The User group(s) being assigned a given role."
                        }
                    }, 
                    "description": "Access Control Policy resources."
                }, 
                "description": {
                    "type": "string", 
                    "description": "The description of the association of a role to a user in a given context.\n", 
                    "maxLength": 1000
                }
            }, 
            "description": "Access Control Policy Input Definition."
        }, 
        "access_control_policy_def_status": {
            "title": "Access Control Policy status definition.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the Access Control Policy entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the Access Control Policy."
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "role_reference": {
                            "description": "The Role being assigned to a given user(s).", 
                            "$ref": "#/definitions/role_reference"
                        }, 
                        "user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "The User(s) being assigned a given role."
                        }, 
                        "filter_list": {
                            "x-ntnx-one-of": [
                                {
                                    "required": [
                                        "context_list"
                                    ]
                                }
                            ], 
                            "type": "object", 
                            "properties": {
                                "context_list": {
                                    "items": {
                                        "$ref": "#/definitions/filter"
                                    }, 
                                    "type": "array", 
                                    "description": "The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list. Note - the absence of a scope expression in a filter implies global context.\n"
                                }
                            }, 
                            "description": "The list of filters, which define the entities.\n"
                        }, 
                        "user_group_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_group_reference"
                            }, 
                            "type": "array", 
                            "description": "The User group(s) being assigned a given role."
                        }
                    }, 
                    "title": "Access Control Policy Resources."
                }, 
                "description": {
                    "type": "string", 
                    "description": "The description of the association of a role to a user in a given context."
                }
            }, 
            "description": "Access Control Policy status definition."
        }, 
        "access_control_policy_detail": {
            "title": "Details of Access Control Policy.", 
            "type": "object", 
            "properties": {
                "role": {
                    "description": "The Role being assigned to the user.", 
                    "$ref": "#/definitions/role"
                }, 
                "filter_list": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "context_list"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "context_list": {
                            "items": {
                                "$ref": "#/definitions/filter"
                            }, 
                            "type": "array", 
                            "description": "The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list. Note - the absence of a scope expression in a filter implies global context.\n"
                        }
                    }, 
                    "description": "The list of filters, which define the entities.\n"
                }
            }, 
            "description": "Details of Access Control Policy."
        }, 
        "access_control_policy_input": {
            "title": "Access control policy details", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the Access Control Policy.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "title": "Access Control Policy Resources.", 
                    "required": [
                        "role_reference"
                    ], 
                    "type": "object", 
                    "properties": {
                        "role_reference": {
                            "description": "The Role being assigned to a given user(s).", 
                            "$ref": "#/definitions/role_reference"
                        }, 
                        "user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "The User(s) being assigned a given role."
                        }, 
                        "filter_list": {
                            "x-ntnx-one-of": [
                                {
                                    "required": [
                                        "context_list"
                                    ]
                                }
                            ], 
                            "type": "object", 
                            "properties": {
                                "context_list": {
                                    "items": {
                                        "$ref": "#/definitions/filter"
                                    }, 
                                    "type": "array", 
                                    "description": "The list of context filters. These are OR filters. The scope-expression-list defines the context, and the filter works in conjunction with the entity-expression-list. Note - the absence of a scope expression in a filter implies global context.\n"
                                }
                            }, 
                            "description": "The list of filters, which define the entities.\n"
                        }, 
                        "user_group_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_group_reference"
                            }, 
                            "type": "array", 
                            "description": "The User group(s) being assigned a given role."
                        }
                    }, 
                    "description": "Access Control Policy resources."
                }, 
                "description": {
                    "type": "string", 
                    "description": "The description of the association of a role to a user\nin a given context.\n", 
                    "maxLength": 1000
                }
            }, 
            "description": "An Access Control Policy resource."
        }, 
        "access_control_policy_intent_input": {
            "title": "access_control_policy Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/access_control_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/access_control_policy_metadata"
                }
            }, 
            "description": "An intentful representation of a access_control_policy"
        }, 
        "access_control_policy_intent_resource": {
            "title": "access_control_policy Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/access_control_policy_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/access_control_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/access_control_policy_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a access_control_policy"
        }, 
        "access_control_policy_intent_response": {
            "title": "access_control_policy Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/access_control_policy_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/access_control_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/access_control_policy_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a access_control_policy"
        }, 
        "access_control_policy_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/access_control_policy_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/access_control_policy_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of access_control_policys"
        }, 
        "access_control_policy_list_metadata": {
            "title": "Metadata for access_control_policy list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "access_control_policy", 
                    "x-ntnx-enum": [
                        "access_control_policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "access_control_policy_list_metadata_output": {
            "title": "Metadata for access_control_policy list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "access_control_policy", 
                    "x-ntnx-enum": [
                        "access_control_policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "access_control_policy_metadata": {
            "title": "access_control_policy metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when access_control_policy was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "access_control_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "access_control_policy"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "access_control_policy uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the access_control_policy is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when access_control_policy was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the access_control_policy"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "access_control_policy name", 
                    "maxLength": 64
                }
            }, 
            "description": "The access_control_policy kind metadata"
        }, 
        "access_control_policy_reference": {
            "title": "Reference to a access_control_policy", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "access_control_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "access_control_policy"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a access_control_policy"
        }, 
        "access_control_policy_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "access_control_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "access_control_policy"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "account": {
            "title": "account Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for account.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/account_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "account Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a account spec"
        }, 
        "account_def_status": {
            "title": "account Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the account."
                }, 
                "name": {
                    "type": "string", 
                    "description": "account Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the account, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/account_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for account."
                }
            }, 
            "description": "An intentful representation of a account status"
        }, 
        "account_details": {
            "title": "Account information of a user.", 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "ACTIVE", 
                        "INACTIVE"
                    ], 
                    "type": "string", 
                    "description": "Status of the account indicating if it is active or not."
                }, 
                "subscription_expiry_date": {
                    "type": "string", 
                    "description": "Date on which current subscription plan ends.", 
                    "format": "date"
                }, 
                "minimum_charge_amount": {
                    "description": "Amount that will be charged to the customer at the very least.\n", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "account_number": {
                    "type": "string", 
                    "description": "Number associated with the account."
                }, 
                "prepaid_amount": {
                    "description": "Amount that is paid in advance by the customer.", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "plan_name": {
                    "type": "string", 
                    "description": "Name of the plan that user has subscribed to."
                }, 
                "next_invoice_date": {
                    "type": "string", 
                    "description": "Date on which next invoice will be generated.", 
                    "format": "date"
                }
            }, 
            "description": "Billing account information of a user."
        }, 
        "account_intent_input": {
            "title": "account Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/account"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/account_metadata"
                }
            }, 
            "description": "An intentful representation of a account"
        }, 
        "account_intent_resource": {
            "title": "account Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/account_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/account"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/account_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a account"
        }, 
        "account_intent_response": {
            "title": "account Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/account_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/account"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/account_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a account"
        }, 
        "account_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/account_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/account_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of accounts"
        }, 
        "account_list_metadata": {
            "title": "Metadata for account list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "account", 
                    "x-ntnx-enum": [
                        "account"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "account_list_metadata_output": {
            "title": "Metadata for account list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "account", 
                    "x-ntnx-enum": [
                        "account"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "account_metadata": {
            "title": "account metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when account was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "account", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "account"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "account uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the account is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when account was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the account"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "account name", 
                    "maxLength": 64
                }
            }, 
            "description": "The account kind metadata"
        }, 
        "account_reference": {
            "title": "Reference to a account", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "account", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "account"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a account"
        }, 
        "account_reference_upload": {
            "title": "Reference to a account", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "account", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "account"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a account"
        }, 
        "account_resources": {
            "title": "Account resources", 
            "required": [
                "type", 
                "data"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string"
                }, 
                "data": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Account data"
                }
            }, 
            "description": "Account resources"
        }, 
        "account_resources_def_status": {
            "title": "Account resources", 
            "required": [
                "type", 
                "data"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string"
                }, 
                "data": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Account data"
                }
            }, 
            "description": "Account resources"
        }, 
        "account_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "account", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "account"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "action_instance_object": {
            "title": "Action instance", 
            "required": [
                "action_type_reference", 
                "should_continue_on_failure"
            ], 
            "type": "object", 
            "properties": {
                "instance_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Id to uniquely identify trigger in instance list.", 
                    "format": "UUID"
                }, 
                "action_type_reference": {
                    "$ref": "#/definitions/action_type_reference"
                }, 
                "output_parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/param_descriptor"
                    }, 
                    "description": "The action output parameter descriptors."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Each action instance already has a default display name from action\ntype.  However, users could change an action instance with a different\ndisplay name.\n", 
                    "maxLength": 255
                }, 
                "input_parameter_values": {
                    "description": "The action user entered input parameters.", 
                    "$ref": "#/definitions/component_instance_parameters"
                }, 
                "should_continue_on_failure": {
                    "type": "boolean", 
                    "description": "When this action execution fails, the rule execution should\ncontinue to the next action or not.\n"
                }, 
                "max_retries": {
                    "format": "int32", 
                    "type": "integer", 
                    "description": "This field applies to on_timeout enum retry choice.  When this\naction execution times out, the rule execution will retry the\nexecution until the max retry number is exceeded.\n", 
                    "maximum": 5
                }
            }, 
            "description": "Action instance object."
        }, 
        "action_result": {
            "title": "Action execution result", 
            "required": [
                "execution_start_time", 
                "action_type_reference", 
                "execution_status"
            ], 
            "type": "object", 
            "properties": {
                "action_instance_index": {
                    "type": "integer", 
                    "description": "Index of action instance in action rule.", 
                    "format": "int64"
                }, 
                "action_type_reference": {
                    "description": "the action type for the action.", 
                    "$ref": "#/definitions/action_type_reference"
                }, 
                "error_message_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "A list of error messages if failed, or if timed out.  For actions that\nhave rule's on_timeout property set to RETRY, each of the retry could\nhave one timeout message.\n"
                }, 
                "action_type_display_name": {
                    "type": "string", 
                    "description": "the display name"
                }, 
                "output_parameter_values": {
                    "description": "Trigger output parameters.", 
                    "$ref": "#/definitions/component_instance_parameters"
                }, 
                "execution_status": {
                    "description": "the action execution status", 
                    "$ref": "#/definitions/execution_status"
                }, 
                "execution_start_time": {
                    "type": "string", 
                    "description": "the timestamp that this action was invoked.", 
                    "format": "date-time"
                }, 
                "input_parameter_values": {
                    "description": "The ordered action input parameters.", 
                    "$ref": "#/definitions/component_instance_parameters"
                }, 
                "execution_end_time": {
                    "type": "string", 
                    "description": "the timestamp that this action invocation finished.", 
                    "format": "date-time"
                }
            }, 
            "description": "The execution result from a rule execution of an action\ninstance.  It should include input parameters and output parameters.\n"
        }, 
        "action_rule": {
            "title": "Action rule entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/action_rule_resources"
                }
            }, 
            "description": "Action rule entity definition"
        }, 
        "action_rule_def_status": {
            "title": "Action rule entity status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "resources": {
                    "$ref": "#/definitions/action_rule_resources"
                }
            }, 
            "description": "Action rule entity status definition"
        }, 
        "action_rule_intent_input": {
            "title": "action_rule Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/action_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_rule_metadata"
                }
            }, 
            "description": "An intentful representation of a action_rule"
        }, 
        "action_rule_intent_resource": {
            "title": "action_rule Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_rule_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_rule_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_rule"
        }, 
        "action_rule_intent_response": {
            "title": "action_rule Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_rule_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_rule_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_rule"
        }, 
        "action_rule_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/action_rule_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_rule_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of action_rules"
        }, 
        "action_rule_list_metadata": {
            "title": "Metadata for action_rule list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "action_rule", 
                    "x-ntnx-enum": [
                        "action_rule"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "action_rule_list_metadata_output": {
            "title": "Metadata for action_rule list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "action_rule", 
                    "x-ntnx-enum": [
                        "action_rule"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "action_rule_metadata": {
            "title": "action_rule metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_rule was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "action_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_rule"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "action_rule uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the action_rule is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_rule was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the action_rule"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "action_rule name", 
                    "maxLength": 64
                }
            }, 
            "description": "The action_rule kind metadata"
        }, 
        "action_rule_reference": {
            "title": "Reference to a action_rule", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_rule"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a action_rule"
        }, 
        "action_rule_resources": {
            "title": "Action rule entity", 
            "required": [
                "trigger_list", 
                "action_list"
            ], 
            "type": "object", 
            "properties": {
                "is_enabled": {
                    "type": "boolean", 
                    "description": "is the rule enabled or disabled."
                }, 
                "should_validate": {
                    "type": "boolean", 
                    "description": "The rule should be validated or not.  If True, then, the rule will be\nvalidated before saving.  If the validation failed, the spec status\nmessage list will have errors.\n"
                }, 
                "validated": {
                    "readOnly": true, 
                    "type": "boolean", 
                    "description": "Is this been validated to trur or not."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The action rule name", 
                    "maxLength": 64
                }, 
                "execution_user_reference": {
                    "description": "This will incidate who this rule will be executed on behalf of.\nIt will be a user uuid.\n", 
                    "$ref": "#/definitions/user_reference"
                }, 
                "schedule": {
                    "description": "The delayed execution schedule for a triggered rule.  That is, when\na trigger is triggered, the action chain will be executed per schedule\nat a later time.\n", 
                    "$ref": "#/definitions/schedule"
                }, 
                "description": {
                    "type": "string", 
                    "description": "The rule description", 
                    "maxLength": 256
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/action_instance_object"
                    }, 
                    "type": "array", 
                    "description": "Ordered list of the actions to execute in this rule."
                }, 
                "check_trigger_validity": {
                    "type": "boolean", 
                    "description": "If it is true, the rule action execution at the schedueled time will\ncheck if the original trigger is still valid.  If not set, default\nto True.\n"
                }, 
                "validation_error_list": {
                    "items": {
                        "$ref": "#/definitions/component_validation_error"
                    }, 
                    "type": "array", 
                    "description": "validation errors identified in this rule."
                }, 
                "trigger_list": {
                    "items": {
                        "$ref": "#/definitions/trigger_instance_object"
                    }, 
                    "type": "array", 
                    "description": "The only trigger that the rule has."
                }, 
                "global_parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/param_descriptor"
                    }, 
                    "readOnly": true, 
                    "description": "The rule level global parameter descriptors. This is provided by\nthe system.\n"
                }
            }, 
            "description": "Action rule entity definition"
        }, 
        "action_rule_result": {
            "title": "Action type entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/action_rule_result_resources"
                }
            }, 
            "description": "Action type entity definition"
        }, 
        "action_rule_result_action_input": {
            "title": "Action input for action rule execution instance.", 
            "type": "object", 
            "properties": {
                "action_rule_result_uuid_list": {
                    "items": {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "type": "string", 
                        "format": "UUID"
                    }, 
                    "type": "array", 
                    "description": "A list of action rule result instance UUIDs to be acted on,\nlike aborted.  If the list is empty, that means apply to all\naction rule result instances in the system.  Note, only action\nrule result instance not reached end status can be aborted.\n"
                }
            }, 
            "description": "Action input for action rule execution instnaces."
        }, 
        "action_rule_result_def_status": {
            "title": "Action type entity status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "resources": {
                    "$ref": "#/definitions/action_rule_result_resources"
                }
            }, 
            "description": "Action type entity status definition"
        }, 
        "action_rule_result_intent_input": {
            "title": "action_rule_result Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/action_rule_result"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_rule_result_metadata"
                }
            }, 
            "description": "An intentful representation of a action_rule_result"
        }, 
        "action_rule_result_intent_resource": {
            "title": "action_rule_result Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_rule_result_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_rule_result"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_rule_result_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_rule_result"
        }, 
        "action_rule_result_intent_response": {
            "title": "action_rule_result Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_rule_result_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_rule_result"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_rule_result_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_rule_result"
        }, 
        "action_rule_result_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/action_rule_result_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_rule_result_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of action_rule_results"
        }, 
        "action_rule_result_list_metadata": {
            "title": "Metadata for action_rule_result list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "action_rule_result", 
                    "x-ntnx-enum": [
                        "action_rule_result"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "action_rule_result_list_metadata_output": {
            "title": "Metadata for action_rule_result list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "action_rule_result", 
                    "x-ntnx-enum": [
                        "action_rule_result"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "action_rule_result_metadata": {
            "title": "action_rule_result metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_rule_result was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "action_rule_result", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_rule_result"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "action_rule_result uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the action_rule_result is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_rule_result was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the action_rule_result"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "action_rule_result name", 
                    "maxLength": 64
                }
            }, 
            "description": "The action_rule_result kind metadata"
        }, 
        "action_rule_result_reference": {
            "title": "Reference to a action_rule_result", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_rule_result", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_rule_result"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a action_rule_result"
        }, 
        "action_rule_result_resources": {
            "title": "Action rule result entity", 
            "required": [
                "action_rule_reference", 
                "execution_status", 
                "trigger_info_list", 
                "action_result_list"
            ], 
            "type": "object", 
            "properties": {
                "action_result_list": {
                    "items": {
                        "$ref": "#/definitions/action_result"
                    }, 
                    "type": "array", 
                    "description": "Ordered list of action execution results."
                }, 
                "execution_status": {
                    "description": "The overall rule execution status.", 
                    "$ref": "#/definitions/execution_status"
                }, 
                "action_rule_reference": {
                    "$ref": "#/definitions/action_rule_reference"
                }, 
                "rule_parameter_values": {
                    "description": "The global parameters provided by the action rule.  They could be\nused by actions.\n", 
                    "$ref": "#/definitions/component_instance_parameters"
                }, 
                "execution_messages": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of messages associated with rule execution."
                }, 
                "execution_start_time": {
                    "type": "string", 
                    "description": "The time the first action started execution.", 
                    "format": "date-time"
                }, 
                "trigger_info_list": {
                    "items": {
                        "$ref": "#/definitions/trigger_info"
                    }, 
                    "type": "array", 
                    "description": "The information about the triggers."
                }, 
                "execution_end_time": {
                    "type": "string", 
                    "description": "The time the last action finished execution.", 
                    "format": "date-time"
                }
            }, 
            "description": "Action rule result entity definition"
        }, 
        "action_rule_result_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_rule_result", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_rule_result"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "action_rule_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_rule"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "action_service_component_type": {
            "title": "Generic action service component type construct", 
            "required": [
                "name", 
                "display_name", 
                "description"
            ], 
            "type": "object", 
            "properties": {
                "display_name": {
                    "type": "string", 
                    "description": "Action service component display name.", 
                    "maxLength": 64
                }, 
                "global_parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/param_descriptor"
                    }, 
                    "readOnly": true, 
                    "description": "The rule parameters globally available to every component to use.\nThis is provided by system, not by action type or trigger type\nservice.\n"
                }, 
                "input_parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/param_descriptor"
                    }, 
                    "description": "The component required input parameter descriptors.  The key is the\nparameter name\n"
                }, 
                "group_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The group/bucket in which the component falls into.\n"
                }, 
                "name": {
                    "type": "string", 
                    "description": "A preconfigured, or dynamically created component type.", 
                    "maxLength": 64
                }, 
                "output_parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/param_descriptor"
                    }, 
                    "description": "The component output parameter descriptors. The key is the parameter\nname.\n"
                }, 
                "ui_metadata": {
                    "items": {
                        "$ref": "#/definitions/display_metadata"
                    }, 
                    "type": "array", 
                    "description": "The metadata of form fields/params required for UI to render params.\n"
                }, 
                "additional_info": {
                    "type": "string", 
                    "description": "Additional information about the action/trigger type.", 
                    "maxLength": 8192
                }, 
                "description": {
                    "type": "string", 
                    "description": "Action service component type description.", 
                    "maxLength": 255
                }
            }, 
            "description": "This is the generic construct for both action type and trigger type.\n"
        }, 
        "action_template": {
            "title": "Action template entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/action_template_resources"
                }
            }, 
            "description": "Action template entity definition"
        }, 
        "action_template_def_status": {
            "title": "Action template entity status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "resources": {
                    "$ref": "#/definitions/action_template_resources"
                }
            }, 
            "description": "Action template entity status definition"
        }, 
        "action_template_intent_input": {
            "title": "action_template Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/action_template"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_template_metadata"
                }
            }, 
            "description": "An intentful representation of a action_template"
        }, 
        "action_template_intent_resource": {
            "title": "action_template Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_template_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_template"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_template_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_template"
        }, 
        "action_template_intent_response": {
            "title": "action_template Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_template_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_template"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_template_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_template"
        }, 
        "action_template_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/action_template_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_template_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of action_templates"
        }, 
        "action_template_list_metadata": {
            "title": "Metadata for action_template list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "action_template", 
                    "x-ntnx-enum": [
                        "action_template"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "action_template_list_metadata_output": {
            "title": "Metadata for action_template list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "action_template", 
                    "x-ntnx-enum": [
                        "action_template"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "action_template_metadata": {
            "title": "action_template metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_template was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "action_template", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_template"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "action_template uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the action_template is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_template was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the action_template"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "action_template name", 
                    "maxLength": 64
                }
            }, 
            "description": "The action_template kind metadata"
        }, 
        "action_template_reference": {
            "title": "Reference to a action_template", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_template", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_template"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a action_template"
        }, 
        "action_template_resources": {
            "title": "Action template", 
            "required": [
                "action_type_reference"
            ], 
            "type": "object", 
            "properties": {
                "action_type_reference": {
                    "$ref": "#/definitions/action_type_reference"
                }, 
                "input_parameter_values": {
                    "description": "The input parameter value mappings for the action instance.", 
                    "$ref": "#/definitions/component_instance_parameters"
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Each action instance already has a default display name from action\ntype.  However, users could change an action instance with a different\ndisplay name.\n", 
                    "maxLength": 255
                }, 
                "blank_template": {
                    "type": "boolean", 
                    "description": "Is this a blank template or a user defined template."
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the action template.", 
                    "maxLength": 1024
                }
            }, 
            "description": "Action template object for example action templates."
        }, 
        "action_template_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_template", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_template"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "action_trigger_type": {
            "title": "Trigger type entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/action_service_component_type"
                }
            }, 
            "description": "Trigger type entity definition"
        }, 
        "action_trigger_type_def_status": {
            "title": "Action trigger type entity status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "resources": {
                    "$ref": "#/definitions/action_trigger_type"
                }
            }, 
            "description": "Action trigger type entity status definition"
        }, 
        "action_trigger_type_intent_input": {
            "title": "action_trigger_type Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/action_trigger_type"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_trigger_type_metadata"
                }
            }, 
            "description": "An intentful representation of a action_trigger_type"
        }, 
        "action_trigger_type_intent_resource": {
            "title": "action_trigger_type Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_trigger_type_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_trigger_type"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_trigger_type_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_trigger_type"
        }, 
        "action_trigger_type_intent_response": {
            "title": "action_trigger_type Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_trigger_type_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_trigger_type"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_trigger_type_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_trigger_type"
        }, 
        "action_trigger_type_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/action_trigger_type_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_trigger_type_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of action_trigger_types"
        }, 
        "action_trigger_type_list_metadata": {
            "title": "Metadata for action_trigger_type list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "action_trigger_type", 
                    "x-ntnx-enum": [
                        "action_trigger_type"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "action_trigger_type_list_metadata_output": {
            "title": "Metadata for action_trigger_type list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "action_trigger_type", 
                    "x-ntnx-enum": [
                        "action_trigger_type"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "action_trigger_type_metadata": {
            "title": "action_trigger_type metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_trigger_type was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "action_trigger_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_trigger_type"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "action_trigger_type uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the action_trigger_type is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_trigger_type was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the action_trigger_type"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "action_trigger_type name", 
                    "maxLength": 64
                }
            }, 
            "description": "The action_trigger_type kind metadata"
        }, 
        "action_trigger_type_reference": {
            "title": "Reference to a action_trigger_type", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_trigger_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_trigger_type"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a action_trigger_type"
        }, 
        "action_trigger_type_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_trigger_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_trigger_type"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "action_type": {
            "title": "Action type entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/action_service_component_type"
                }
            }, 
            "description": "Action type entity definition."
        }, 
        "action_type_def_status": {
            "title": "Action type entity status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "resources": {
                    "$ref": "#/definitions/action_type"
                }
            }, 
            "description": "Action type entity status definition"
        }, 
        "action_type_intent_input": {
            "title": "action_type Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/action_type"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_type_metadata"
                }
            }, 
            "description": "An intentful representation of a action_type"
        }, 
        "action_type_intent_resource": {
            "title": "action_type Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_type_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_type"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_type_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_type"
        }, 
        "action_type_intent_response": {
            "title": "action_type Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/action_type_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/action_type"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_type_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a action_type"
        }, 
        "action_type_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/action_type_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/action_type_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of action_types"
        }, 
        "action_type_list_metadata": {
            "title": "Metadata for action_type list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "action_type", 
                    "x-ntnx-enum": [
                        "action_type"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "action_type_list_metadata_output": {
            "title": "Metadata for action_type list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "action_type", 
                    "x-ntnx-enum": [
                        "action_type"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "action_type_metadata": {
            "title": "action_type metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_type was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "action_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_type"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "action_type uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the action_type is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when action_type was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the action_type"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "action_type name", 
                    "maxLength": 64
                }
            }, 
            "description": "The action_type kind metadata"
        }, 
        "action_type_reference": {
            "title": "Reference to a action_type", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_type"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a action_type"
        }, 
        "action_type_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "action_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "action_type"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "address": {
            "description": "Host address.", 
            "title": "Host address.", 
            "type": "object", 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "IPV4 address."
                }, 
                "ipv6": {
                    "pattern": "(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))", 
                    "type": "string", 
                    "description": "IPV6 address."
                }, 
                "is_backup": {
                    "type": "boolean", 
                    "description": "Whether this address is a backup or not."
                }, 
                "port": {
                    "type": "integer", 
                    "description": "Port Number", 
                    "format": "int32"
                }, 
                "fqdn": {
                    "type": "string", 
                    "description": "Fully qualified domain name."
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "ip"
                    ]
                }, 
                {
                    "required": [
                        "ipv6"
                    ]
                }, 
                {
                    "required": [
                        "fqdn"
                    ]
                }
            ]
        }, 
        "affected_entity": {
            "title": "Entity information", 
            "type": "object", 
            "properties": {
                "conflicting_protection_rule_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "protection_rule_reference": {
                                "description": "Protection rule reference that has conflicts over this entity.\n", 
                                "$ref": "#/definitions/protection_rule_reference"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of reference to conflicting protection rules for an entity. If\nan entity is filtered by multiple protection rules, Kanon service can\nnot protect that entity. We will flag those entities along with the\nprotection rules. This is set only incase if the entity has conflicts.\n"
                }, 
                "vm_reference": {
                    "description": "Reference to the VM entity.", 
                    "$ref": "#/definitions/vm_reference"
                }
            }, 
            "description": "Information about an entity that is affected by a protection rule. This\nis like a union, at a time either VM or VG reference will be set.\n"
        }, 
        "affected_entity_list": {
            "title": "Entity information list", 
            "required": [
                "entity_list"
            ], 
            "type": "object", 
            "properties": {
                "entity_list": {
                    "items": {
                        "$ref": "#/definitions/affected_entity"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Contains the list of entities. The entity information contains\nentity_kind, entity_name and entity_uuid.\n"
        }, 
        "alert": {
            "title": "Alert Entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/alert_resources"
                }
            }, 
            "description": "Alert entity definition"
        }, 
        "alert_action_input": {
            "title": "Alert acknowlegement or resolution input.", 
            "type": "object", 
            "properties": {
                "alert_uuid_list": {
                    "items": {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "type": "string", 
                        "format": "UUID"
                    }, 
                    "type": "array", 
                    "description": "A list of alert UUIDs to be acknowledged or resolved.  If the list is\nempty, that means resolve all alerts in the system.\n"
                }
            }, 
            "description": "Alert acknowlegement or resolution input parameters."
        }, 
        "alert_def_status": {
            "title": "Alert entity status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "resources": {
                    "$ref": "#/definitions/alert_resources"
                }
            }, 
            "description": "Alert entity status definition"
        }, 
        "alert_intent_input": {
            "title": "alert Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/alert"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/alert_metadata"
                }
            }, 
            "description": "An intentful representation of a alert"
        }, 
        "alert_intent_resource": {
            "title": "alert Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/alert_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/alert"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/alert_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a alert"
        }, 
        "alert_intent_response": {
            "title": "alert Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/alert_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/alert"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/alert_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a alert"
        }, 
        "alert_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/alert_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/alert_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of alerts"
        }, 
        "alert_list_metadata": {
            "title": "Metadata for alert list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "alert", 
                    "x-ntnx-enum": [
                        "alert"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "alert_list_metadata_output": {
            "title": "Metadata for alert list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "alert", 
                    "x-ntnx-enum": [
                        "alert"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "alert_metadata": {
            "title": "alert metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when alert was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "alert", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "alert"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "alert uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the alert is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when alert was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the alert"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "alert name", 
                    "maxLength": 64
                }
            }, 
            "description": "The alert kind metadata"
        }, 
        "alert_notification_input": {
            "title": "Alert creation informtion", 
            "required": [
                "notification_type", 
                "severity"
            ], 
            "type": "object", 
            "properties": {
                "notification_type": {
                    "type": "string", 
                    "description": "The notification definition for this type of alerts."
                }, 
                "source_entity": {
                    "description": "The entity which causes the alert.", 
                    "$ref": "#/definitions/reference"
                }, 
                "severity": {
                    "description": "Alert instance severity.", 
                    "$ref": "#/definitions/severity"
                }, 
                "parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/param_value"
                    }, 
                    "type": "object", 
                    "description": "Alert notification type specific parameters."
                }
            }, 
            "description": "The information required for creating an alert."
        }, 
        "alert_reference": {
            "title": "Reference to a alert", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "alert", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "alert"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a alert"
        }, 
        "alert_resources": {
            "title": "Alert entity", 
            "required": [
                "type", 
                "title", 
                "severity"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "type": "string", 
                    "description": "The last time this alert was updated.  System sets this.", 
                    "format": "date-time"
                }, 
                "source_entity": {
                    "type": "object", 
                    "description": "The entity that causes the alert.", 
                    "properties": {
                        "cluster_uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "The UUID for the cluster that contained the source entity\nat the alert creation time.\n", 
                            "format": "UUID"
                        }, 
                        "entity": {
                            "$ref": "#/definitions/entity_info"
                        }
                    }
                }, 
                "rca_metadata_list": {
                    "items": {
                        "$ref": "#/definitions/rca_metadata"
                    }, 
                    "type": "array", 
                    "description": "List of cause and resolution object from alert RCA metadata."
                }, 
                "affected_entity_list": {
                    "items": {
                        "$ref": "#/definitions/entity_info"
                    }, 
                    "type": "array", 
                    "description": "A list of entities causing and/or related to this alert.\n"
                }, 
                "default_message": {
                    "type": "string", 
                    "description": "Alert message."
                }, 
                "indicator_list": {
                    "items": {
                        "$ref": "#/definitions/indicator"
                    }, 
                    "type": "array", 
                    "description": "The symptoms that caused this alert"
                }, 
                "resolution_status": {
                    "description": "This indicates the resolution status, time, and who did it.", 
                    "$ref": "#/definitions/alert_state"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "The time that this alert was created.", 
                    "format": "date-time"
                }, 
                "acknowledged_status": {
                    "description": "This indicates the acknowlegement status, time, and who did it.\n", 
                    "$ref": "#/definitions/alert_state"
                }, 
                "is_user_defined": {
                    "type": "boolean", 
                    "description": "The alert is raised by user defined policy or not."
                }, 
                "impact_type_list": {
                    "items": {
                        "type": "string", 
                        "maxLength": 64
                    }, 
                    "type": "array", 
                    "description": "The area this alert could impact.\n"
                }, 
                "impact_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "array", 
                    "description": "The impact of the alert."
                }, 
                "latest_occurrence_time": {
                    "type": "string", 
                    "description": "Alert instances could be dedupped by the system.  However, the last\ntime this similar alert was received is still be updated in this\nfield.\n", 
                    "format": "date-time"
                }, 
                "severity": {
                    "description": "Alert instance severity.", 
                    "$ref": "#/definitions/severity"
                }, 
                "parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/param_value"
                    }, 
                    "type": "object", 
                    "description": "Alert notification type specific parameters."
                }, 
                "title": {
                    "type": "string", 
                    "description": "Alert title"
                }, 
                "severity_trail_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "severity_change_time": {
                                "type": "string", 
                                "format": "date-time"
                            }, 
                            "severity": {
                                "$ref": "#/definitions/severity"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "The field has a list of information alert severity change history. If\nthe alert is duplicated without severity change, then, that instance\nwill not be saved here.\n"
                }, 
                "classification_list": {
                    "items": {
                        "type": "string", 
                        "maxLength": 64
                    }, 
                    "type": "array", 
                    "description": "Component classification"
                }, 
                "type": {
                    "type": "string", 
                    "description": "A preconfigured, or dynamically created alert type or alert type UUID.\nFor example, A1128 for the storage pool space usage exceeded alerts,\nor, a real UUID for user defined alert policy.\n"
                }, 
                "possible_cause_list": {
                    "items": {
                        "$ref": "#/definitions/cause_analysis"
                    }, 
                    "type": "array", 
                    "description": "An ordered list of the possible causes and resolutions for the alert.\n"
                }
            }, 
            "description": "Alert entity definition."
        }, 
        "alert_state": {
            "title": "Information about an alert state.", 
            "type": "object", 
            "properties": {
                "is_true": {
                    "type": "boolean", 
                    "description": "A boolean status for acknowledgement or resolution"
                }, 
                "is_auto_resolved": {
                    "type": "boolean", 
                    "description": "It is automatically resolved or user manually resolved.  Currently,\nit is limtied to the resolution only.\n"
                }, 
                "user": {
                    "type": "string", 
                    "description": "Name of the user who change this alert status."
                }, 
                "time": {
                    "type": "string", 
                    "description": "The time the alert status was changed.", 
                    "format": "date-time"
                }
            }, 
            "description": "The status data construct for acknowledgement and resolution."
        }, 
        "alert_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "alert", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "alert"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "api_request": {
            "title": "API request", 
            "required": [
                "path_and_params", 
                "operation"
            ], 
            "type": "object", 
            "properties": {
                "body": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object", 
                    "description": "The API request specification."
                }, 
                "operation": {
                    "x-ntnx-enum": [
                        "DELETE", 
                        "GET", 
                        "HEAD", 
                        "PATCH", 
                        "POST", 
                        "PUT"
                    ], 
                    "type": "string", 
                    "description": "The REST method to use."
                }, 
                "path_and_params": {
                    "type": "string", 
                    "description": "The part of the API request that contains information\nsuch as the path and query.\n"
                }
            }, 
            "description": "API request"
        }, 
        "api_response": {
            "title": "API response", 
            "required": [
                "path_and_params", 
                "api_response", 
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string"
                }, 
                "api_response": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }, 
                "path_and_params": {
                    "type": "string", 
                    "description": "The part of API response that contains information such as the path\nand query.\n"
                }
            }, 
            "description": "API Response"
        }, 
        "api_version": {
            "default": "3.1.0", 
            "readOnly": true, 
            "type": "string", 
            "description": "API Version of the Nutanix v3 API framework.", 
            "title": "API Version"
        }, 
        "app": {
            "title": "app Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for app.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/app_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "app Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a app spec"
        }, 
        "app_action_input": {
            "title": "Action for Application", 
            "type": "object", 
            "properties": {
                "critical": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "action critical flag"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "runbook": {
                    "description": "Action runbooks\n", 
                    "$ref": "#/definitions/app_runbook_input"
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "action attrs"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Action definition for Application"
        }, 
        "app_action_input_upload": {
            "title": "Action for Application", 
            "type": "object", 
            "properties": {
                "critical": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "action critical flag"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "runbook": {
                    "description": "Action runbooks\n", 
                    "$ref": "#/definitions/app_runbook_input_upload"
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "action attrs"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Action definition for Application"
        }, 
        "app_action_response": {
            "title": "Action for Application", 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "critical": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "action critical flag"
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "action attrs"
                }, 
                "runbook": {
                    "description": "Action runbooks\n", 
                    "$ref": "#/definitions/app_runbook_response"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for action"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Action definition for Application"
        }, 
        "app_action_response_download": {
            "title": "Action for Application", 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "critical": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "action critical flag"
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "action attrs"
                }, 
                "runbook": {
                    "description": "Action runbooks\n", 
                    "$ref": "#/definitions/app_runbook_response_download"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for action"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Action definition for Application"
        }, 
        "app_actionrun_args": {
            "title": "Argument format for action run", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the Argument field.", 
                    "maxLength": 64
                }, 
                "value": {
                    "type": "string", 
                    "description": "Value of the Argument field."
                }
            }, 
            "description": "Argument format for action run"
        }, 
        "app_actionrun_input": {
            "title": "app actionrun request format", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/app_actionrun_spec"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_metadata"
                }
            }, 
            "description": "Request object for action_run, contains action_run_log"
        }, 
        "app_actionrun_response": {
            "title": "app actionrun response format", 
            "required": [
                "api_version", 
                "metadata", 
                "status", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/app_actionrun_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/app_actionrun_spec"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_metadata"
                }
            }, 
            "description": "Response object for action_run, contains action_run_log"
        }, 
        "app_actionrun_spec": {
            "title": "Spec for action launch.", 
            "type": "object", 
            "properties": {
                "args": {
                    "items": {
                        "$ref": "#/definitions/app_actionrun_args"
                    }, 
                    "type": "array", 
                    "description": "Argument that need to be passed in action run. It is a dictionary of name-values."
                }, 
                "target_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The target entity on which that action will be running.", 
                    "format": "UUID"
                }, 
                "target_kind": {
                    "type": "string", 
                    "description": "type of target entity."
                }
            }, 
            "description": "Spec for action launch."
        }, 
        "app_actionrun_status": {
            "title": "Status of action_run", 
            "type": "object", 
            "properties": {
                "runlog_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "App creation runlog uuid.", 
                    "format": "UUID"
                }
            }, 
            "description": "Status of action_run"
        }, 
        "app_blueprint_deployment_reference": {
            "title": "Reference to a app_blueprint_deployment", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_blueprint_deployment", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_blueprint_deployment"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_blueprint_deployment"
        }, 
        "app_blueprint_deployment_reference_upload": {
            "title": "Reference to a app_blueprint_deployment", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_blueprint_deployment", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_blueprint_deployment"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_blueprint_deployment"
        }, 
        "app_cost_input": {
            "title": "Cost for Application", 
            "required": [
                "name", 
                "uuid", 
                "type", 
                "interval", 
                "value"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "interval": {
                    "x-ntnx-enum": [
                        "HOUR", 
                        "WEEK", 
                        "MONTH"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "LIVE", 
                        "STATIC"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "value": {
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Cost definition for Application"
        }, 
        "app_cost_input_upload": {
            "title": "Cost for Application", 
            "required": [
                "name", 
                "type", 
                "interval", 
                "value"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "interval": {
                    "x-ntnx-enum": [
                        "HOUR", 
                        "WEEK", 
                        "MONTH"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "LIVE", 
                        "STATIC"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "value": {
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Cost definition for Application"
        }, 
        "app_cost_response": {
            "title": "Cost for Application", 
            "required": [
                "name", 
                "uuid", 
                "type", 
                "interval", 
                "value", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "LIVE", 
                        "STATIC"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "interval": {
                    "x-ntnx-enum": [
                        "HOUR", 
                        "WEEK", 
                        "MONTH"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "value": {
                    "type": "string", 
                    "description": ""
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Cost definition for Application"
        }, 
        "app_cost_response_download": {
            "title": "Cost for Application", 
            "required": [
                "name", 
                "type", 
                "interval", 
                "value", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "LIVE", 
                        "STATIC"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "interval": {
                    "x-ntnx-enum": [
                        "HOUR", 
                        "WEEK", 
                        "MONTH"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "value": {
                    "type": "string", 
                    "description": ""
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Cost definition for Application"
        }, 
        "app_credential_input": {
            "title": "Credential for application", 
            "required": [
                "name", 
                "uuid", 
                "type", 
                "username", 
                "secret"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "secret": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Credential secret object"
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "PASSWORD", 
                        "KEY"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "passphrase": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Credential passphrase object associated with the provided key"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Credential for application"
        }, 
        "app_credential_input_upload": {
            "title": "Credential for application", 
            "required": [
                "name", 
                "type", 
                "username", 
                "secret"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "secret": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Credential secret object"
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "PASSWORD", 
                        "KEY"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "passphrase": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Credential passphrase object associated with the provided key"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Credential for application"
        }, 
        "app_credential_reference": {
            "title": "Reference to a app_credential", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_credential", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_credential"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_credential"
        }, 
        "app_credential_reference_upload": {
            "title": "Reference to a app_credential", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_credential", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_credential"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_credential"
        }, 
        "app_credential_response": {
            "title": "Credential for Application", 
            "required": [
                "name", 
                "uuid", 
                "type", 
                "username", 
                "secret"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "PASSWORD", 
                        "KEY"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "secret": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Credential secret object"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list"
                }, 
                "passphrase": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Credential passphrase object associated with the provided key"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Credential definition for Application"
        }, 
        "app_credential_response_download": {
            "title": "Credential for Application", 
            "required": [
                "name", 
                "type", 
                "username", 
                "secret"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "PASSWORD", 
                        "KEY"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "secret": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Credential secret object"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list"
                }, 
                "passphrase": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Credential passphrase object associated with the provided key"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Credential definition for Application"
        }, 
        "app_custom_intent_input": {
            "title": "app Intent Entity", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/app"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_metadata"
                }
            }, 
            "description": "An intentful representation of an app"
        }, 
        "app_def_status": {
            "title": "app Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the app."
                }, 
                "name": {
                    "type": "string", 
                    "description": "app Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the app, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/app_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for app."
                }
            }, 
            "description": "An intentful representation of a app status"
        }, 
        "app_deployment_element": {
            "title": "Deployment for Application", 
            "required": [
                "substrate_element_local_reference"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "package_element_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_reference"
                    }, 
                    "type": "array", 
                    "description": "List of references for packages"
                }, 
                "substrate_element_local_reference": {
                    "$ref": "#/definitions/app_substrate_reference"
                }
            }, 
            "description": "Deployment definition for Application"
        }, 
        "app_deployment_input": {
            "title": "Deployment definition for Application.", 
            "required": [
                "uuid", 
                "name", 
                "min_replicas", 
                "max_replicas", 
                "substrate"
            ], 
            "type": "object", 
            "properties": {
                "percent_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "service_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_input"
                    }, 
                    "type": "array", 
                    "description": "List of references for services"
                }, 
                "package_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_input"
                    }, 
                    "type": "array", 
                    "description": "List of references for the packages"
                }, 
                "max_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Maximum replicas for the deployment."
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_blueprint_deployment_reference"
                }, 
                "substrate": {
                    "$ref": "#/definitions/app_substrate_input"
                }, 
                "num_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "brownfield_instance_list": {
                    "items": {
                        "$ref": "#/definitions/brownfield_instance_input"
                    }, 
                    "type": "array", 
                    "description": "list of brownfield elements"
                }, 
                "fault_domain_scope": {
                    "x-ntnx-enum": [
                        "HOST", 
                        "CLUSTER", 
                        "AZ"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "min_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Minimum replicas for the deployment."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "type": {
                    "default": "GREENFIELD", 
                    "x-ntnx-enum": [
                        "BROWNFIELD", 
                        "GREENFIELD"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Deployment definition for Application."
        }, 
        "app_deployment_reference": {
            "title": "Reference to a app_deployment", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_deployment", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_deployment"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_deployment"
        }, 
        "app_deployment_reference_upload": {
            "title": "Reference to a app_deployment", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_deployment", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_deployment"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_deployment"
        }, 
        "app_deployment_response": {
            "title": "Deployment Definition for Application.", 
            "required": [
                "uuid", 
                "name", 
                "min_replicas", 
                "max_replicas", 
                "state", 
                "substrate_configuration", 
                "message_list", 
                "element_list", 
                "current_replicas"
            ], 
            "type": "object", 
            "properties": {
                "percent_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "element_list": {
                    "items": {
                        "$ref": "#/definitions/app_deployment_element"
                    }, 
                    "type": "array"
                }, 
                "service_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_response"
                    }, 
                    "type": "array", 
                    "description": "List of references for services"
                }, 
                "substrate_configuration": {
                    "$ref": "#/definitions/app_substrate_response"
                }, 
                "package_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_response"
                    }, 
                    "type": "array", 
                    "description": "List of references for the packages"
                }, 
                "current_replicas": {
                    "type": "integer"
                }, 
                "max_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Maximum replicas for the deployment."
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_blueprint_deployment_reference"
                }, 
                "num_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "fault_domain_scope": {
                    "x-ntnx-enum": [
                        "HOST", 
                        "CLUSTER", 
                        "AZ"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "min_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Minimum replicas for the deployment."
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for deployment"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Deployment definition for Application."
        }, 
        "app_intent_input": {
            "title": "app Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/app"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_metadata"
                }
            }, 
            "description": "An intentful representation of a app"
        }, 
        "app_intent_resource": {
            "title": "app Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/app_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/app"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a app"
        }, 
        "app_intent_response": {
            "title": "app Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/app_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/app"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a app"
        }, 
        "app_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/app_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of apps"
        }, 
        "app_list_metadata": {
            "title": "Metadata for app list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "app", 
                    "x-ntnx-enum": [
                        "app"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "app_list_metadata_output": {
            "title": "Metadata for app list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "app", 
                    "x-ntnx-enum": [
                        "app"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "app_metadata": {
            "title": "app metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when app was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "app", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "app uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the app is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when app was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the app"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "app name", 
                    "maxLength": 64
                }
            }, 
            "description": "The app kind metadata"
        }, 
        "app_package_element": {
            "title": "Package element for Application", 
            "required": [
                "name", 
                "uuid", 
                "type", 
                "state"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "SNAPSHOT", 
                        "ISO", 
                        "DEB", 
                        "RPM", 
                        "DOCKER_IMAGE", 
                        "CHEF_COOKBOOK", 
                        "PUPPET_MANIFEST", 
                        "CUSTOM", 
                        "SUBSTRATE_IMAGE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "service_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_reference"
                    }, 
                    "type": "array", 
                    "description": "References of the service."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "version": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for package"
                }, 
                "options": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Details based on type of the package."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Package definition for Application"
        }, 
        "app_package_input": {
            "title": "Package for Application", 
            "required": [
                "name", 
                "uuid", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "service_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_reference"
                    }, 
                    "type": "array", 
                    "description": "References of the service."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "version": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_package_reference"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "SNAPSHOT", 
                        "ISO", 
                        "DEB", 
                        "RPM", 
                        "DOCKER_IMAGE", 
                        "CHEF_COOKBOOK", 
                        "PUPPET_MANIFEST", 
                        "CUSTOM", 
                        "SUBSTRATE_IMAGE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "options": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Details based on type of the package."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Package definition for Application"
        }, 
        "app_package_input_upload": {
            "title": "Package for Application", 
            "required": [
                "name", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input_upload"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "service_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_reference_upload"
                    }, 
                    "type": "array", 
                    "description": "References of the service."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "version": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_package_reference_upload"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "SNAPSHOT", 
                        "ISO", 
                        "DEB", 
                        "RPM", 
                        "DOCKER_IMAGE", 
                        "CHEF_COOKBOOK", 
                        "PUPPET_MANIFEST", 
                        "CUSTOM", 
                        "SUBSTRATE_IMAGE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "options": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Details based on type of the package."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Package definition for Application"
        }, 
        "app_package_reference": {
            "title": "Reference to a app_package", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_package", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_package"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_package"
        }, 
        "app_package_reference_upload": {
            "title": "Reference to a app_package", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_package", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_package"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_package"
        }, 
        "app_package_response": {
            "title": "Package for Application", 
            "required": [
                "name", 
                "uuid", 
                "type", 
                "state"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "element_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_element"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "service_element_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_element"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_package_reference"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "SNAPSHOT", 
                        "ISO", 
                        "DEB", 
                        "RPM", 
                        "DOCKER_IMAGE", 
                        "CHEF_COOKBOOK", 
                        "PUPPET_MANIFEST", 
                        "CUSTOM", 
                        "SUBSTRATE_IMAGE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "service_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_reference"
                    }, 
                    "type": "array", 
                    "description": "References of the service."
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "version": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for package"
                }, 
                "options": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Details based on type of the package."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Package definition for Application"
        }, 
        "app_package_response_download": {
            "title": "Package for Application", 
            "required": [
                "name", 
                "uuid", 
                "type", 
                "state"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "element_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_element"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference_upload"
                }, 
                "service_element_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_element"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_package_reference_upload"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "SNAPSHOT", 
                        "ISO", 
                        "DEB", 
                        "RPM", 
                        "DOCKER_IMAGE", 
                        "CHEF_COOKBOOK", 
                        "PUPPET_MANIFEST", 
                        "CUSTOM", 
                        "SUBSTRATE_IMAGE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "service_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_reference"
                    }, 
                    "type": "array", 
                    "description": "References of the service."
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "version": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for package"
                }, 
                "options": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Details based on type of the package."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Package definition for Application"
        }, 
        "app_profile_input": {
            "title": "App profile resource", 
            "required": [
                "name", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "deployment_create_list": {
                    "items": {
                        "$ref": "#/definitions/blueprint_deployment_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "App profile resources"
        }, 
        "app_profile_input_upload": {
            "title": "App profile resource", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "deployment_create_list": {
                    "items": {
                        "$ref": "#/definitions/blueprint_deployment_input_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input_upload"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "App profile resources"
        }, 
        "app_profile_reference": {
            "title": "Reference to a app_profile", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_profile", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_profile"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_profile"
        }, 
        "app_profile_reference_upload": {
            "title": "Reference to a app_profile", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_profile", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_profile"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_profile"
        }, 
        "app_profile_response": {
            "title": "App profile resources", 
            "required": [
                "name", 
                "uuid", 
                "state", 
                "message_list", 
                "dependency_list"
            ], 
            "type": "object", 
            "properties": {
                "deployment_create_list": {
                    "items": {
                        "$ref": "#/definitions/blueprint_deployment_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": ""
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for blueprint deployment"
                }, 
                "dependency_list": {
                    "items": {
                        "$ref": "#/definitions/blueprint_dependency_list"
                    }, 
                    "type": "array"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": ""
                }
            }, 
            "description": "App profile resources"
        }, 
        "app_profile_response_download": {
            "title": "App profile resources", 
            "required": [
                "name", 
                "state", 
                "message_list", 
                "dependency_list"
            ], 
            "type": "object", 
            "properties": {
                "deployment_create_list": {
                    "items": {
                        "$ref": "#/definitions/blueprint_deployment_response_download"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": ""
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response_download"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for blueprint deployment"
                }, 
                "dependency_list": {
                    "items": {
                        "$ref": "#/definitions/blueprint_dependency_list"
                    }, 
                    "type": "array"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response_download"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": ""
                }
            }, 
            "description": "App profile resources"
        }, 
        "app_reference": {
            "title": "Reference to a app", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app"
        }, 
        "app_resources": {
            "title": "Resources for Application.", 
            "required": [
                "variable_list", 
                "deployment_list", 
                "action_list", 
                "credential_list"
            ], 
            "type": "object", 
            "properties": {
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input"
                    }, 
                    "type": "array", 
                    "description": "List of Action for Application."
                }, 
                "credential_list": {
                    "items": {
                        "$ref": "#/definitions/app_credential_input"
                    }, 
                    "type": "array", 
                    "description": "Credential list for appspec"
                }, 
                "app_blueprint_config_reference": {
                    "$ref": "#/definitions/blueprint_reference"
                }, 
                "app_blueprint_reference": {
                    "$ref": "#/definitions/blueprint_reference"
                }, 
                "app_profile_config_reference": {
                    "$ref": "#/definitions/app_profile_reference"
                }, 
                "client_attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Data needed for clients."
                }, 
                "dependency_list": {
                    "items": {
                        "$ref": "#/definitions/blueprint_dependency_list"
                    }, 
                    "type": "array", 
                    "description": "Dependencies or edges between callrunbook tasks formed by usage of macros in child tasks"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }, 
                "deployment_list": {
                    "items": {
                        "$ref": "#/definitions/app_deployment_input"
                    }, 
                    "type": "array", 
                    "description": "List of Deployment Spec for Application."
                }
            }, 
            "description": "Resources for Application."
        }, 
        "app_resources_def_status": {
            "title": "Status for Application.", 
            "required": [
                "variable_list", 
                "deployment_list", 
                "action_list", 
                "credential_list", 
                "app_blueprint_reference", 
                "app_state"
            ], 
            "type": "object", 
            "properties": {
                "app_state": {
                    "type": "string"
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of Action for Application."
                }, 
                "source_marketplace_name": {
                    "type": "string", 
                    "description": "Name of the marketplace item used to create this app"
                }, 
                "credential_list": {
                    "items": {
                        "$ref": "#/definitions/app_credential_response"
                    }, 
                    "type": "array", 
                    "description": "Credential list for appspec"
                }, 
                "app_blueprint_config_reference": {
                    "$ref": "#/definitions/blueprint_reference"
                }, 
                "app_blueprint_reference": {
                    "$ref": "#/definitions/blueprint_reference"
                }, 
                "app_profile_config_reference": {
                    "$ref": "#/definitions/app_profile_reference"
                }, 
                "source_marketplace_version": {
                    "type": "string", 
                    "description": "Version of the marketplace item used to create this app"
                }, 
                "client_attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Data needed for clients."
                }, 
                "dependency_list": {
                    "items": {
                        "$ref": "#/definitions/blueprint_dependency_list"
                    }, 
                    "type": "array", 
                    "description": "Dependencies or edges between callrunbook tasks formed by usage of macros in child tasks"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }, 
                "deployment_list": {
                    "items": {
                        "$ref": "#/definitions/app_deployment_response"
                    }, 
                    "type": "array", 
                    "description": "List of Deployment Spec for Application."
                }
            }, 
            "description": "Status for Application."
        }, 
        "app_runbook_input": {
            "title": "Runbook for Application", 
            "required": [
                "name", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "task_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "main_task_local_reference": {
                    "$ref": "#/definitions/app_task_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Runbook definition for Application"
        }, 
        "app_runbook_input_upload": {
            "title": "Runbook for Application", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "task_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_input_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "main_task_local_reference": {
                    "$ref": "#/definitions/app_task_reference_upload"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Runbook definition for Application"
        }, 
        "app_runbook_response": {
            "title": "Runbook for Application", 
            "required": [
                "name", 
                "uuid", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "task_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list"
                }, 
                "main_task_local_reference": {
                    "$ref": "#/definitions/app_task_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Runbook definition for Application"
        }, 
        "app_runbook_response_download": {
            "title": "Runbook for Application", 
            "required": [
                "name", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "task_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_response_download"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response_download"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list"
                }, 
                "main_task_local_reference": {
                    "$ref": "#/definitions/app_task_reference_upload"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Runbook definition for Application"
        }, 
        "app_runlog_archive_list_response": {
            "title": "App Archive List Response", 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/app_runlog_archive_response"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "App Archive List Response"
        }, 
        "app_runlog_archive_response": {
            "title": "App Archive Response", 
            "type": "object", 
            "properties": {
                "is_available": {
                    "type": "boolean", 
                    "description": "Archive available flag."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Archive file name."
                }, 
                "start_time": {
                    "type": "string", 
                    "description": "From time for archive.", 
                    "format": "date-time"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "Creation time of archive.", 
                    "format": "date-time"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Archive file uuid.", 
                    "format": "UUID"
                }, 
                "end_time": {
                    "type": "string", 
                    "description": "Till time for archive.", 
                    "format": "date-time"
                }
            }, 
            "description": "App Archive Response"
        }, 
        "app_runlog_list": {
            "title": "runlog entity list", 
            "required": [
                "metadata", 
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/app_runlog_response"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_runlog_list_metadata"
                }
            }, 
            "description": "Runlog entity list of the app"
        }, 
        "app_runlog_list_metadata": {
            "title": "Metadata for app_runlog list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "app_runlog", 
                    "x-ntnx-enum": [
                        "app_runlog"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "app_runlog_list_metadata_output": {
            "title": "Metadata for app_runlog list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "app_runlog", 
                    "x-ntnx-enum": [
                        "app_runlog"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "app_runlog_metadata": {
            "title": "app_runlog metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when app_runlog was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "app_runlog", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_runlog"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "app_runlog uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the app_runlog is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when app_runlog was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the app_runlog"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "app_runlog name", 
                    "maxLength": 64
                }
            }, 
            "description": "The app_runlog kind metadata"
        }, 
        "app_runlog_output": {
            "title": "Response of app runlog result output", 
            "type": "object", 
            "properties": {
                "trl_id": {
                    "type": "string"
                }, 
                "output": {
                    "type": "string"
                }
            }, 
            "description": "Response of app runlog response output"
        }, 
        "app_runlog_output_response": {
            "title": "Response containing the last 10 lines of output", 
            "required": [
                "api_version", 
                "metadata", 
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/app_runlog_output_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_runlog_metadata"
                }
            }, 
            "description": "Response containing the last 10 lines of output"
        }, 
        "app_runlog_output_status": {
            "title": "Runlog output", 
            "required": [
                "output_list"
            ], 
            "type": "object", 
            "properties": {
                "output_list": {
                    "items": {
                        "$ref": "#/definitions/app_runlog_output"
                    }, 
                    "type": "array", 
                    "description": "application runlog resources"
                }
            }, 
            "description": "Runlog output"
        }, 
        "app_runlog_reference": {
            "title": "Reference to a app_runlog", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_runlog", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_runlog"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_runlog"
        }, 
        "app_runlog_resources": {
            "title": "Runlog resources", 
            "required": [
                "type", 
                "is_critical", 
                "reason_list"
            ], 
            "type": "object", 
            "properties": {
                "action_reference": {
                    "description": "action reference", 
                    "$ref": "#/definitions/entity_reference"
                }, 
                "element_type": {
                    "x-ntnx-enum": [
                        "Substrate", 
                        "Package", 
                        "Service", 
                        "Deployment", 
                        "Application", 
                        "LoadBalancer", 
                        "SubstrateElement", 
                        "PackageElement", 
                        "ServiceElement", 
                        "DeploymentElement"
                    ], 
                    "type": "string", 
                    "description": "type of element this runlog refers to."
                }, 
                "task_reference": {
                    "description": "task reference", 
                    "$ref": "#/definitions/app_task_reference"
                }, 
                "userdata_reference": {
                    "description": "user data reference", 
                    "$ref": "#/definitions/entity_reference"
                }, 
                "root_reference": {
                    "description": "root reference", 
                    "$ref": "#/definitions/app_runlog_reference"
                }, 
                "call_runbook_reference": {
                    "description": "call runbook task reference", 
                    "$ref": "#/definitions/app_task_reference"
                }, 
                "is_critical": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "critical or non-critical runlog"
                }, 
                "parent_reference": {
                    "description": "parent reference", 
                    "$ref": "#/definitions/app_runlog_reference"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "TaskRunlog", 
                        "RunbookRunlog", 
                        "ActionRunlog", 
                        "PolicyRunlog"
                    ], 
                    "type": "string", 
                    "description": "type of runlog"
                }, 
                "is_runlog_archived": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "Describe if action runlog is archived"
                }, 
                "reason_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "reasons of failure if any"
                }, 
                "application_reference": {
                    "description": "application reference", 
                    "$ref": "#/definitions/app_reference"
                }, 
                "element_reference": {
                    "$ref": "#/definitions/entity_reference"
                }
            }, 
            "description": "Runlog resources"
        }, 
        "app_runlog_response": {
            "title": "Response containing the current state of the runlog", 
            "required": [
                "api_version", 
                "metadata", 
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/app_runlog_resources"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_runlog_metadata"
                }
            }, 
            "description": "Response containing the current state of the runlog"
        }, 
        "app_runlog_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_runlog", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_runlog"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "app_service_element": {
            "title": "Service element for Application", 
            "required": [
                "name", 
                "uuid", 
                "state", 
                "action_list", 
                "variable_list"
            ], 
            "type": "object", 
            "properties": {
                "port_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_port"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "singleton": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "If True, then this service can only be in a deployment with replica 1\n"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "depends_on_list": {
                    "items": {
                        "$ref": "#/definitions/entity_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "tier": {
                    "type": "string", 
                    "description": "Service tier name"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for service"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Service definition for Application"
        }, 
        "app_service_input": {
            "title": "Service for Application", 
            "required": [
                "name", 
                "uuid", 
                "variable_list", 
                "action_list"
            ], 
            "type": "object", 
            "properties": {
                "port_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_port"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "singleton": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "If True, then this service can only be in a deployment with replica 1\n"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input"
                    }, 
                    "type": "array", 
                    "description": "List of references to service action\n"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "tier": {
                    "type": "string", 
                    "description": "Service tier name"
                }, 
                "depends_on_list": {
                    "items": {
                        "$ref": "#/definitions/entity_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_service_reference"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Service definition for Application"
        }, 
        "app_service_input_upload": {
            "title": "Service for Application", 
            "required": [
                "name", 
                "variable_list", 
                "action_list"
            ], 
            "type": "object", 
            "properties": {
                "port_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_port"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "singleton": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "If True, then this service can only be in a deployment with replica 1\n"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input_upload"
                    }, 
                    "type": "array", 
                    "description": "List of references to service action\n"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "tier": {
                    "type": "string", 
                    "description": "Service tier name"
                }, 
                "depends_on_list": {
                    "items": {
                        "$ref": "#/definitions/entity_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_service_reference_upload"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Service definition for Application"
        }, 
        "app_service_port": {
            "title": "Port for Application Service.", 
            "required": [
                "target_port", 
                "protocol"
            ], 
            "type": "object", 
            "properties": {
                "target_port": {
                    "type": "string", 
                    "description": ""
                }, 
                "protocol": {
                    "type": "string", 
                    "description": ""
                }, 
                "endpoint_name": {
                    "type": "string", 
                    "description": ""
                }
            }, 
            "description": "Port for Application Service."
        }, 
        "app_service_reference": {
            "title": "Reference to a app_service", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_service", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_service"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_service"
        }, 
        "app_service_reference_upload": {
            "title": "Reference to a app_service", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_service", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_service"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_service"
        }, 
        "app_service_response": {
            "title": "Service for Application", 
            "required": [
                "name", 
                "uuid", 
                "state", 
                "action_list", 
                "variable_list"
            ], 
            "type": "object", 
            "properties": {
                "port_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_port"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "singleton": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "If True, then this service can only be in a deployment with replica 1\n"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array"
                }, 
                "element_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_element"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "tier": {
                    "type": "string", 
                    "description": "Service tier name"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "depends_on_list": {
                    "items": {
                        "$ref": "#/definitions/entity_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_service_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for service"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Service definition for Application"
        }, 
        "app_service_response_download": {
            "title": "Service for Application", 
            "required": [
                "name", 
                "uuid", 
                "state", 
                "action_list", 
                "variable_list"
            ], 
            "type": "object", 
            "properties": {
                "port_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_port"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "singleton": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "If True, then this service can only be in a deployment with replica 1\n"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array"
                }, 
                "element_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_element"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "tier": {
                    "type": "string", 
                    "description": "Service tier name"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "depends_on_list": {
                    "items": {
                        "$ref": "#/definitions/entity_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_service_reference_upload"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for service"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Service definition for Application"
        }, 
        "app_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "app_substrate_element": {
            "title": "Substrate element for Application", 
            "required": [
                "uuid", 
                "name", 
                "type", 
                "variable_list", 
                "action_list", 
                "state"
            ], 
            "type": "object", 
            "properties": {
                "instance_name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "readiness_probe": {
                    "$ref": "#/definitions/app_substrate_readiness_probe"
                }, 
                "create_spec": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Spec of the substrate"
                }, 
                "instance_power_state": {
                    "type": "string", 
                    "description": ""
                }, 
                "platform_data": {
                    "type": "string", 
                    "description": ""
                }, 
                "instance_address": {
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "VM", 
                        "AHV_VM", 
                        "AWS_VM", 
                        "GCP_VM", 
                        "AZURE_VM", 
                        "EXISTING_VM", 
                        "BARE_METAL", 
                        "GENERIC", 
                        "VMWARE_VM"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "instance_id": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "os_type": {
                    "type": "string", 
                    "description": ""
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }
            }, 
            "description": "Substrate element definition for Application"
        }, 
        "app_substrate_input": {
            "title": "Substrate definition", 
            "required": [
                "uuid", 
                "name", 
                "type", 
                "variable_list", 
                "action_list"
            ], 
            "type": "object", 
            "properties": {
                "instance_name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "readiness_probe": {
                    "$ref": "#/definitions/app_substrate_readiness_probe"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_substrate_reference"
                }, 
                "create_spec": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Spec of the substrate"
                }, 
                "instance_power_state": {
                    "type": "string", 
                    "description": ""
                }, 
                "platform_data": {
                    "type": "string", 
                    "description": ""
                }, 
                "instance_address": {
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "instance_id": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "os_type": {
                    "type": "string", 
                    "description": ""
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "VM", 
                        "AHV_VM", 
                        "AWS_VM", 
                        "GCP_VM", 
                        "AZURE_VM", 
                        "EXISTING_VM", 
                        "BARE_METAL", 
                        "GENERIC", 
                        "VMWARE_VM"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }
            }, 
            "description": "Substrate definition"
        }, 
        "app_substrate_input_upload": {
            "title": "Substrate definition", 
            "required": [
                "name", 
                "type", 
                "variable_list", 
                "action_list"
            ], 
            "type": "object", 
            "properties": {
                "instance_name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input_upload"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "readiness_probe": {
                    "$ref": "#/definitions/app_substrate_readiness_probe_upload"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_substrate_reference_upload"
                }, 
                "create_spec": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Spec of the substrate"
                }, 
                "instance_power_state": {
                    "type": "string", 
                    "description": ""
                }, 
                "platform_data": {
                    "type": "string", 
                    "description": ""
                }, 
                "instance_address": {
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "instance_id": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "os_type": {
                    "type": "string", 
                    "description": ""
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "VM", 
                        "AHV_VM", 
                        "AWS_VM", 
                        "GCP_VM", 
                        "AZURE_VM", 
                        "EXISTING_VM", 
                        "BARE_METAL", 
                        "GENERIC", 
                        "VMWARE_VM"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input_upload"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }
            }, 
            "description": "Substrate definition"
        }, 
        "app_substrate_readiness_probe": {
            "title": "Readiness probe for substrate", 
            "type": "object", 
            "properties": {
                "connection_type": {
                    "x-ntnx-enum": [
                        "SSH", 
                        "POWERSHELL"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": ""
                }, 
                "address": {
                    "type": "string", 
                    "description": ""
                }, 
                "login_credential_local_reference": {
                    "$ref": "#/definitions/app_credential_reference"
                }, 
                "delay_secs": {
                    "type": "string", 
                    "description": "Delay after substrate provision."
                }, 
                "disable_readiness_probe": {
                    "type": "boolean", 
                    "description": ""
                }, 
                "connection_port": {
                    "default": 22, 
                    "type": "integer", 
                    "description": ""
                }
            }, 
            "description": "Readiness probe for substrate"
        }, 
        "app_substrate_readiness_probe_upload": {
            "title": "Readiness probe for substrate", 
            "type": "object", 
            "properties": {
                "connection_type": {
                    "x-ntnx-enum": [
                        "SSH", 
                        "POWERSHELL"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": ""
                }, 
                "address": {
                    "type": "string", 
                    "description": ""
                }, 
                "login_credential_local_reference": {
                    "$ref": "#/definitions/app_credential_reference_upload"
                }, 
                "delay_secs": {
                    "type": "string", 
                    "description": "Delay after substrate provision."
                }, 
                "disable_readiness_probe": {
                    "type": "boolean", 
                    "description": ""
                }, 
                "connection_port": {
                    "default": 22, 
                    "type": "integer", 
                    "description": ""
                }
            }, 
            "description": "Readiness probe for substrate"
        }, 
        "app_substrate_reference": {
            "title": "Reference to a app_substrate", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_substrate", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_substrate"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_substrate"
        }, 
        "app_substrate_reference_upload": {
            "title": "Reference to a app_substrate", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_substrate", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_substrate"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_substrate"
        }, 
        "app_substrate_response": {
            "title": "Deployment Sustrate Definition for Application.", 
            "required": [
                "uuid", 
                "name", 
                "type", 
                "variable_list", 
                "action_list", 
                "state"
            ], 
            "type": "object", 
            "properties": {
                "instance_name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "element_list": {
                    "items": {
                        "$ref": "#/definitions/app_substrate_element"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference"
                }, 
                "readiness_probe": {
                    "$ref": "#/definitions/app_substrate_readiness_probe"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_substrate_reference"
                }, 
                "create_spec": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Spec of the substrate"
                }, 
                "instance_power_state": {
                    "type": "string", 
                    "description": ""
                }, 
                "platform_data": {
                    "type": "string", 
                    "description": ""
                }, 
                "instance_address": {
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "VM", 
                        "AHV_VM", 
                        "AWS_VM", 
                        "GCP_VM", 
                        "AZURE_VM", 
                        "EXISTING_VM", 
                        "BARE_METAL", 
                        "GENERIC", 
                        "VMWARE_VM"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "instance_id": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "os_type": {
                    "type": "string", 
                    "description": ""
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }
            }, 
            "description": "Substrate info for deployment"
        }, 
        "app_substrate_response_download": {
            "title": "Deployment Sustrate Definition for Application.", 
            "required": [
                "uuid", 
                "name", 
                "type", 
                "variable_list", 
                "action_list", 
                "state"
            ], 
            "type": "object", 
            "properties": {
                "instance_name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "element_list": {
                    "items": {
                        "$ref": "#/definitions/app_substrate_element"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "account_reference": {
                    "$ref": "#/definitions/account_reference_upload"
                }, 
                "readiness_probe": {
                    "$ref": "#/definitions/app_substrate_readiness_probe"
                }, 
                "config_reference": {
                    "$ref": "#/definitions/app_substrate_reference_upload"
                }, 
                "create_spec": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Spec of the substrate"
                }, 
                "instance_power_state": {
                    "type": "string", 
                    "description": ""
                }, 
                "platform_data": {
                    "type": "string", 
                    "description": ""
                }, 
                "instance_address": {
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "VM", 
                        "AHV_VM", 
                        "AWS_VM", 
                        "GCP_VM", 
                        "AZURE_VM", 
                        "EXISTING_VM", 
                        "BARE_METAL", 
                        "GENERIC", 
                        "VMWARE_VM"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "instance_id": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "os_type": {
                    "type": "string", 
                    "description": ""
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }
            }, 
            "description": "Substrate info for deployment"
        }, 
        "app_task": {
            "title": "app_task Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for app_task.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/app_task_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "app_task Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a app_task spec"
        }, 
        "app_task_def_status": {
            "title": "app_task Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the app_task."
                }, 
                "name": {
                    "type": "string", 
                    "description": "app_task Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the app_task, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/app_task_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for app_task."
                }
            }, 
            "description": "An intentful representation of a app_task status"
        }, 
        "app_task_input": {
            "title": "Task for Application", 
            "required": [
                "name", 
                "uuid", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "target_any_local_reference": {
                    "$ref": "#/definitions/entity_reference"
                }, 
                "retries": {
                    "type": "string", 
                    "description": "Number of retries for the task."
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "child_tasks_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Task attrs for application of type object."
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": "task timeout."
                }, 
                "type": {
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Task definition for Application."
        }, 
        "app_task_input_upload": {
            "title": "Task for Application", 
            "required": [
                "name", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "target_any_local_reference": {
                    "$ref": "#/definitions/entity_reference"
                }, 
                "retries": {
                    "type": "string", 
                    "description": "Number of retries for the task."
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "child_tasks_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_reference_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Task attrs for application of type object."
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": "task timeout."
                }, 
                "type": {
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Task definition for Application."
        }, 
        "app_task_intent_input": {
            "title": "app_task Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/app_task"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_task_metadata"
                }
            }, 
            "description": "An intentful representation of a app_task"
        }, 
        "app_task_intent_resource": {
            "title": "app_task Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/app_task_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/app_task"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_task_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a app_task"
        }, 
        "app_task_intent_response": {
            "title": "app_task Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/app_task_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/app_task"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_task_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a app_task"
        }, 
        "app_task_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/app_task_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_task_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of app_tasks"
        }, 
        "app_task_list_metadata": {
            "title": "Metadata for app_task list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "app_task", 
                    "x-ntnx-enum": [
                        "app_task"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "app_task_list_metadata_output": {
            "title": "Metadata for app_task list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "app_task", 
                    "x-ntnx-enum": [
                        "app_task"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "app_task_metadata": {
            "title": "app_task metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when app_task was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "app_task", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_task"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "app_task uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the app_task is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when app_task was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the app_task"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "app_task name", 
                    "maxLength": 64
                }
            }, 
            "description": "The app_task kind metadata"
        }, 
        "app_task_reference": {
            "title": "Reference to a app_task", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_task", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_task"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_task"
        }, 
        "app_task_reference_upload": {
            "title": "Reference to a app_task", 
            "required": [
                "kind", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_task", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_task"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a app_task"
        }, 
        "app_task_resources": {
            "title": "Library task resources", 
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "target_any_local_reference": {
                    "$ref": "#/definitions/entity_reference"
                }, 
                "retries": {
                    "type": "string", 
                    "description": "Number of retries for the task."
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Task attrs for application of type object."
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": "task timeout."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "type": {
                    "type": "string", 
                    "description": ""
                }, 
                "child_tasks_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Libraty task resources definition."
        }, 
        "app_task_resources_def_status": {
            "title": "Library task resources", 
            "required": [
                "type", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "target_any_local_reference": {
                    "$ref": "#/definitions/entity_reference"
                }, 
                "retries": {
                    "type": "string", 
                    "description": "Number of retries for the task."
                }, 
                "type": {
                    "type": "string", 
                    "description": ""
                }, 
                "project_reference_list": {
                    "items": {
                        "$ref": "#/definitions/project_reference"
                    }, 
                    "type": "array", 
                    "description": "The projects this task has been assigned to"
                }, 
                "child_tasks_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Task attrs for application of type object."
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": "task timeout."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Libraty task resources definition."
        }, 
        "app_task_response": {
            "title": "Task for Application", 
            "required": [
                "name", 
                "uuid", 
                "type", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "target_any_local_reference": {
                    "$ref": "#/definitions/entity_reference"
                }, 
                "retries": {
                    "type": "string", 
                    "description": "Number of retries for the task."
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "child_tasks_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Task attrs for application of type object."
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": "task timeout."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Task definition for Application."
        }, 
        "app_task_response_download": {
            "title": "Task for Application", 
            "required": [
                "name", 
                "type", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "target_any_local_reference": {
                    "$ref": "#/definitions/entity_reference"
                }, 
                "retries": {
                    "type": "string", 
                    "description": "Number of retries for the task."
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "child_tasks_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_reference_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Task attrs for application of type object."
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": "task timeout."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response_download"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 128
                }
            }, 
            "description": "Task definition for Application."
        }, 
        "app_task_share": {
            "title": "App task share kind", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/app_task_share_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "App task share kind"
        }, 
        "app_task_share_intent_input": {
            "title": "App task Intent Entity", 
            "required": [
                "api_version", 
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/app_task_share"
                }, 
                "api_version": {
                    "type": "string"
                }, 
                "metadata": {
                    "$ref": "#/definitions/app_task_metadata"
                }
            }, 
            "description": "An intentful representation of a App task"
        }, 
        "app_task_share_resources": {
            "title": "Library task resources", 
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "target_any_local_reference": {
                    "$ref": "#/definitions/entity_reference"
                }, 
                "retries": {
                    "type": "string", 
                    "description": "Number of retries for the task."
                }, 
                "project_reference_list": {
                    "items": {
                        "$ref": "#/definitions/project_reference"
                    }, 
                    "type": "array", 
                    "description": "The projects this task has been assigned to"
                }, 
                "child_tasks_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_task_reference"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Task attrs for application of type object."
                }, 
                "timeout_secs": {
                    "type": "string", 
                    "description": "task timeout."
                }, 
                "type": {
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Libraty task resources definition."
        }, 
        "app_task_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "app_task", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "app_task"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "app_variable_input": {
            "title": "Variable definition for application.", 
            "required": [
                "name", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "val_type": {
                    "x-ntnx-enum": [
                        "STRING", 
                        "INT", 
                        "LIST", 
                        "DICT"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "value": {
                    "type": "string", 
                    "description": ""
                }, 
                "label": {
                    "type": "string", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "SECRET", 
                        "EXTERNAL_STORE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Variable definition for application."
        }, 
        "app_variable_input_upload": {
            "title": "Variable definition for application.", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "val_type": {
                    "x-ntnx-enum": [
                        "STRING", 
                        "INT", 
                        "LIST", 
                        "DICT"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "value": {
                    "type": "string", 
                    "description": ""
                }, 
                "label": {
                    "type": "string", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "SECRET", 
                        "EXTERNAL_STORE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Variable definition for application."
        }, 
        "app_variable_response": {
            "title": "Variable definition for application.", 
            "required": [
                "name", 
                "uuid", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "val_type": {
                    "x-ntnx-enum": [
                        "STRING", 
                        "INT", 
                        "LIST", 
                        "DICT"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "SECRET", 
                        "EXTERNAL_STORE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "value": {
                    "type": "string", 
                    "description": ""
                }, 
                "label": {
                    "type": "string", 
                    "description": ""
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for variable"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Variable definition for application."
        }, 
        "app_variable_response_download": {
            "title": "Variable definition for application.", 
            "required": [
                "name", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "val_type": {
                    "x-ntnx-enum": [
                        "STRING", 
                        "INT", 
                        "LIST", 
                        "DICT"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "SECRET", 
                        "EXTERNAL_STORE"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "value": {
                    "type": "string", 
                    "description": ""
                }, 
                "label": {
                    "type": "string", 
                    "description": ""
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for variable"
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Variable definition for application."
        }, 
        "asn": {
            "minimum": 0, 
            "description": "Autonomous system number", 
            "format": "uint32", 
            "title": "ASN", 
            "type": "integer", 
            "maximum": 4294967294
        }, 
        "attachment_reference_input": {
            "description": "Attached iSCSI initiators.", 
            "title": "Attached iSCSI initiators", 
            "type": "object", 
            "properties": {
                "iscsi_initiator_network_id": {
                    "type": "string", 
                    "description": "Ip address of the external client."
                }, 
                "client_secret": {
                    "type": "string", 
                    "description": "Client secret for CHAP authentication."
                }, 
                "vm_reference": {
                    "$ref": "#/definitions/vm_reference"
                }, 
                "iscsi_initiator_name": {
                    "type": "string", 
                    "description": "Name of the iSCSI initiator of the workload outside Nutanix cluster.\n", 
                    "maxLength": 64
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "vm_reference"
                    ]
                }, 
                {
                    "required": [
                        "iscsi_initiator_name"
                    ]
                }, 
                {
                    "required": [
                        "iscsi_initiator_network_id"
                    ]
                }
            ]
        }, 
        "attachment_reference_output": {
            "description": "Attached iSCSI initiators.", 
            "title": "Attached iSCSI initiators", 
            "type": "object", 
            "properties": {
                "iscsi_initiator_network_id": {
                    "type": "string", 
                    "description": "IPv4 address of the external client.", 
                    "format": "string"
                }, 
                "enabled_authentications": {
                    "x-ntnx-enum": [
                        "CHAP", 
                        "NONE"
                    ], 
                    "type": "string", 
                    "description": "Which authentication is enabled for client."
                }, 
                "vm_reference": {
                    "$ref": "#/definitions/vm_reference"
                }, 
                "iscsi_initiator_name": {
                    "type": "string", 
                    "description": "Name of the iSCSI initiator of the workload outside Nutanix cluster.\n"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "vm_reference"
                    ]
                }, 
                {
                    "required": [
                        "iscsi_initiator_name"
                    ]
                }, 
                {
                    "required": [
                        "iscsi_initiator_network_id"
                    ]
                }
            ]
        }, 
        "attribute": {
            "title": "Directory service search attributes response", 
            "type": "object", 
            "properties": {
                "value_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Value of the attribute."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the attribute."
                }
            }, 
            "description": "The attributes for the directory service."
        }, 
        "auto_completion": {
            "title": "Auto Completion Definition", 
            "type": "object", 
            "properties": {
                "search_type": {
                    "x-ntnx-enum": [
                        "SEARCH_FOR", 
                        "STAY_ON"
                    ], 
                    "type": "string", 
                    "description": "Search type for the autocompletion.\n"
                }, 
                "complete_query": {
                    "type": "string", 
                    "description": "The complete query corresponding the the auto-completion."
                }, 
                "query_term_list": {
                    "items": {
                        "$ref": "#/definitions/query_term"
                    }, 
                    "type": "array", 
                    "description": "Structured representation that infers query intent unambiguously. Client will echo this information back to the backend. Essentially, it is like a search result link. The list has an item corresponding to every query term. One user query is nothing but a collection of multiple query terms.\n"
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Enity type or focus for the autocompletion."
                }
            }, 
            "description": "Auto completion object definition."
        }, 
        "availability_zone": {
            "title": "Availability Zone creation/modification spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Availability Zone Name"
                }, 
                "resources": {
                    "$ref": "#/definitions/availability_zone_resources_spec"
                }
            }, 
            "description": "Availability Zone creation/modification spec"
        }, 
        "availability_zone_def_status": {
            "title": "Availability Zone creation/modification spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Availability Zone Name"
                }, 
                "resources": {
                    "$ref": "#/definitions/availability_zone_resources"
                }
            }, 
            "description": "Availability Zone creation/modification spec"
        }, 
        "availability_zone_information": {
            "title": "Availability Zone information", 
            "required": [
                "availability_zone_url"
            ], 
            "type": "object", 
            "properties": {
                "availability_zone_url": {
                    "type": "string", 
                    "description": "URL of the Availability Zone.\n"
                }
            }, 
            "description": "Availability Zone information.\n"
        }, 
        "availability_zone_intent_input": {
            "title": "availability_zone Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/availability_zone"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/availability_zone_metadata"
                }
            }, 
            "description": "An intentful representation of a availability_zone"
        }, 
        "availability_zone_intent_resource": {
            "title": "availability_zone Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/availability_zone_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/availability_zone"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/availability_zone_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a availability_zone"
        }, 
        "availability_zone_intent_response": {
            "title": "availability_zone Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/availability_zone_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/availability_zone"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/availability_zone_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a availability_zone"
        }, 
        "availability_zone_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/availability_zone_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/availability_zone_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of availability_zones"
        }, 
        "availability_zone_list_metadata": {
            "title": "Metadata for availability_zone list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "availability_zone", 
                    "x-ntnx-enum": [
                        "availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "availability_zone_list_metadata_output": {
            "title": "Metadata for availability_zone list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "availability_zone", 
                    "x-ntnx-enum": [
                        "availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "availability_zone_metadata": {
            "title": "availability_zone metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when availability_zone was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "availability_zone", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "availability_zone"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "availability_zone uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the availability_zone is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when availability_zone was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the availability_zone"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "availability_zone name", 
                    "maxLength": 64
                }
            }, 
            "description": "The availability_zone kind metadata"
        }, 
        "availability_zone_reference": {
            "title": "Reference to a availability_zone", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "availability_zone", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "availability_zone"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a availability_zone"
        }, 
        "availability_zone_resources": {
            "title": "Availability Zone resources", 
            "required": [
                "management_plane_type"
            ], 
            "type": "object", 
            "properties": {
                "management_url": {
                    "type": "string", 
                    "description": "Identifier of the management plane. This could be the URL of the\nPC or the FQDN of Xi portal.\n"
                }, 
                "region": {
                    "type": "string", 
                    "description": "Cloud region where the data will be replicated to. Based on the\ncloud provider type the available list of regions will differ.\n"
                }, 
                "management_plane_type": {
                    "x-ntnx-enum": [
                        "PC", 
                        "Xi", 
                        "Local"
                    ], 
                    "type": "string", 
                    "description": "This defines the type of management entity. Its value can be Xi,\nPC, or Local. Local AZs are auto-created and cannot be deleted.\nHow to talk to management entity will be decided based on the type\nof management plane.\n"
                }, 
                "credentials": {
                    "type": "object", 
                    "description": "Credentials required to connect to a specific management plane.\n", 
                    "properties": {
                        "pc": {
                            "required": [
                                "remote_connection_reference"
                            ], 
                            "type": "object", 
                            "description": "Credentials for connecting to Prism Central.", 
                            "properties": {
                                "remote_connection_reference": {
                                    "description": "Reference to the remote connection entity for PC\ncommunication.\n", 
                                    "$ref": "#/definitions/remote_connection_reference"
                                }
                            }
                        }
                    }
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name. It is mainly used by user interface to show the\nuser-friendly name of the availability zone. If unset, default value\nwill be used.\n"
                }
            }, 
            "description": "Availability Zone resources"
        }, 
        "availability_zone_resources_spec": {
            "title": "Availability Zone resources", 
            "required": [
                "management_plane_type"
            ], 
            "type": "object", 
            "properties": {
                "management_url": {
                    "type": "string", 
                    "description": "Identifier of the management plane. This could be the URL of the\nPC or the FQDN of Xi portal.\n"
                }, 
                "region": {
                    "type": "string", 
                    "description": "Cloud region where the data will be replicated to. Based on the\ncloud provider type the available list of regions will differ.\n"
                }, 
                "management_plane_type": {
                    "x-ntnx-enum": [
                        "PC", 
                        "Xi", 
                        "Local"
                    ], 
                    "type": "string", 
                    "description": "This defines the type of management entity. Its value can be Xi,\nPC, or Local. Local AZs are auto-created and cannot be deleted.\nHow to talk to management entity will be decided based on the type\nof management plane.\n"
                }, 
                "credentials": {
                    "type": "object", 
                    "description": "Credentials required to connect to a specific management plane.\n", 
                    "properties": {
                        "pc": {
                            "required": [
                                "remote_connection_reference"
                            ], 
                            "type": "object", 
                            "description": "Credentials for connecting to Prism Central.", 
                            "properties": {
                                "remote_connection_reference": {
                                    "description": "Reference to the remote connection entity for PC\ncommunication.\n", 
                                    "$ref": "#/definitions/remote_connection_reference"
                                }
                            }
                        }
                    }
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "Display name. It is mainly used by user interface to show the\nuser-friendly name of the availability zone. If unset, default value\nwill be used.\n", 
                    "maxLength": 64
                }
            }, 
            "description": "Availability Zone resources"
        }, 
        "availability_zone_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "availability_zone", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "availability_zone"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_availability_zone_def_status": {
            "title": "aws_availability_zone resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_availability_zone name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_availability_zone_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_availability_zone."
                }
            }, 
            "description": "aws_availability_zone resources status"
        }, 
        "aws_availability_zone_intent_resource": {
            "title": "aws_availability_zone", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_availability_zone_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_availability_zone_metadata"
                }
            }, 
            "description": "aws_availability_zone entity"
        }, 
        "aws_availability_zone_list_intent_response": {
            "title": "aws_availability_zone entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_availability_zone_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_availability_zone_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_availability_zone_list_metadata": {
            "title": "Metadata for aws_availability_zone list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_availability_zone", 
                    "x-ntnx-enum": [
                        "aws_availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_availability_zone_list_metadata_output": {
            "title": "Metadata for aws_availability_zone list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_availability_zone", 
                    "x-ntnx-enum": [
                        "aws_availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_availability_zone_metadata": {
            "title": "aws_availability_zone metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_availability_zone was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_availability_zone", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_availability_zone"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_availability_zone uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_availability_zone is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_availability_zone was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_availability_zone"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_availability_zone name"
                }
            }, 
            "description": "The aws_availability_zone kind metadata"
        }, 
        "aws_availability_zone_resources_def_status": {
            "title": "aws_availability_zone resources", 
            "type": "object", 
            "properties": {
                "region": {
                    "type": "string", 
                    "description": "Name of the region the zone belongs to."
                }, 
                "state": {
                    "x-ntnx-enum": [
                        "AVAILABLE", 
                        "INFORMATION", 
                        "IMPAIRED", 
                        "UNAVAILABLE"
                    ], 
                    "type": "string", 
                    "description": "The state of the availability zone."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the AWS availability zone."
                }
            }, 
            "description": "aws_availability_zone resources"
        }, 
        "aws_availability_zone_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_availability_zone", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_availability_zone"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_block_device_map": {
            "title": "AWS Block Device Map", 
            "type": "object", 
            "properties": {
                "data_disk_list": {
                    "items": {
                        "$ref": "#/definitions/aws_instance_disk"
                    }, 
                    "type": "array", 
                    "description": "Data disks of the instance."
                }, 
                "root_disk": {
                    "description": "Root disk of the instance.", 
                    "$ref": "#/definitions/aws_instance_disk"
                }
            }, 
            "description": "Describes the EBS Volumes associated."
        }, 
        "aws_block_device_map_output_status": {
            "title": "AWS Block Device Map Output Status", 
            "type": "object", 
            "properties": {
                "data_disk_list": {
                    "items": {
                        "$ref": "#/definitions/aws_instance_disk_output_status"
                    }, 
                    "type": "array", 
                    "description": "Data disks of the instance."
                }, 
                "root_disk": {
                    "description": "Root disk of the instance.", 
                    "$ref": "#/definitions/aws_instance_disk_output_status"
                }
            }, 
            "description": "Describes the EBS Volumes associated."
        }, 
        "aws_credentials": {
            "title": "AWS Credentials", 
            "required": [
                "access_key", 
                "secret_key"
            ], 
            "type": "object", 
            "properties": {
                "access_key": {
                    "type": "string"
                }, 
                "secret_key": {
                    "type": "string"
                }
            }, 
            "description": "Credentials to access AWS"
        }, 
        "aws_elastic_ip_def_status": {
            "title": "aws_elastic_ip resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_elastic_ip name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_elastic_ip_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_elastic_ip."
                }
            }, 
            "description": "aws_elastic_ip resources status"
        }, 
        "aws_elastic_ip_intent_resource": {
            "title": "aws_elastic_ip", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_elastic_ip_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_elastic_ip_metadata"
                }
            }, 
            "description": "aws_elastic_ip entity"
        }, 
        "aws_elastic_ip_list_intent_response": {
            "title": "aws_elastic_ip entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_elastic_ip_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_elastic_ip_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_elastic_ip_list_metadata": {
            "title": "Metadata for aws_elastic_ip list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_elastic_ip", 
                    "x-ntnx-enum": [
                        "aws_elastic_ip"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_elastic_ip_list_metadata_output": {
            "title": "Metadata for aws_elastic_ip list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_elastic_ip", 
                    "x-ntnx-enum": [
                        "aws_elastic_ip"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_elastic_ip_metadata": {
            "title": "aws_elastic_ip metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_elastic_ip was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_elastic_ip", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_elastic_ip"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_elastic_ip uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_elastic_ip is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_elastic_ip was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_elastic_ip"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_elastic_ip name"
                }
            }, 
            "description": "The aws_elastic_ip kind metadata"
        }, 
        "aws_elastic_ip_resources_def_status": {
            "title": "AWS elastic IP creation/modification status", 
            "type": "object", 
            "properties": {
                "domain": {
                    "x-ntnx-enum": [
                        "STANDARD", 
                        "VPC"
                    ], 
                    "type": "string", 
                    "description": "Indicates whether the address is an EC2 or VPC address."
                }, 
                "public_ip_address": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The Elastic IP address"
                }, 
                "allocation_id": {
                    "type": "string", 
                    "description": "The allocation AWS ID for the address (only for VPC)"
                }, 
                "instance_id": {
                    "pattern": "^i-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the instance the address is associated with.\n"
                }, 
                "association_id": {
                    "type": "string", 
                    "description": "The association AWS ID for the address (only for VPC)"
                }, 
                "network_interface_id": {
                    "type": "string", 
                    "description": "The network interface (if any) that the address is associated with (only for VPC).\n"
                }, 
                "private_ip_address": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The private IP address associated with the Elastic IP (only for VPC)\n"
                }, 
                "network_interface_owner_id": {
                    "type": "string", 
                    "description": "The owner AWS ID (only for VPC)."
                }
            }, 
            "description": "AWS elastic IP creation/modification status."
        }, 
        "aws_elastic_ip_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_elastic_ip", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_elastic_ip"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_image_def_status": {
            "title": "aws_image resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_image name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_image_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_image."
                }
            }, 
            "description": "aws_image resources status"
        }, 
        "aws_image_intent_resource": {
            "title": "aws_image", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_image_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_image_metadata"
                }
            }, 
            "description": "aws_image entity"
        }, 
        "aws_image_list_intent_response": {
            "title": "aws_image entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_image_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_image_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_image_list_metadata": {
            "title": "Metadata for aws_image list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_image", 
                    "x-ntnx-enum": [
                        "aws_image"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_image_list_metadata_output": {
            "title": "Metadata for aws_image list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_image", 
                    "x-ntnx-enum": [
                        "aws_image"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_image_metadata": {
            "title": "aws_image metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_image was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_image", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_image"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_image uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_image is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_image was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_image"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_image name"
                }
            }, 
            "description": "The aws_image kind metadata"
        }, 
        "aws_image_resources_def_status": {
            "title": "AWS image resources", 
            "type": "object", 
            "properties": {
                "root_device_type": {
                    "type": "string", 
                    "description": "Root device type (e.g. ebs, instance-store)"
                }, 
                "kernel_id": {
                    "type": "string", 
                    "description": "Kernal AWS ID of the image."
                }, 
                "hypervisor": {
                    "type": "string", 
                    "description": "The supported hypervisor."
                }, 
                "virtualization_type": {
                    "type": "string", 
                    "description": "Type of virtualization supported."
                }, 
                "platform": {
                    "type": "string", 
                    "description": "Platform of the image (e.g. Windows)"
                }, 
                "architecture": {
                    "type": "string", 
                    "description": "Architecture of the AWS image (e.g. i386, x86_64)"
                }, 
                "tag_list": {
                    "$ref": "#/definitions/aws_tag_list"
                }, 
                "id": {
                    "pattern": "^ami-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the AMI."
                }, 
                "root_device_name": {
                    "type": "string", 
                    "description": "Root device name (e.g. /dev/sda1, /dev/sda2)"
                }
            }, 
            "description": "AWS image resources"
        }, 
        "aws_image_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_image", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_image"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_instance_disk": {
            "title": "AWS Instance Disk", 
            "type": "object", 
            "properties": {
                "size_gb": {
                    "type": "integer", 
                    "description": "Size of volumes in GB.", 
                    "format": "int64"
                }, 
                "iops": {
                    "type": "integer", 
                    "description": "The requested number of I/O operations per second that the volume can support for provisioned IOPS (SSD) volumes (io1). Minimum = 100 IOPS and Maximum = 20000 IOPS.\n", 
                    "format": "int64"
                }, 
                "snapshot_id": {
                    "type": "string", 
                    "description": "AWS snapshot ID."
                }, 
                "delete_on_termination": {
                    "type": "boolean", 
                    "description": "Status of delete on termination."
                }, 
                "volume_type": {
                    "x-ntnx-enum": [
                        "GP2", 
                        "IO1", 
                        "ST1", 
                        "SC1", 
                        "STANDARD"
                    ], 
                    "type": "string", 
                    "description": "Type of the Volume."
                }, 
                "device_name": {
                    "type": "string", 
                    "description": "Device name e.g. /dev/sdb"
                }
            }, 
            "description": "AWS Instance Disk"
        }, 
        "aws_instance_disk_output_status": {
            "title": "AWS Instance Disk Status", 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "CREATING", 
                        "ATTACHING", 
                        "ATTACHED", 
                        "AVAILABLE", 
                        "IN_USE", 
                        "DELETING", 
                        "DELETED", 
                        "ERROR"
                    ], 
                    "type": "string", 
                    "description": "The status of the Volume."
                }, 
                "size_gb": {
                    "type": "integer", 
                    "description": "Size of volumes in GB.", 
                    "format": "int64"
                }, 
                "delete_on_termination": {
                    "type": "boolean", 
                    "description": "Status of delete on termination."
                }, 
                "availability_zone": {
                    "type": "string", 
                    "description": "The zone on which the EBS volume is created"
                }, 
                "volume_type": {
                    "x-ntnx-enum": [
                        "GP2", 
                        "IO1", 
                        "ST1", 
                        "SC1", 
                        "STANDARD"
                    ], 
                    "type": "string", 
                    "description": "Type of the Volume."
                }, 
                "device_name": {
                    "type": "string", 
                    "description": "Device name e.g. /dev/sdb"
                }, 
                "iops": {
                    "type": "integer", 
                    "description": "The requested number of I/O operations per second that the volume can support for provisioned IOPS (SSD) volumes (io1). Minimum = 100 IOPS and Maximum = 20000 IOPS.\n", 
                    "format": "int64"
                }, 
                "snapshot_id": {
                    "type": "string", 
                    "description": "AWS snapshot ID."
                }, 
                "tag_list": {
                    "$ref": "#/definitions/aws_tag_list"
                }, 
                "id": {
                    "type": "string", 
                    "description": "AWS ID of the volume."
                }
            }, 
            "description": "AWS Instance Disk Status"
        }, 
        "aws_key_pair_def_status": {
            "title": "aws_key_pair resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_key_pair name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_key_pair_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_key_pair."
                }
            }, 
            "description": "aws_key_pair resources status"
        }, 
        "aws_key_pair_intent_resource": {
            "title": "aws_key_pair", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_key_pair_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_key_pair_metadata"
                }
            }, 
            "description": "aws_key_pair entity"
        }, 
        "aws_key_pair_list_intent_response": {
            "title": "aws_key_pair entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_key_pair_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_key_pair_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_key_pair_list_metadata": {
            "title": "Metadata for aws_key_pair list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_key_pair", 
                    "x-ntnx-enum": [
                        "aws_key_pair"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_key_pair_list_metadata_output": {
            "title": "Metadata for aws_key_pair list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_key_pair", 
                    "x-ntnx-enum": [
                        "aws_key_pair"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_key_pair_metadata": {
            "title": "aws_key_pair metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_key_pair was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_key_pair", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_key_pair"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_key_pair uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_key_pair is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_key_pair was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_key_pair"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_key_pair name"
                }
            }, 
            "description": "The aws_key_pair kind metadata"
        }, 
        "aws_key_pair_resources_def_status": {
            "title": "aws_key_pair resources", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the AWS key pair."
                }
            }, 
            "description": "aws_key_pair resources"
        }, 
        "aws_key_pair_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_key_pair", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_key_pair"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_machine_type_def_status": {
            "title": "aws_machine_type resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_machine_type name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_machine_type_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_machine_type."
                }
            }, 
            "description": "aws_machine_type resources status"
        }, 
        "aws_machine_type_intent_resource": {
            "title": "aws_machine_type", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_machine_type_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_machine_type_metadata"
                }
            }, 
            "description": "aws_machine_type entity"
        }, 
        "aws_machine_type_list_intent_response": {
            "title": "aws_machine_type entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_machine_type_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_machine_type_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_machine_type_list_metadata": {
            "title": "Metadata for aws_machine_type list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_machine_type", 
                    "x-ntnx-enum": [
                        "aws_machine_type"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_machine_type_list_metadata_output": {
            "title": "Metadata for aws_machine_type list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_machine_type", 
                    "x-ntnx-enum": [
                        "aws_machine_type"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_machine_type_metadata": {
            "title": "aws_machine_type metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_machine_type was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_machine_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_machine_type"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_machine_type uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_machine_type is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_machine_type was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_machine_type"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_machine_type name"
                }
            }, 
            "description": "The aws_machine_type kind metadata"
        }, 
        "aws_machine_type_resources_def_status": {
            "title": "aws_machine_type resources", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The machine type name."
                }
            }, 
            "description": "aws_machine_type resources"
        }, 
        "aws_machine_type_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_machine_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_machine_type"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_region_def_status": {
            "title": "aws_region resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_region name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_region_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_region."
                }
            }, 
            "description": "aws_region resources status"
        }, 
        "aws_region_intent_resource": {
            "title": "aws_region", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_region_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_region_metadata"
                }
            }, 
            "description": "aws_region entity"
        }, 
        "aws_region_list_intent_response": {
            "title": "aws_region entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_region_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_region_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_region_list_metadata": {
            "title": "Metadata for aws_region list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_region", 
                    "x-ntnx-enum": [
                        "aws_region"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_region_list_metadata_output": {
            "title": "Metadata for aws_region list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_region", 
                    "x-ntnx-enum": [
                        "aws_region"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_region_metadata": {
            "title": "aws_region metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_region was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_region", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_region"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_region uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_region is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_region was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_region"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_region name"
                }
            }, 
            "description": "The aws_region kind metadata"
        }, 
        "aws_region_resources_def_status": {
            "title": "aws_region resources", 
            "type": "object", 
            "properties": {
                "endpoint": {
                    "type": "string", 
                    "description": "The region end point"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the AWS region"
                }
            }, 
            "description": "aws_region resources"
        }, 
        "aws_region_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_region", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_region"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_resource_state": {
            "x-ntnx-enum": [
                "AVAILABLE", 
                "PENDING"
            ], 
            "type": "string", 
            "description": "State of the AWS resource", 
            "title": "Resource State"
        }, 
        "aws_role_def_status": {
            "title": "aws_role resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_role name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_role_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_role."
                }
            }, 
            "description": "aws_role resources status"
        }, 
        "aws_role_intent_resource": {
            "title": "aws_role", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_role_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_role_metadata"
                }
            }, 
            "description": "aws_role entity"
        }, 
        "aws_role_list_intent_response": {
            "title": "aws_role entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_role_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_role_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_role_list_metadata": {
            "title": "Metadata for aws_role list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_role", 
                    "x-ntnx-enum": [
                        "aws_role"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_role_list_metadata_output": {
            "title": "Metadata for aws_role list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_role", 
                    "x-ntnx-enum": [
                        "aws_role"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_role_metadata": {
            "title": "aws_role metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_role was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_role", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_role"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_role uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_role is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_role was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_role"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_role name"
                }
            }, 
            "description": "The aws_role kind metadata"
        }, 
        "aws_role_resources_def_status": {
            "title": "aws_role resources", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the AWS role."
                }
            }, 
            "description": "aws_role resources"
        }, 
        "aws_role_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_role", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_role"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_security_group_def_status": {
            "title": "aws_security_group resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_security_group name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_security_group_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_security_group."
                }
            }, 
            "description": "aws_security_group resources status"
        }, 
        "aws_security_group_intent_resource": {
            "title": "aws_security_group", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_security_group_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_security_group_metadata"
                }
            }, 
            "description": "aws_security_group entity"
        }, 
        "aws_security_group_list": {
            "items": {
                "type": "object", 
                "properties": {
                    "security_group_id": {
                        "pattern": "^sg-[a-f0-9]{1,17}$", 
                        "type": "string", 
                        "description": "AWS ID of the security group"
                    }
                }
            }, 
            "type": "array", 
            "description": "List of AWS security group IDs.", 
            "title": "AWS Security Group List"
        }, 
        "aws_security_group_list_intent_response": {
            "title": "aws_security_group entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_security_group_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_security_group_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_security_group_list_metadata": {
            "title": "Metadata for aws_security_group list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_security_group", 
                    "x-ntnx-enum": [
                        "aws_security_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_security_group_list_metadata_output": {
            "title": "Metadata for aws_security_group list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_security_group", 
                    "x-ntnx-enum": [
                        "aws_security_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_security_group_metadata": {
            "title": "aws_security_group metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_security_group was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_security_group", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_security_group"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_security_group uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_security_group is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_security_group was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_security_group"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_security_group name"
                }
            }, 
            "description": "The aws_security_group kind metadata"
        }, 
        "aws_security_group_resources_def_status": {
            "title": "AWS Security Group resources", 
            "type": "object", 
            "properties": {
                "vpc_id": {
                    "pattern": "^vpc-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the VPC for the security group."
                }, 
                "tag_list": {
                    "$ref": "#/definitions/aws_tag_list"
                }, 
                "id": {
                    "pattern": "^sg-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the security group."
                }
            }, 
            "description": "AWS Security Group resources"
        }, 
        "aws_security_group_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_security_group", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_security_group"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_subnet_def_status": {
            "title": "aws_subnet resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_subnet name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_subnet_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_subnet."
                }
            }, 
            "description": "aws_subnet resources status"
        }, 
        "aws_subnet_intent_resource": {
            "title": "aws_subnet", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_subnet_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_subnet_metadata"
                }
            }, 
            "description": "aws_subnet entity"
        }, 
        "aws_subnet_list_intent_response": {
            "title": "aws_subnet entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_subnet_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_subnet_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_subnet_list_metadata": {
            "title": "Metadata for aws_subnet list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_subnet", 
                    "x-ntnx-enum": [
                        "aws_subnet"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_subnet_list_metadata_output": {
            "title": "Metadata for aws_subnet list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_subnet", 
                    "x-ntnx-enum": [
                        "aws_subnet"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_subnet_metadata": {
            "title": "aws_subnet metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_subnet was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_subnet", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_subnet"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_subnet uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_subnet is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_subnet was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_subnet"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_subnet name"
                }
            }, 
            "description": "The aws_subnet kind metadata"
        }, 
        "aws_subnet_resources_def_status": {
            "title": "AWS subnet creation/modification status", 
            "type": "object", 
            "properties": {
                "vpc_id": {
                    "pattern": "^vpc-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the VPC the subnet is in."
                }, 
                "cidr_block": {
                    "type": "string", 
                    "description": "The CIDR block assigned to the subnet.", 
                    "maxLength": 64
                }, 
                "tag_list": {
                    "$ref": "#/definitions/aws_tag_list"
                }, 
                "id": {
                    "pattern": "^subnet-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the subnet."
                }, 
                "state": {
                    "$ref": "#/definitions/aws_resource_state"
                }
            }, 
            "description": "AWS Subnet creation/modification status."
        }, 
        "aws_subnet_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_subnet", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_subnet"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_tag_list": {
            "items": {
                "required": [
                    "key", 
                    "value"
                ], 
                "type": "object", 
                "description": "Generic key value pair.", 
                "properties": {
                    "key": {
                        "type": "string", 
                        "description": "Tag Key"
                    }, 
                    "value": {
                        "type": "string", 
                        "description": "Tag value"
                    }
                }
            }, 
            "type": "array", 
            "description": "The AWS Tags associated with any AWS resource", 
            "title": "AWS Tags"
        }, 
        "aws_vm": {
            "title": "aws_vm Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for aws_vm.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_vm_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_vm Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a aws_vm spec"
        }, 
        "aws_vm_def_status": {
            "title": "aws_vm Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the aws_vm."
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_vm Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the aws_vm, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_vm_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_vm."
                }
            }, 
            "description": "An intentful representation of a aws_vm status"
        }, 
        "aws_vm_intent_input": {
            "title": "aws_vm Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/aws_vm"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_vm_metadata"
                }
            }, 
            "description": "An intentful representation of a aws_vm"
        }, 
        "aws_vm_intent_resource": {
            "title": "aws_vm", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_vm_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_vm_metadata"
                }
            }, 
            "description": "aws_vm entity"
        }, 
        "aws_vm_intent_response": {
            "title": "aws_vm Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_vm_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/aws_vm"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_vm_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a aws_vm"
        }, 
        "aws_vm_list_intent_response": {
            "title": "aws_vm entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_vm_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_vm_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_vm_list_metadata": {
            "title": "Metadata for aws_vm list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_vm", 
                    "x-ntnx-enum": [
                        "aws_vm"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_vm_list_metadata_output": {
            "title": "Metadata for aws_vm list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_vm", 
                    "x-ntnx-enum": [
                        "aws_vm"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_vm_metadata": {
            "title": "aws_vm metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_vm was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_vm", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_vm"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_vm uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_vm is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_vm was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_vm"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_vm name"
                }
            }, 
            "description": "The aws_vm kind metadata"
        }, 
        "aws_vm_resources": {
            "title": "AWS VM Resources", 
            "type": "object", 
            "properties": {
                "availability_zone": {
                    "type": "string", 
                    "description": "The zone on which the instance is to be created."
                }, 
                "key_name": {
                    "type": "string", 
                    "description": "The name of the key pair used to launch the instance"
                }, 
                "user_data": {
                    "type": "string", 
                    "description": "User data passed to launch the instance", 
                    "maxLength": 16000
                }, 
                "image_id": {
                    "pattern": "^ami-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the AMI on the instance."
                }, 
                "block_device_map": {
                    "$ref": "#/definitions/aws_block_device_map"
                }, 
                "account_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The AWS account to which the instance belongs.", 
                    "format": "UUID"
                }, 
                "instance_profile_name": {
                    "type": "string", 
                    "description": "The name of the IAM Instance Profile (IIP) associated with the\ninstance\n"
                }, 
                "subnet_id": {
                    "pattern": "^subnet-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The subnet within the VPC the instance belongs to."
                }, 
                "region": {
                    "pattern": "^[a-z]{2}-[a-z\\-]*-[1-9]{1}$", 
                    "type": "string", 
                    "description": "The region to which the instance belongs."
                }, 
                "instance_initiated_shutdown_behavior": {
                    "x-ntnx-enum": [
                        "STOP", 
                        "TERMINATE"
                    ], 
                    "type": "string", 
                    "description": "Specifies whether the instance stops or terminates on instance-initiated shutdown.\n"
                }, 
                "instance_type": {
                    "type": "string", 
                    "description": "The type of instance e.g.'t1.micro', 'm1.small'", 
                    "maxLength": 64
                }, 
                "state": {
                    "x-ntnx-enum": [
                        "RUNNING", 
                        "REBOOTING", 
                        "STOPPED"
                    ], 
                    "type": "string", 
                    "description": "Instance's desired state."
                }, 
                "security_group_list": {
                    "description": "AWS IDs of the security groups associated with the instance.\n", 
                    "$ref": "#/definitions/aws_security_group_list"
                }, 
                "private_ip_address": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The specific available IP from the subnet assigned to the instance.\n"
                }, 
                "vpc_id": {
                    "pattern": "^vpc-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The VPC AWS ID, if running in VPC."
                }, 
                "tag_list": {
                    "$ref": "#/definitions/aws_tag_list"
                }, 
                "associate_public_ip_address": {
                    "type": "boolean", 
                    "description": "Indicates whether the network interface receives a public IP address.Can associate a public IP address with a network interface only if it has a device index of eth0 and if it is a new network interface (not an existing one).\n"
                }
            }, 
            "description": "AWS VM Resources Definition."
        }, 
        "aws_vm_resources_def_status": {
            "title": "VM Resources Status Definition", 
            "type": "object", 
            "properties": {
                "root_device_type": {
                    "x-ntnx-enum": [
                        "EBS", 
                        "INSTANCE_STORE"
                    ], 
                    "type": "string", 
                    "description": "The root device type"
                }, 
                "private_dns_name": {
                    "type": "string", 
                    "description": "The private DNS name of the instance."
                }, 
                "availability_zone": {
                    "type": "string", 
                    "description": "The zone on which the instance is created"
                }, 
                "key_name": {
                    "type": "string", 
                    "description": "The name of the key pair used to launch the instance"
                }, 
                "image_id": {
                    "pattern": "^ami-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the AMI on the instance."
                }, 
                "block_device_map": {
                    "$ref": "#/definitions/aws_block_device_map_output_status"
                }, 
                "public_dns_name": {
                    "type": "string", 
                    "description": "The public DNS name of the instance."
                }, 
                "id": {
                    "pattern": "^i-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the instance."
                }, 
                "public_ip_address": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The public IP of the instance"
                }, 
                "instance_profile_name": {
                    "type": "string", 
                    "description": "The name of the IAM Instance Profile (IIP) associated with the\ninstance.\n"
                }, 
                "instance_type": {
                    "type": "string", 
                    "description": "The type of instance e.g.'t1.micro', 'm1.small'", 
                    "maxLength": 64
                }, 
                "subnet_id": {
                    "pattern": "^subnet-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The subnet within the VPC the instance belongs to."
                }, 
                "region": {
                    "pattern": "^[a-z]{2}-[a-z\\-]*-[1-9]{1}$", 
                    "type": "string", 
                    "description": "The region to which the instance belongs."
                }, 
                "launch_time": {
                    "type": "string", 
                    "description": "The time the instance was launched"
                }, 
                "instance_initiated_shutdown_behavior": {
                    "x-ntnx-enum": [
                        "STOP", 
                        "TERMINATE"
                    ], 
                    "type": "string", 
                    "description": "Specifies whether the instance stops or terminates on instance-initiated shutdown.\n"
                }, 
                "account_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The AWS account to which the instance belongs.", 
                    "format": "UUID"
                }, 
                "platform": {
                    "type": "string", 
                    "description": "Platform of the instance e.g. Windows"
                }, 
                "state": {
                    "x-ntnx-enum": [
                        "PENDING", 
                        "RUNNING", 
                        "SHUTTING_DOWN", 
                        "TERMINATED", 
                        "STOPPING", 
                        "STOPPED"
                    ], 
                    "type": "string", 
                    "description": "Instance's current state."
                }, 
                "security_group_list": {
                    "description": "AWS IDs of the security groups associated with the instance.\n", 
                    "$ref": "#/definitions/aws_security_group_list"
                }, 
                "private_ip_address": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The specific available IP from the subnet assigned to the instance.\n"
                }, 
                "vpc_id": {
                    "pattern": "^vpc-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The VPC AWS ID, if running in VPC."
                }, 
                "tag_list": {
                    "$ref": "#/definitions/aws_tag_list"
                }, 
                "console_output": {
                    "type": "string", 
                    "description": "Console output of the instance", 
                    "format": "bytes"
                }
            }, 
            "description": "VM Resources Status Definition."
        }, 
        "aws_vm_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_vm", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_vm"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_volume_type_def_status": {
            "title": "aws_volume_type resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_volume_type name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_volume_type_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_volume_type."
                }
            }, 
            "description": "aws_volume_type resources status"
        }, 
        "aws_volume_type_intent_resource": {
            "title": "aws_volume_type", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_volume_type_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_volume_type_metadata"
                }
            }, 
            "description": "aws_volume_type entity"
        }, 
        "aws_volume_type_list_intent_response": {
            "title": "aws_volume_type entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_volume_type_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_volume_type_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_volume_type_list_metadata": {
            "title": "Metadata for aws_volume_type list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_volume_type", 
                    "x-ntnx-enum": [
                        "aws_volume_type"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_volume_type_list_metadata_output": {
            "title": "Metadata for aws_volume_type list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_volume_type", 
                    "x-ntnx-enum": [
                        "aws_volume_type"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_volume_type_metadata": {
            "title": "aws_volume_type metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_volume_type was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_volume_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_volume_type"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_volume_type uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_volume_type is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_volume_type was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_volume_type"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_volume_type name"
                }
            }, 
            "description": "The aws_volume_type kind metadata"
        }, 
        "aws_volume_type_resources_def_status": {
            "title": "aws_volume_type resources", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The volume type name."
                }
            }, 
            "description": "aws_volume_type resources"
        }, 
        "aws_volume_type_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_volume_type", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_volume_type"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "aws_vpc_def_status": {
            "title": "aws_vpc resources status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string", 
                    "description": "aws_vpc name."
                }, 
                "resources": {
                    "$ref": "#/definitions/aws_vpc_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for aws_vpc."
                }
            }, 
            "description": "aws_vpc resources status"
        }, 
        "aws_vpc_intent_resource": {
            "title": "aws_vpc", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/aws_vpc_def_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_vpc_metadata"
                }
            }, 
            "description": "aws_vpc entity"
        }, 
        "aws_vpc_list_intent_response": {
            "title": "aws_vpc entity list", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/aws_vpc_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/aws_vpc_list_metadata_output"
                }
            }, 
            "description": "AWS VPC entity list."
        }, 
        "aws_vpc_list_metadata": {
            "title": "Metadata for aws_vpc list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_vpc", 
                    "x-ntnx-enum": [
                        "aws_vpc"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "aws_vpc_list_metadata_output": {
            "title": "Metadata for aws_vpc list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "aws_vpc", 
                    "x-ntnx-enum": [
                        "aws_vpc"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "aws_vpc_metadata": {
            "title": "aws_vpc metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_vpc was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "aws_vpc", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_vpc"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "aws_vpc uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the aws_vpc is in", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when aws_vpc was created\n", 
                    "format": "date-time"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the aws_vpc"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "aws_vpc name"
                }
            }, 
            "description": "The aws_vpc kind metadata"
        }, 
        "aws_vpc_resources_def_status": {
            "title": "AWS VPC resources", 
            "type": "object", 
            "properties": {
                "is_default": {
                    "type": "boolean", 
                    "description": "Whether the VPC is the default VPC."
                }, 
                "instance_tenancy": {
                    "$ref": "#/definitions/instance_tenancy"
                }, 
                "state": {
                    "$ref": "#/definitions/aws_resource_state"
                }, 
                "classic_link_enabled": {
                    "type": "boolean", 
                    "description": "Whether ClassicLink is enabled."
                }, 
                "cidr_block": {
                    "type": "string", 
                    "description": "The CIDR block for the VPC.", 
                    "maxLength": 64
                }, 
                "tag_list": {
                    "$ref": "#/definitions/aws_tag_list"
                }, 
                "id": {
                    "pattern": "^vpc-[a-f0-9]{1,17}$", 
                    "type": "string", 
                    "description": "The AWS ID of the VPC."
                }
            }, 
            "description": "AWS VPC resources"
        }, 
        "aws_vpc_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "aws_vpc", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "aws_vpc"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "base_response": {
            "description": "Base response object definition.", 
            "title": "Base Response Definition.", 
            "type": "object", 
            "properties": {
                "search_query": {
                    "$ref": "#/definitions/auto_completion"
                }, 
                "composed_result": {
                    "$ref": "#/definitions/composite_response"
                }, 
                "single_result": {
                    "$ref": "#/definitions/single_response"
                }, 
                "title": {
                    "type": "string", 
                    "description": "Title of the Base response."
                }
            }, 
            "x-ntnx-one-of": [
                "single_result", 
                "composed_result"
            ]
        }, 
        "basic_credential": {
            "title": "Basic Credentials to connect with remote endpoint", 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "username of authorized user on remote cluster,\nmust for BASIC auth_type\n"
                }, 
                "password": {
                    "type": "string", 
                    "description": "password of authorized user on remote cluster,\nmust for BASIC auth_type\n"
                }
            }, 
            "description": "Basic Credentials to connect with remote endpoint"
        }, 
        "batch_list_metadata": {
            "title": "Metadata for batch list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "batch", 
                    "x-ntnx-enum": [
                        "batch"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "batch_list_metadata_output": {
            "title": "Metadata for batch list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "batch", 
                    "x-ntnx-enum": [
                        "batch"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "batch_metadata": {
            "title": "batch metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when batch was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "batch", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "batch"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "batch uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the batch is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when batch was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the batch"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "batch name", 
                    "maxLength": 64
                }
            }, 
            "description": "The batch kind metadata"
        }, 
        "batch_reference": {
            "title": "Reference to a batch", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "batch", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "batch"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a batch"
        }, 
        "batch_request": {
            "title": "Batch request", 
            "required": [
                "api_request_list"
            ], 
            "type": "object", 
            "properties": {
                "execution_order": {
                    "default": "SEQUENTIAL", 
                    "x-ntnx-enum": [
                        "SEQUENTIAL", 
                        "NON_SEQUENTIAL"
                    ], 
                    "type": "string", 
                    "description": "The order of execution of the APIs in the batch. Can be either\nSequential (default value) or Parallel.\n"
                }, 
                "action_on_failure": {
                    "default": "CONTINUE", 
                    "x-ntnx-enum": [
                        "CONTINUE", 
                        "ABORT"
                    ], 
                    "type": "string", 
                    "description": "If the specified parameter is CONTINUE, the remaining APIs in the batch\ncontinue to be executed.\n"
                }, 
                "api_request_list": {
                    "items": {
                        "$ref": "#/definitions/api_request"
                    }, 
                    "type": "array", 
                    "description": "A list of API requests in the batch."
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "Request for batch operations."
        }, 
        "batch_response": {
            "title": "Batch api success response", 
            "type": "object", 
            "properties": {
                "api_response_list": {
                    "items": {
                        "$ref": "#/definitions/api_response"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "List of responses for the API requests in the batch."
        }, 
        "batch_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "batch", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "batch"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "bgp_config": {
            "title": "BGP config spec for route peering with other routers and gateways", 
            "type": "object", 
            "properties": {
                "router_id": {
                    "type": "string", 
                    "description": "BGP router id of this gateway."
                }, 
                "password": {
                    "type": "string", 
                    "description": "password for authentication.", 
                    "format": "password"
                }, 
                "asn": {
                    "description": "ASN used in BGP.", 
                    "$ref": "#/definitions/asn"
                }, 
                "peer_ip_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "IP addresses of peers."
                }
            }, 
            "description": "BGP configuration spec for route peering with other routers and gateways.\n"
        }, 
        "bgp_config_status": {
            "title": "BGP config status for route peering with other routers and gateways", 
            "type": "object", 
            "properties": {
                "router_id": {
                    "type": "string", 
                    "description": "BGP router id of this gateway."
                }, 
                "password": {
                    "type": "string", 
                    "description": "password for authentication.", 
                    "format": "password"
                }, 
                "asn": {
                    "type": "integer", 
                    "description": "ASN used in BGP.", 
                    "format": "uint32"
                }, 
                "peer_ip_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "IP addresses of peers."
                }
            }, 
            "description": "BGP configuration status for route peering with other routers and gateways.\n"
        }, 
        "billing_invoice": {
            "title": "Invoice details.", 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "DRAFT", 
                        "POSTED"
                    ], 
                    "type": "string", 
                    "description": "Status of the invoice."
                }, 
                "due_date": {
                    "type": "string", 
                    "description": "Date on which this invoice is due.", 
                    "format": "date"
                }, 
                "invoice_target_date": {
                    "type": "string", 
                    "description": "Target date of the invoice.", 
                    "format": "date"
                }, 
                "invoice_date": {
                    "type": "string", 
                    "description": "Date on which this invoice was generated.", 
                    "format": "date"
                }, 
                "invoice_item_list": {
                    "items": {
                        "$ref": "#/definitions/billing_invoice_item"
                    }, 
                    "type": "array", 
                    "description": "Line items of the invoice.", 
                    "title": "Line items of the invoice."
                }, 
                "amount": {
                    "description": "Amount that is due.", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "invoice_number": {
                    "type": "string", 
                    "description": "Unique number associated with the invoice."
                }, 
                "balance": {
                    "description": "Amount that due from last invoice.", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "account_name": {
                    "type": "string", 
                    "description": "Name of the billing account."
                }
            }, 
            "description": "Invoice generated for a billing duration."
        }, 
        "billing_invoice_item": {
            "title": "line item of an invoice.", 
            "type": "object", 
            "properties": {
                "charge_type": {
                    "type": "string", 
                    "description": "Nature of the charge."
                }, 
                "subscription_name": {
                    "type": "string", 
                    "description": "Name of the subscription."
                }, 
                "charge_description": {
                    "type": "string", 
                    "description": "Description of the charge plan applicable to the subscription.\n"
                }, 
                "tax_amount": {
                    "description": "Tax amount applicable to this line item.", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "charge_id": {
                    "type": "string", 
                    "description": "Id of the charge plan applicable to the subscription."
                }, 
                "service_end_date": {
                    "type": "string", 
                    "description": "Date on which subscription to the line item ends.", 
                    "format": "date"
                }, 
                "subscription_id": {
                    "type": "string", 
                    "description": "Id of the subscription."
                }, 
                "service_start_date": {
                    "type": "string", 
                    "description": "Date on which this service was started.", 
                    "format": "date"
                }, 
                "charge_amount": {
                    "description": "Amount that is due for this line item.", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "processing_type": {
                    "type": "string", 
                    "description": "Type of processing done on the charge."
                }, 
                "charge_date": {
                    "type": "string", 
                    "description": "Date on which this line item will be charged.", 
                    "format": "date"
                }, 
                "charge_name": {
                    "type": "string", 
                    "description": "Name of the charge plan applicable to the subscription."
                }, 
                "quantity": {
                    "type": "integer", 
                    "description": "Number of instances of the line item subscribed.", 
                    "format": "int32"
                }
            }, 
            "description": "line item of an invoice."
        }, 
        "billing_invoice_list": {
            "title": "List of all invoices.", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/billing_invoice"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "List of all invoices for the current tenant account."
        }, 
        "billing_summary": {
            "title": "Usage details for the current tenant.", 
            "type": "object", 
            "properties": {
                "charge_group_list": {
                    "items": {
                        "$ref": "#/definitions/billing_summary_charge_group"
                    }, 
                    "type": "array"
                }, 
                "grouped_by": {
                    "x-ntnx-enum": [
                        "DAILY"
                    ], 
                    "type": "string", 
                    "description": "Aggregation unit based on which charges are grouped by."
                }
            }, 
            "description": "Usage details for the current tenant grouped by aggregation unit defined in grouped_by.\n"
        }, 
        "billing_summary_charge_group": {
            "title": "Charges incurred for the date.", 
            "type": "object", 
            "properties": {
                "charge_amount": {
                    "description": "total value to be charge/already charged to customer.", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "charge_date": {
                    "type": "string", 
                    "description": "date on which charge occurred.", 
                    "format": "date"
                }, 
                "quantity": {
                    "type": "integer", 
                    "description": "Total number of billing items for which customer was charged.\n", 
                    "format": "int64"
                }
            }, 
            "description": "Charges incurred for charge_date."
        }, 
        "blackout": {
            "title": "Blackout entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/blackout_resources"
                }
            }, 
            "description": "The blackout entity defines the time period when clusters are in\nmaintenance mode or special circumstance, special actions need to be\nskipped, for example, alerts (like user defined alerts) and anomalies\nshould not be raised.\n"
        }, 
        "blackout_def_status": {
            "title": "Blackout entity status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "resources": {
                    "$ref": "#/definitions/blackout_resources"
                }
            }, 
            "description": "Blackout entity status"
        }, 
        "blackout_intent_input": {
            "title": "blackout Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/blackout"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blackout_metadata"
                }
            }, 
            "description": "An intentful representation of a blackout"
        }, 
        "blackout_intent_resource": {
            "title": "blackout Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/blackout_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/blackout"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blackout_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a blackout"
        }, 
        "blackout_intent_response": {
            "title": "blackout Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/blackout_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/blackout"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blackout_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a blackout"
        }, 
        "blackout_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/blackout_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blackout_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of blackouts"
        }, 
        "blackout_list_metadata": {
            "title": "Metadata for blackout list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "blackout", 
                    "x-ntnx-enum": [
                        "blackout"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "blackout_list_metadata_output": {
            "title": "Metadata for blackout list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "blackout", 
                    "x-ntnx-enum": [
                        "blackout"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "blackout_metadata": {
            "title": "blackout metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when blackout was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "blackout", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "blackout"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "blackout uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the blackout is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when blackout was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the blackout"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "blackout name", 
                    "maxLength": 64
                }
            }, 
            "description": "The blackout kind metadata"
        }, 
        "blackout_reference": {
            "title": "Reference to a blackout", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "blackout", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "blackout"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a blackout"
        }, 
        "blackout_resources": {
            "title": "Blackout resources", 
            "required": [
                "feature_list", 
                "scope_entity_list", 
                "schedule_list"
            ], 
            "type": "object", 
            "properties": {
                "scope_entity_list": {
                    "items": {
                        "required": [
                            "entity_type"
                        ], 
                        "type": "object", 
                        "properties": {
                            "uuid_list": {
                                "items": {
                                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                    "type": "string"
                                }, 
                                "type": "array"
                            }, 
                            "entity_type": {
                                "type": "string"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "The list of 1) entity type, or 2) entity type + uuid_list, will\ndefine the targeted entities.  Any entities contained inside the\ntargeted entities are affected by this blackout schedule.\nIf it is case 1), where the uuid_list is empty, then, it means the\nblackout applies to all the entities of this entity_type.  For\nexample, blackout for all clusters, the entity_type = \"cluster\", the\nuuid_list will be empty.  If the uuid_list is not empty, then, the\nblackout is applied to only these entities in the uuid_list.\n"
                }, 
                "schedule_list": {
                    "items": {
                        "$ref": "#/definitions/schedule"
                    }, 
                    "type": "array", 
                    "description": "A list of time schedules for the blackout.  For example, if the\nblackout is for every Monday and Friday, 10:00 - 11:00 am,\n3:00-5:00 pm, then, there will be 2 items:\n  schedule1: day_of_week = Monday,Friday, Time = 10:00 - 11:00 am\n  schedule2: day_of_week = Monday,Friday, 3:00 - 5:00 pm\n"
                }, 
                "feature_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "A list of features that this blackout is applied to."
                }
            }, 
            "description": "Blackout object definition"
        }, 
        "blackout_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "blackout", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "blackout"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "block": {
            "title": "Host block information", 
            "type": "object", 
            "properties": {
                "block_serial_number": {
                    "type": "string", 
                    "description": "Rackable unit serial number."
                }, 
                "block_model": {
                    "type": "string", 
                    "description": "Rackable unit model name."
                }
            }, 
            "description": "Host block config info."
        }, 
        "blueprint": {
            "title": "blueprint Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for blueprint.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/blueprint_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "blueprint Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a blueprint spec"
        }, 
        "blueprint_clone_input": {
            "title": "Clone Blueprint request.", 
            "required": [
                "metadata", 
                "blueprint_name"
            ], 
            "type": "object", 
            "properties": {
                "blueprint_name": {
                    "type": "string", 
                    "maxLength": 64
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Clone Blueprint request."
        }, 
        "blueprint_clone_response": {
            "title": "Response containing the uuid of the cloned blueprint", 
            "required": [
                "blueprint_uuid"
            ], 
            "type": "object", 
            "properties": {
                "blueprint_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "Response containing the uuid of the cloned blueprint"
        }, 
        "blueprint_custom_intent_input": {
            "title": "blueprint Intent Entity", 
            "required": [
                "api_version", 
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/blueprint"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "An intentful representation of a blueprint"
        }, 
        "blueprint_def_status": {
            "title": "blueprint Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the blueprint."
                }, 
                "name": {
                    "type": "string", 
                    "description": "blueprint Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the blueprint, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/blueprint_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for blueprint."
                }
            }, 
            "description": "An intentful representation of a blueprint status"
        }, 
        "blueprint_dependency_list": {
            "title": "Depends on Definition for Application.", 
            "required": [
                "getter_resource_kind", 
                "getter_resource_name", 
                "setter_resource_attr", 
                "setter_resource_kind", 
                "setter_resource_name", 
                "action_resource_kind", 
                "action_resource_name", 
                "action_name"
            ], 
            "type": "object", 
            "properties": {
                "getter_resource_kind": {
                    "type": "string", 
                    "description": ""
                }, 
                "from_resource_kind": {
                    "type": "string", 
                    "description": ""
                }, 
                "setter_resource_kind": {
                    "type": "string", 
                    "description": ""
                }, 
                "setter_resource_name": {
                    "type": "string", 
                    "description": ""
                }, 
                "action_name": {
                    "type": "string", 
                    "description": ""
                }, 
                "action_resource_name": {
                    "type": "string", 
                    "description": ""
                }, 
                "getter_resource_name": {
                    "type": "string", 
                    "description": ""
                }, 
                "setter_resource_attr": {
                    "type": "string", 
                    "description": ""
                }, 
                "action_resource_kind": {
                    "type": "string", 
                    "description": ""
                }
            }, 
            "description": "Depends on definition for Application."
        }, 
        "blueprint_deployment_input": {
            "title": "Deployment definition for Application.", 
            "required": [
                "name", 
                "uuid", 
                "substrate_local_reference", 
                "min_replicas", 
                "max_replicas"
            ], 
            "type": "object", 
            "properties": {
                "percent_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "fault_domain_scope": {
                    "x-ntnx-enum": [
                        "HOST", 
                        "CLUSTER", 
                        "AZ"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input"
                    }, 
                    "type": "array", 
                    "description": "List of references to action"
                }, 
                "package_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_reference"
                    }, 
                    "type": "array", 
                    "description": "List of references for the packages"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "min_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Minimum replicas for the deployment."
                }, 
                "max_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Maximum replicas for the deployment."
                }, 
                "num_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "brownfield_instance_list": {
                    "items": {
                        "$ref": "#/definitions/brownfield_instance_input"
                    }, 
                    "type": "array", 
                    "description": "brownfield map"
                }, 
                "substrate_local_reference": {
                    "$ref": "#/definitions/app_substrate_reference"
                }, 
                "type": {
                    "default": "GREENFIELD", 
                    "x-ntnx-enum": [
                        "BROWNFIELD", 
                        "GREENFIELD"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Deployment definition for Application."
        }, 
        "blueprint_deployment_input_upload": {
            "title": "Deployment definition for Application.", 
            "required": [
                "name", 
                "substrate_local_reference", 
                "min_replicas", 
                "max_replicas"
            ], 
            "type": "object", 
            "properties": {
                "percent_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "fault_domain_scope": {
                    "x-ntnx-enum": [
                        "HOST", 
                        "CLUSTER", 
                        "AZ"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_input_upload"
                    }, 
                    "type": "array", 
                    "description": "List of references to action"
                }, 
                "package_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_reference_upload"
                    }, 
                    "type": "array", 
                    "description": "List of references for the packages"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "min_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Minimum replicas for the deployment."
                }, 
                "max_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Maximum replicas for the deployment."
                }, 
                "num_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "brownfield_instance_list": {
                    "items": {
                        "$ref": "#/definitions/brownfield_instance_input"
                    }, 
                    "type": "array", 
                    "description": "brownfield map"
                }, 
                "substrate_local_reference": {
                    "$ref": "#/definitions/app_substrate_reference_upload"
                }, 
                "type": {
                    "default": "GREENFIELD", 
                    "x-ntnx-enum": [
                        "BROWNFIELD", 
                        "GREENFIELD"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input_upload"
                    }, 
                    "type": "array", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }
            }, 
            "description": "Deployment definition for Application."
        }, 
        "blueprint_deployment_response": {
            "title": "Deployment Definition for Application.", 
            "required": [
                "name", 
                "uuid", 
                "substrate_local_reference", 
                "min_replicas", 
                "max_replicas", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "percent_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "min_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Minimum replicas for the deployment."
                }, 
                "max_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Maximum replicas for the deployment."
                }, 
                "type": {
                    "default": "GREENFIELD", 
                    "x-ntnx-enum": [
                        "BROWNFIELD", 
                        "GREENFIELD"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "substrate_local_reference": {
                    "$ref": "#/definitions/app_substrate_reference"
                }, 
                "num_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "brownfield_instance_list": {
                    "items": {
                        "$ref": "#/definitions/brownfield_instance_input"
                    }, 
                    "type": "array", 
                    "description": "brownfield map"
                }, 
                "fault_domain_scope": {
                    "x-ntnx-enum": [
                        "HOST", 
                        "CLUSTER", 
                        "AZ"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "package_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_reference"
                    }, 
                    "type": "array", 
                    "description": "List of references for the packages"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for blueprint deployment"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Deployment definition for Application."
        }, 
        "blueprint_deployment_response_download": {
            "title": "Deployment Definition for Application.", 
            "required": [
                "name", 
                "substrate_local_reference", 
                "min_replicas", 
                "max_replicas", 
                "state", 
                "message_list"
            ], 
            "type": "object", 
            "properties": {
                "percent_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "description": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 1000
                }, 
                "action_list": {
                    "items": {
                        "$ref": "#/definitions/app_action_response_download"
                    }, 
                    "type": "array", 
                    "description": "List of references to action\n"
                }, 
                "min_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Minimum replicas for the deployment."
                }, 
                "max_replicas": {
                    "default": "1", 
                    "type": "string", 
                    "description": "Maximum replicas for the deployment."
                }, 
                "type": {
                    "default": "GREENFIELD", 
                    "x-ntnx-enum": [
                        "BROWNFIELD", 
                        "GREENFIELD"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "substrate_local_reference": {
                    "$ref": "#/definitions/app_substrate_reference_upload"
                }, 
                "num_fault_tolerance": {
                    "type": "integer", 
                    "description": "", 
                    "format": "int64"
                }, 
                "brownfield_instance_list": {
                    "items": {
                        "$ref": "#/definitions/brownfield_instance_input"
                    }, 
                    "type": "array", 
                    "description": "brownfield map"
                }, 
                "fault_domain_scope": {
                    "x-ntnx-enum": [
                        "HOST", 
                        "CLUSTER", 
                        "AZ"
                    ], 
                    "type": "string", 
                    "description": ""
                }, 
                "name": {
                    "type": "string", 
                    "description": "", 
                    "maxLength": 64
                }, 
                "package_local_reference_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_reference_upload"
                    }, 
                    "type": "array", 
                    "description": "List of references for the packages"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "editables": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Runtime editable attributes for this entity. The structure for this is a dictionary. The keys in this dictionary should be the name of the attribute on the entity. If the attribute is editable, the value should be true, else false. If the attribute is a nested dictionary, the value can contain a nested dictionary with the same key value structure described above.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for blueprint deployment"
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response_download"
                    }, 
                    "type": "array", 
                    "description": ""
                }
            }, 
            "description": "Deployment definition for Application."
        }, 
        "blueprint_download_def_status": {
            "title": "App blueprint download status", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string"
                }, 
                "name": {
                    "type": "string"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/blueprint_download_resources_def_status"
                }, 
                "description": {
                    "type": "string"
                }
            }, 
            "description": "App blueprint download status"
        }, 
        "blueprint_download_intent_response": {
            "title": "blueprint Intent Response", 
            "required": [
                "api_version", 
                "metadata", 
                "spec", 
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/blueprint_download_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/blueprint_upload"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a blueprint"
        }, 
        "blueprint_download_resources_def_status": {
            "title": "Status of the Blueprint.", 
            "type": "object", 
            "properties": {
                "service_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_response_download"
                    }, 
                    "type": "array", 
                    "description": "Service definitions for Blueprint."
                }, 
                "substrate_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_substrate_response_download"
                    }, 
                    "type": "array", 
                    "description": "Substrate definitions for Blueprint."
                }, 
                "credential_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_credential_response_download"
                    }, 
                    "type": "array", 
                    "description": "Credential definitions for Blueprint."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for app blueprint"
                }, 
                "app_profile_list": {
                    "items": {
                        "$ref": "#/definitions/app_profile_response_download"
                    }, 
                    "type": "array", 
                    "description": "App profile definitions for Blueprint."
                }, 
                "default_credential_local_reference": {
                    "$ref": "#/definitions/app_credential_reference_upload"
                }, 
                "package_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_response_download"
                    }, 
                    "type": "array", 
                    "description": "Package definitions for Blueprint."
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of blueprint", 
                    "maxLength": 64
                }, 
                "client_attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Data needed for clients."
                }, 
                "is_cloned": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "Cloned or original blueprint"
                }
            }, 
            "description": "Status of the Blueprint."
        }, 
        "blueprint_intent_input": {
            "title": "blueprint Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/blueprint"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "An intentful representation of a blueprint"
        }, 
        "blueprint_intent_resource": {
            "title": "blueprint Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/blueprint_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/blueprint"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a blueprint"
        }, 
        "blueprint_intent_response": {
            "title": "blueprint Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/blueprint_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/blueprint"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a blueprint"
        }, 
        "blueprint_launch_input": {
            "title": "Launch Blueprint request.", 
            "required": [
                "api_version", 
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/blueprint_launch_spec"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Launch Blueprint request."
        }, 
        "blueprint_launch_response": {
            "title": "Response containing the application uuid and create action runlog uuid", 
            "required": [
                "api_version", 
                "metadata", 
                "status", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/blueprint_launch_response_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/blueprint_launch_spec"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Response containing the application uuid and create action and runlog uuid"
        }, 
        "blueprint_launch_response_status": {
            "title": "Status of the Blueprint launch.", 
            "type": "object", 
            "properties": {
                "request_id": {
                    "type": "string", 
                    "description": "Request id to track the launch process"
                }
            }, 
            "description": "Status of the Blueprint launch."
        }, 
        "blueprint_launch_spec": {
            "title": "Spec for Blueprint launch.", 
            "type": "object", 
            "properties": {
                "application_name": {
                    "type": "string", 
                    "description": "Application name by which the application need to be created."
                }, 
                "app_profile_reference": {
                    "$ref": "#/definitions/app_profile_reference"
                }, 
                "description": {
                    "type": "string", 
                    "description": "description for blueprint launch", 
                    "maxLength": 5000
                }, 
                "resources": {
                    "description": "Runtime updated blueprint spec.", 
                    "$ref": "#/definitions/blueprint_resources"
                }
            }, 
            "description": "Spec for Blueprint launch."
        }, 
        "blueprint_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/blueprint_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of blueprints"
        }, 
        "blueprint_list_metadata": {
            "title": "Metadata for blueprint list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "blueprint", 
                    "x-ntnx-enum": [
                        "blueprint"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "blueprint_list_metadata_output": {
            "title": "Metadata for blueprint list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "blueprint", 
                    "x-ntnx-enum": [
                        "blueprint"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "blueprint_marketplace_launch_input": {
            "title": "Launch Marketplace Blueprint request.", 
            "required": [
                "api_version", 
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/blueprint_marketplace_launch_spec"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Launch Blueprint request."
        }, 
        "blueprint_marketplace_launch_response": {
            "title": "Response containing the uuid of the newly created app blueprint object", 
            "required": [
                "api_version", 
                "metadata", 
                "status", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/blueprint_marketplace_launch_response_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/blueprint_marketplace_launch_spec"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Response containing the uuid of the newly created app blueprint object"
        }, 
        "blueprint_marketplace_launch_response_status": {
            "title": "Status of the Blueprint.", 
            "type": "object", 
            "properties": {
                "app_blueprint_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "AppBlueprint uuid.", 
                    "format": "UUID"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description for the marketplace item"
                }, 
                "resources": {
                    "$ref": "#/definitions/blueprint_resources_def_status"
                }
            }, 
            "description": "Status of the Blueprint."
        }, 
        "blueprint_marketplace_launch_spec": {
            "title": "Spec for Blueprint launch.", 
            "required": [
                "resources", 
                "app_blueprint_name"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description for the marketplace item"
                }, 
                "environment_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Environment uuid.", 
                    "format": "UUID"
                }, 
                "source_marketplace_version": {
                    "type": "string", 
                    "description": "Indicates version of the source marketplace item of the app blueprint\n"
                }, 
                "app_blueprint_name": {
                    "type": "string", 
                    "description": "Name of the app blueprint to be created."
                }, 
                "source_marketplace_name": {
                    "type": "string", 
                    "description": "Name of the source marketplace item of the app blueprint\n"
                }, 
                "resources": {
                    "description": "Blueprint spec of the marketplace blueprint.", 
                    "$ref": "#/definitions/blueprint_upload_resources"
                }
            }, 
            "description": "Spec for Blueprint launch."
        }, 
        "blueprint_metadata": {
            "title": "blueprint metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when blueprint was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "blueprint", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "blueprint"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "blueprint uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the blueprint is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when blueprint was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the blueprint"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "blueprint name", 
                    "maxLength": 64
                }
            }, 
            "description": "The blueprint kind metadata"
        }, 
        "blueprint_pending_launches_list_response": {
            "title": "Response containing all the pending bp launches", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entites": {
                    "items": {
                        "$ref": "#/definitions/blueprint_pending_launches_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_list_metadata_output"
                }
            }, 
            "description": "Response containing all the bp launch requests which have not completed"
        }, 
        "blueprint_pending_launches_resource": {
            "title": "blueprint launches in progress response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/blueprint_pending_launches_status"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "Response object for the launches in progress for app blueprints"
        }, 
        "blueprint_pending_launches_response": {
            "title": "Response containing the state of the launch", 
            "required": [
                "state", 
                "milestone", 
                "bp_name", 
                "app_name"
            ], 
            "type": "object", 
            "properties": {
                "application_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "application uuid present after the status moves to success", 
                    "format": "UUID"
                }, 
                "state": {
                    "type": "string", 
                    "description": "state of launch which can be pending, running, success, failure"
                }, 
                "blueprint_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "blueprint uuid", 
                    "format": "UUID"
                }, 
                "app_name": {
                    "type": "string", 
                    "description": "name of the application"
                }, 
                "milestone": {
                    "type": "string", 
                    "description": "gives more granularity in status"
                }, 
                "bp_name": {
                    "type": "string", 
                    "description": "name of the blueprint"
                }, 
                "details": {
                    "type": "string", 
                    "description": "additional details about the status of launch"
                }
            }, 
            "description": "Response containing status, milestone reached and application uuid"
        }, 
        "blueprint_pending_launches_status": {
            "title": "Status of the launch", 
            "type": "object", 
            "properties": {
                "application_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "application uuid present after the status moves to success", 
                    "format": "UUID"
                }, 
                "app_name": {
                    "type": "string", 
                    "description": "name of the application"
                }, 
                "state": {
                    "type": "string", 
                    "description": "Status of the launch"
                }, 
                "blueprint_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "blueprint uuid", 
                    "format": "UUID"
                }, 
                "details": {
                    "type": "string", 
                    "description": "additional details about the status of launch"
                }, 
                "milestone": {
                    "type": "string", 
                    "description": "gives more granularity in status"
                }, 
                "bp_name": {
                    "type": "string", 
                    "description": "name of the blueprint"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for app blueprint"
                }
            }, 
            "description": "Response containing state, milestone reached and application uuid"
        }, 
        "blueprint_reference": {
            "title": "Reference to a blueprint", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "blueprint", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "blueprint"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a blueprint"
        }, 
        "blueprint_resources": {
            "title": "Resources for Blueprint.", 
            "type": "object", 
            "properties": {
                "service_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_input"
                    }, 
                    "type": "array", 
                    "description": "Service definitions for Blueprint."
                }, 
                "substrate_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_substrate_input"
                    }, 
                    "type": "array", 
                    "description": "Substrate definitions for Blueprint."
                }, 
                "credential_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_credential_input"
                    }, 
                    "type": "array", 
                    "description": "Credential definitions for Blueprint."
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of blueprint", 
                    "maxLength": 64
                }, 
                "app_profile_list": {
                    "items": {
                        "$ref": "#/definitions/app_profile_input"
                    }, 
                    "type": "array", 
                    "description": "App profile definitions for Blueprint."
                }, 
                "default_credential_local_reference": {
                    "$ref": "#/definitions/app_credential_reference"
                }, 
                "package_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_input"
                    }, 
                    "type": "array", 
                    "description": "Package definitions for Blueprint."
                }, 
                "client_attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Data needed for clients."
                }
            }, 
            "description": "Resources for Blueprint."
        }, 
        "blueprint_resources_def_status": {
            "title": "Status of the Blueprint.", 
            "type": "object", 
            "properties": {
                "service_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_response"
                    }, 
                    "type": "array", 
                    "description": "Service definitions for Blueprint."
                }, 
                "substrate_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_substrate_response"
                    }, 
                    "type": "array", 
                    "description": "Substrate definitions for Blueprint."
                }, 
                "credential_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_credential_response"
                    }, 
                    "type": "array", 
                    "description": "Credential definitions for Blueprint."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Message list for app blueprint"
                }, 
                "app_profile_list": {
                    "items": {
                        "$ref": "#/definitions/app_profile_response"
                    }, 
                    "type": "array", 
                    "description": "App profile definitions for Blueprint."
                }, 
                "default_credential_local_reference": {
                    "$ref": "#/definitions/app_credential_reference"
                }, 
                "package_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_response"
                    }, 
                    "type": "array", 
                    "description": "Package definitions for Blueprint."
                }, 
                "state": {
                    "type": "string", 
                    "description": ""
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of blueprint", 
                    "maxLength": 64
                }, 
                "client_attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Data needed for clients."
                }, 
                "is_cloned": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "Cloned or original blueprint"
                }
            }, 
            "description": "Status of the Blueprint."
        }, 
        "blueprint_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "blueprint", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "blueprint"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "blueprint_upload": {
            "title": "App blueprint upload kind", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/blueprint_upload_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "App blueprint upload kind"
        }, 
        "blueprint_upload_custom_intent_input": {
            "title": "blueprint Intent Entity", 
            "required": [
                "api_version", 
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/blueprint_upload"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/blueprint_metadata"
                }
            }, 
            "description": "An intentful representation of a blueprint"
        }, 
        "blueprint_upload_output": {
            "title": "Upload AppBlueprint output", 
            "type": "object", 
            "properties": {
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "uuid of the newly created AppBlueprint", 
                    "format": "UUID"
                }
            }, 
            "description": "The UUID of the newly created AppBlueprint"
        }, 
        "blueprint_upload_resources": {
            "title": "Resources for Blueprint.", 
            "type": "object", 
            "properties": {
                "service_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_service_input_upload"
                    }, 
                    "type": "array", 
                    "description": "Service definitions for Blueprint."
                }, 
                "substrate_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_substrate_input_upload"
                    }, 
                    "type": "array", 
                    "description": "Substrate definitions for Blueprint."
                }, 
                "credential_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_credential_input_upload"
                    }, 
                    "type": "array", 
                    "description": "Credential definitions for Blueprint."
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of blueprint", 
                    "maxLength": 64
                }, 
                "app_profile_list": {
                    "items": {
                        "$ref": "#/definitions/app_profile_input_upload"
                    }, 
                    "type": "array", 
                    "description": "App profile definitions for Blueprint."
                }, 
                "default_credential_local_reference": {
                    "$ref": "#/definitions/app_credential_reference_upload"
                }, 
                "package_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_package_input_upload"
                    }, 
                    "type": "array", 
                    "description": "Package definitions for Blueprint."
                }, 
                "client_attrs": {
                    "additionalProperties": true, 
                    "type": "object", 
                    "description": "Data needed for clients."
                }
            }, 
            "description": "Resources for Blueprint."
        }, 
        "brownfield_instance_input": {
            "title": "brownfield instance list", 
            "required": [
                "instance_id"
            ], 
            "type": "object", 
            "properties": {
                "instance_id": {
                    "type": "string", 
                    "description": "Id of the vm", 
                    "maxLength": 64
                }, 
                "instance_name": {
                    "type": "string", 
                    "description": "Name of the vm", 
                    "maxLength": 64
                }, 
                "address": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Address of the vm"
                }, 
                "platform_data": {
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }, 
            "description": "Brownfield instance list"
        }, 
        "build_info": {
            "title": "Cluster build details", 
            "required": [
                "build_type", 
                "version", 
                "commit_id", 
                "short_commit_id"
            ], 
            "type": "object", 
            "properties": {
                "commit_id": {
                    "type": "string", 
                    "description": "Last Git commit id which the build is based on."
                }, 
                "version": {
                    "type": "string", 
                    "description": "Numeric version. e.g. \"5.5\""
                }, 
                "short_commit_id": {
                    "type": "string", 
                    "description": "First 6 characters of the last Git commit id."
                }, 
                "full_version": {
                    "type": "string", 
                    "description": "Full version name."
                }, 
                "commit_date": {
                    "type": "string", 
                    "description": "Date/time of the last commit.", 
                    "format": "date-time"
                }, 
                "is_long_term_support": {
                    "type": "boolean", 
                    "description": "Flag to indicate if the AOS release is qualified as long term support.\n"
                }, 
                "build_type": {
                    "type": "string", 
                    "description": "Build type, one of {dbg, opt, release}."
                }
            }, 
            "description": "Cluster build details."
        }, 
        "ca_cert": {
            "title": "CA certificate info", 
            "required": [
                "ca_name", 
                "certificate"
            ], 
            "type": "object", 
            "properties": {
                "ca_name": {
                    "type": "string", 
                    "description": "Name of the certificate authority."
                }, 
                "certificate": {
                    "type": "string", 
                    "description": "Certificate content.", 
                    "format": "byte"
                }
            }, 
            "description": "CA certificate info."
        }, 
        "ca_chain_spec": {
            "title": "CA chain spec", 
            "required": [
                "name", 
                "ca_chain"
            ], 
            "type": "object", 
            "properties": {
                "ca_chain": {
                    "type": "string", 
                    "description": "Content of CA chain", 
                    "format": "byte"
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the CA Chain file", 
                    "maxLength": 64
                }
            }, 
            "description": "CA chain spec"
        }, 
        "category_filter": {
            "title": "A category filter", 
            "required": [
                "params"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "default": "CATEGORIES_MATCH_ANY", 
                    "x-ntnx-enum": [
                        "CATEGORIES_MATCH_ALL", 
                        "CATEGORIES_MATCH_ANY"
                    ], 
                    "type": "string", 
                    "description": "The type of the filter being used."
                }, 
                "kind_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of kinds associated with this filter."
                }, 
                "params": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array"
                    }, 
                    "type": "object", 
                    "description": "A list of category key and list of values."
                }
            }, 
            "description": "A category filter."
        }, 
        "category_key": {
            "title": "Category Key definition.", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the category.", 
                    "maxLength": 64
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the category.", 
                    "maxLength": 1000
                }
            }, 
            "description": "Category key definition."
        }, 
        "category_key_list_response": {
            "title": "Category key list response.", 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/category_key_status"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/category_list_metadata"
                }
            }, 
            "description": "Category key list response."
        }, 
        "category_key_status": {
            "title": "Category Key Definition.", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the category.", 
                    "maxLength": 1000
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the category.", 
                    "maxLength": 64
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "system_defined": {
                    "readOnly": true, 
                    "type": "boolean", 
                    "description": "Specifying whether its a system defined category."
                }
            }, 
            "description": "Category Key Definition."
        }, 
        "category_list_metadata": {
            "title": "Metadata for category list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "category", 
                    "x-ntnx-enum": [
                        "category"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "category_list_metadata_output": {
            "title": "Metadata for category list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "category", 
                    "x-ntnx-enum": [
                        "category"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "category_metadata": {
            "title": "category metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when category was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "category", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "category"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "category uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the category is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when category was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the category"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "category name", 
                    "maxLength": 64
                }
            }, 
            "description": "The category kind metadata"
        }, 
        "category_query_input": {
            "title": "Category Query Input", 
            "type": "object", 
            "properties": {
                "usage_type": {
                    "$ref": "#/definitions/category_query_usage_type"
                }, 
                "group_member_offset": {
                    "type": "integer", 
                    "description": "The offset into the total member set to return per group.", 
                    "format": "int64"
                }, 
                "group_member_count": {
                    "type": "integer", 
                    "description": "The maximum number of members to return per group.", 
                    "format": "int64"
                }, 
                "category_filter": {
                    "$ref": "#/definitions/category_filter"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "Categories query input object."
        }, 
        "category_query_response": {
            "title": "Category Query Response", 
            "type": "object", 
            "properties": {
                "results": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "filtered_entity_count": {
                                "type": "integer", 
                                "description": "Total number of filtered results.", 
                                "format": "int64"
                            }, 
                            "kind": {
                                "type": "string", 
                                "description": "The entity kind."
                            }, 
                            "entity_any_reference_list": {
                                "items": {
                                    "$ref": "#/definitions/entity_reference"
                                }, 
                                "type": "array", 
                                "description": "List of entity references."
                            }, 
                            "total_entity_count": {
                                "type": "integer", 
                                "description": "Total number of the matched results.", 
                                "format": "int64"
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "type": "object", 
                    "description": "Response metadata.", 
                    "properties": {
                        "total_matches": {
                            "type": "integer", 
                            "description": "Total number of matched results.", 
                            "format": "int64"
                        }, 
                        "usage_type": {
                            "$ref": "#/definitions/category_query_usage_type"
                        }, 
                        "group_member_offset": {
                            "type": "integer", 
                            "description": "The offset into the total records set to return per group.\n", 
                            "format": "int64"
                        }, 
                        "group_member_count": {
                            "type": "integer", 
                            "description": "The maximum number of records to return per group.", 
                            "format": "int64"
                        }
                    }
                }
            }, 
            "description": "Categories query response object."
        }, 
        "category_query_usage_type": {
            "x-ntnx-enum": [
                "USED_IN", 
                "APPLIED_TO"
            ], 
            "type": "string", 
            "description": "USED_IN - to get policies in which specified categories are used.\nAPPLIED_TO - to get entities attached to specified categories.\n", 
            "title": "Query Usage Type"
        }, 
        "category_reference": {
            "title": "Reference to a category", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "category", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "category"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a category"
        }, 
        "category_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "category", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "category"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "category_value": {
            "title": "Category Value definition.", 
            "type": "object", 
            "properties": {
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "value": {
                    "type": "string", 
                    "description": "Value for the category.", 
                    "maxLength": 64
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the category value.", 
                    "maxLength": 1000
                }
            }, 
            "description": "Category value definition."
        }, 
        "category_value_list_response": {
            "title": "Category value list response.", 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/category_value_status"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/category_list_metadata"
                }
            }, 
            "description": "Category Value list response."
        }, 
        "category_value_status": {
            "title": "Category Value Definition.", 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the category value.", 
                    "maxLength": 1000
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The name of the category.", 
                    "maxLength": 64
                }, 
                "value": {
                    "type": "string", 
                    "description": "The value of the category.", 
                    "maxLength": 64
                }, 
                "system_defined": {
                    "readOnly": true, 
                    "type": "boolean", 
                    "description": "Specifying whether its a system defined category."
                }
            }, 
            "description": "Category value definition."
        }, 
        "cause_analysis": {
            "title": "Alert cause analysis", 
            "type": "object", 
            "properties": {
                "resolution_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "cause_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "The root cause analysis and possible resolutions."
        }, 
        "cell": {
            "title": "Cell Entity", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the cell", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/cell_resources"
                }
            }, 
            "description": "Cell entity definition"
        }, 
        "cell_def_status": {
            "title": "Cell entity status", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the cell", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/cell_resources"
                }
            }, 
            "description": "Cell entity status definition"
        }, 
        "cell_intent_input": {
            "title": "cell Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/cell"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cell_metadata"
                }
            }, 
            "description": "An intentful representation of a cell"
        }, 
        "cell_intent_resource": {
            "title": "cell Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cell_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cell"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cell_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cell"
        }, 
        "cell_intent_response": {
            "title": "cell Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cell_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cell"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cell_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cell"
        }, 
        "cell_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/cell_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cell_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of cells"
        }, 
        "cell_list_metadata": {
            "title": "Metadata for cell list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "cell", 
                    "x-ntnx-enum": [
                        "cell"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "cell_list_metadata_output": {
            "title": "Metadata for cell list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "cell", 
                    "x-ntnx-enum": [
                        "cell"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "cell_metadata": {
            "title": "cell metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when cell was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "cell", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cell"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "cell uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the cell is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when cell was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the cell"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "cell name", 
                    "maxLength": 64
                }
            }, 
            "description": "The cell kind metadata"
        }, 
        "cell_reference": {
            "title": "Reference to a cell", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cell", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cell"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a cell"
        }, 
        "cell_resources": {
            "title": "Cell Entity", 
            "required": [
                "cell_class", 
                "datacenter_reference"
            ], 
            "type": "object", 
            "properties": {
                "datacenter_reference": {
                    "$ref": "#/definitions/datacenter_reference"
                }, 
                "cell_class": {
                    "type": "string", 
                    "description": "Human readable tag that denotes the type of hardware in a cell as well\nas the networking equipment and setup.\n", 
                    "maxLength": 100
                }
            }, 
            "description": "Datacenter logical cell entity definition."
        }, 
        "cell_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cell", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cell"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "certificate": {
            "title": "Certificate content", 
            "required": [
                "content"
            ], 
            "type": "object", 
            "properties": {
                "content": {
                    "type": "string", 
                    "description": "Certificate content", 
                    "format": "byte"
                }
            }, 
            "description": "Certificate content"
        }, 
        "certificate_spec": {
            "title": "Certificate info", 
            "required": [
                "certificate"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Certificate file name", 
                    "maxLength": 64
                }, 
                "certificate": {
                    "type": "string", 
                    "description": "Certificate content", 
                    "format": "byte"
                }
            }, 
            "description": "Certificate info"
        }, 
        "certificate_spec_upload_input": {
            "title": "Input spec for certificate upload", 
            "required": [
                "spec_list"
            ], 
            "type": "object", 
            "properties": {
                "spec_list": {
                    "items": {
                        "$ref": "#/definitions/certificate_spec"
                    }, 
                    "type": "array", 
                    "description": "List of certificate specs"
                }
            }, 
            "description": "Input spec for certificate upload."
        }, 
        "certification_signing_info": {
            "title": "Customer information in Certificate Signing Request", 
            "type": "object", 
            "properties": {
                "city": {
                    "type": "string", 
                    "description": "The Town or City where customer's business is located."
                }, 
                "state": {
                    "type": "string", 
                    "description": "The Province, Region, County or State where customer business is\nis located.\n"
                }, 
                "country_code": {
                    "type": "string", 
                    "description": "Two-letter ISO code for Country where customer's organization is\nlocated.\n"
                }, 
                "common_name": {
                    "type": "string", 
                    "description": "Common name of the organization or host server"
                }, 
                "organization": {
                    "type": "string", 
                    "description": "Name of the customer business."
                }, 
                "email_address": {
                    "type": "string", 
                    "description": "Email address of the certificate administrator."
                }, 
                "common_name_suffix": {
                    "type": "string", 
                    "description": "Common name is by default <node_uuid>.nutanix.com, but if a customer\nwants something instead of nutanix.com they can specify it here.\n"
                }
            }, 
            "description": "Customer information used in Certificate Signing Request for\ncreating digital certificates.\n"
        }, 
        "changed_regions_list_metadata": {
            "title": "Metadata for changed_regions list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "changed_regions", 
                    "x-ntnx-enum": [
                        "changed_regions"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "changed_regions_list_metadata_output": {
            "title": "Metadata for changed_regions list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "changed_regions", 
                    "x-ntnx-enum": [
                        "changed_regions"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "changed_regions_metadata": {
            "title": "changed_regions metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when changed_regions was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "changed_regions", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "changed_regions"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "changed_regions uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the changed_regions is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when changed_regions was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the changed_regions"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "changed_regions name", 
                    "maxLength": 64
                }
            }, 
            "description": "The changed_regions kind metadata"
        }, 
        "changed_regions_reference": {
            "title": "Reference to a changed_regions", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "changed_regions", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "changed_regions"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a changed_regions"
        }, 
        "changed_regions_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "changed_regions", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "changed_regions"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "checksum": {
            "title": "Image checksum", 
            "required": [
                "checksum_algorithm", 
                "checksum_value"
            ], 
            "properties": {
                "checksum_algorithm": {
                    "$ref": "#/definitions/checksum_algorithm"
                }, 
                "checksum_value": {
                    "type": "string", 
                    "format": "bytes"
                }
            }, 
            "description": "Image checksum"
        }, 
        "checksum_algorithm": {
            "x-ntnx-enum": [
                "SHA_256", 
                "SHA_1"
            ], 
            "type": "string", 
            "description": "The type of checksum calculated for the image", 
            "title": "Checksum algorithm"
        }, 
        "citrix_connector_config_details": {
            "title": "Citrix Connector details.", 
            "type": "object", 
            "properties": {
                "citrix_vm_reference_list": {
                    "items": {
                        "$ref": "#/definitions/vm_reference"
                    }, 
                    "type": "array", 
                    "description": "Reference to the list of vm ids registered with citrix cloud."
                }, 
                "client_secret": {
                    "type": "string", 
                    "description": "The client secret for the Citrix Cloud."
                }, 
                "customer_id": {
                    "type": "string", 
                    "description": "The customer id registered with Citrix Cloud."
                }, 
                "client_id": {
                    "type": "string", 
                    "description": "The client id for the Citrix Cloud."
                }, 
                "resource_location": {
                    "$ref": "#/definitions/citrix_resource_location"
                }
            }, 
            "description": "Citrix Connector details."
        }, 
        "citrix_connector_config_details_spec": {
            "title": "Citrix Connector details.", 
            "type": "object", 
            "properties": {
                "citrix_vm_reference_list": {
                    "items": {
                        "$ref": "#/definitions/vm_reference"
                    }, 
                    "type": "array", 
                    "description": "Reference to the list of vm ids registered with citrix cloud."
                }, 
                "client_secret": {
                    "type": "string", 
                    "description": "The client secret for the Citrix Cloud."
                }, 
                "customer_id": {
                    "type": "string", 
                    "description": "The customer id registered with Citrix Cloud.", 
                    "maxLength": 200
                }, 
                "client_id": {
                    "type": "string", 
                    "description": "The client id for the Citrix Cloud.", 
                    "maxLength": 200
                }, 
                "resource_location": {
                    "$ref": "#/definitions/citrix_resource_location_spec"
                }
            }, 
            "description": "Citrix Connector details."
        }, 
        "citrix_resource_location": {
            "title": "Citrix Resource Location.", 
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The resource location id."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The resource location name."
                }
            }, 
            "description": "Resource Location on Citrix Cloud."
        }, 
        "citrix_resource_location_spec": {
            "title": "Citrix Resource Location.", 
            "type": "object", 
            "properties": {
                "id": {
                    "type": "string", 
                    "description": "The resource location id.", 
                    "maxLength": 200
                }, 
                "name": {
                    "type": "string", 
                    "description": "The resource location name.", 
                    "maxLength": 200
                }
            }, 
            "description": "Resource Location on Citrix Cloud."
        }, 
        "client_auth": {
            "title": "Client authentication config", 
            "required": [
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "default": "DISABLED", 
                    "x-ntnx-enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "Status of client authentication."
                }, 
                "ca_chain": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Content of CA chain certificate.", 
                    "format": "byte"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Name of CA chain file.", 
                    "maxLength": 64
                }
            }, 
            "description": "Client authentication config."
        }, 
        "cloud_config_response": {
            "title": "Nutanix Hosted Cloud Config Response.", 
            "required": [
                "url"
            ], 
            "type": "object", 
            "properties": {
                "url": {
                    "type": "string", 
                    "description": "URL of the Nutanix hosted Cloud.", 
                    "maxLength": 2083
                }
            }, 
            "description": "Nutanix hosted cloud Config response definition."
        }, 
        "cloud_credentials": {
            "title": "Cloud Credentials Spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "User friendly name for the credentials.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/cloud_credentials_resources"
                }
            }, 
            "description": "Cloud credentials spec"
        }, 
        "cloud_credentials_def_status": {
            "title": "Cloud credentials Configuration", 
            "required": [
                "id", 
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "id": {
                    "type": "integer", 
                    "description": "ID to uniquely identify cloud credentials", 
                    "format": "int64"
                }, 
                "resources": {
                    "$ref": "#/definitions/cloud_credentials_resources"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Credentials name."
                }
            }, 
            "description": "Cloud credentials configuration"
        }, 
        "cloud_credentials_intent_input": {
            "title": "cloud_credentials Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/cloud_credentials"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_credentials_metadata"
                }
            }, 
            "description": "An intentful representation of a cloud_credentials"
        }, 
        "cloud_credentials_intent_resource": {
            "title": "cloud_credentials Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cloud_credentials_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cloud_credentials"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_credentials_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cloud_credentials"
        }, 
        "cloud_credentials_intent_response": {
            "title": "cloud_credentials Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cloud_credentials_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cloud_credentials"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_credentials_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cloud_credentials"
        }, 
        "cloud_credentials_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/cloud_credentials_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_credentials_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of cloud_credentialss"
        }, 
        "cloud_credentials_list_metadata": {
            "title": "Metadata for cloud_credentials list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "cloud_credentials", 
                    "x-ntnx-enum": [
                        "cloud_credentials"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "cloud_credentials_list_metadata_output": {
            "title": "Metadata for cloud_credentials list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "cloud_credentials", 
                    "x-ntnx-enum": [
                        "cloud_credentials"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "cloud_credentials_metadata": {
            "title": "cloud_credentials metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when cloud_credentials was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "cloud_credentials", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cloud_credentials"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "cloud_credentials uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the cloud_credentials is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when cloud_credentials was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the cloud_credentials"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "cloud_credentials name", 
                    "maxLength": 64
                }
            }, 
            "description": "The cloud_credentials kind metadata"
        }, 
        "cloud_credentials_reference": {
            "title": "Reference to a cloud_credentials", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cloud_credentials", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cloud_credentials"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a cloud_credentials"
        }, 
        "cloud_credentials_resources": {
            "title": "Cloud Credentials resources", 
            "required": [
                "cloud_type"
            ], 
            "type": "object", 
            "properties": {
                "is_default": {
                    "type": "boolean", 
                    "description": "Indicates if it is the default credentials"
                }, 
                "key_id": {
                    "type": "string", 
                    "description": "Access key for AWS, or subscription id for Azure\n"
                }, 
                "cloud_type": {
                    "$ref": "#/definitions/cloud_type"
                }, 
                "secure_id": {
                    "type": "string", 
                    "description": "Secret key for AWS, or full file path of the Azure client certificate\nfile(<file_name>.pem)\n"
                }
            }, 
            "description": "Cloud credentials resources"
        }, 
        "cloud_credentials_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cloud_credentials", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cloud_credentials"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "cloud_trust": {
            "title": "Cloud Pairing creation/modification spec.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Cloud Trust name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/cloud_trust_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the cloud trust.", 
                    "maxLength": 1000
                }
            }, 
            "description": "Cloud Pairing creation/modification spec."
        }, 
        "cloud_trust_def_status": {
            "title": "Cloud Pairing status.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Cloud Trust name."
                }, 
                "resources": {
                    "$ref": "#/definitions/cloud_trust_response"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the cloud trust."
                }
            }, 
            "description": "Cloud Pairing status."
        }, 
        "cloud_trust_intent_input": {
            "title": "cloud_trust Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/cloud_trust"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_trust_metadata"
                }
            }, 
            "description": "An intentful representation of a cloud_trust"
        }, 
        "cloud_trust_intent_resource": {
            "title": "cloud_trust Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cloud_trust_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cloud_trust"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_trust_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cloud_trust"
        }, 
        "cloud_trust_intent_response": {
            "title": "cloud_trust Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cloud_trust_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cloud_trust"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_trust_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cloud_trust"
        }, 
        "cloud_trust_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/cloud_trust_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cloud_trust_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of cloud_trusts"
        }, 
        "cloud_trust_list_metadata": {
            "title": "Metadata for cloud_trust list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "cloud_trust", 
                    "x-ntnx-enum": [
                        "cloud_trust"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "cloud_trust_list_metadata_output": {
            "title": "Metadata for cloud_trust list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "cloud_trust", 
                    "x-ntnx-enum": [
                        "cloud_trust"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "cloud_trust_metadata": {
            "title": "cloud_trust metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when cloud_trust was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "cloud_trust", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cloud_trust"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "cloud_trust uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the cloud_trust is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when cloud_trust was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the cloud_trust"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "cloud_trust name", 
                    "maxLength": 64
                }
            }, 
            "description": "The cloud_trust kind metadata"
        }, 
        "cloud_trust_reference": {
            "title": "Reference to a cloud_trust", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cloud_trust", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cloud_trust"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a cloud_trust"
        }, 
        "cloud_trust_resources": {
            "title": "Cloud Trusts Resources.", 
            "type": "object", 
            "properties": {
                "url": {
                    "type": "string", 
                    "description": "URL of the Cloud (Nutanix hosted cloud/ Onprem Cloud) to pair to.", 
                    "maxLength": 2083
                }, 
                "username": {
                    "type": "string", 
                    "description": "Username to be used for basic authentication."
                }, 
                "password": {
                    "type": "string", 
                    "description": "Password to be used for basic authentication."
                }, 
                "cloud_type": {
                    "description": "Type of cloud to pair to.", 
                    "$ref": "#/definitions/cloud_type"
                }
            }, 
            "description": "Cloud trusts resources definition."
        }, 
        "cloud_trust_response": {
            "title": "Cloud Trusts Response.", 
            "required": [
                "remote_connection_reference"
            ], 
            "type": "object", 
            "properties": {
                "url": {
                    "type": "string", 
                    "description": "URL of the Cloud (Nutanix hosted cloud/ Onprem Cloud) to pair to.", 
                    "maxLength": 2083
                }, 
                "username": {
                    "type": "string", 
                    "description": "Username to be used for basic authentication."
                }, 
                "password": {
                    "type": "string", 
                    "description": "Password to be used for basic authentication."
                }, 
                "cloud_type": {
                    "description": "Type of cloud to pair to.", 
                    "$ref": "#/definitions/cloud_type"
                }, 
                "remote_connection_reference": {
                    "description": "Reference of the remote connection created while cloud pairing\n", 
                    "$ref": "#/definitions/remote_connection_reference"
                }
            }, 
            "description": "Cloud trusts response definition."
        }, 
        "cloud_trust_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cloud_trust", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cloud_trust"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "cloud_type": {
            "x-ntnx-enum": [
                "ONPREM_CLOUD", 
                "NUTANIX_HOSTED_CLOUD", 
                "AWS", 
                "AZURE"
            ], 
            "type": "string", 
            "description": "Types of cloud.", 
            "title": "Cloud Type"
        }, 
        "cluster": {
            "title": "Cluster Definition", 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Cluster Name."
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Cluster resources.", 
                    "properties": {
                        "config": {
                            "$ref": "#/definitions/cluster_config_spec"
                        }, 
                        "network": {
                            "$ref": "#/definitions/cluster_network"
                        }, 
                        "runtime_status_list": {
                            "items": {
                                "x-ntnx-enum": [
                                    "UPGRADE_QUEUED", 
                                    "UPGRADE_CANCELLED", 
                                    "UPGRADE_SCHEDULED", 
                                    "SSP_CONFIG_MIGRATED"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "Cluster onging operations."
                        }
                    }
                }
            }, 
            "description": "Cluster Definition."
        }, 
        "cluster_analysis": {
            "title": "Cluster Analysis Statistics", 
            "type": "object", 
            "properties": {
                "vm_efficiency_map": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Map of cluster efficiency which includes numbers of inefficient\nvms. The value is populated by analytics on PC.\n"
                }
            }, 
            "description": "Cluster analysis related values."
        }, 
        "cluster_capability": {
            "title": "Status of capability of each cluster for a feature.", 
            "type": "object", 
            "properties": {
                "cluster_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Cluster UUID of a cluster managed by Prism Central.\n", 
                    "format": "UUID"
                }, 
                "cluster_name": {
                    "type": "string", 
                    "description": "Name of the cluster."
                }, 
                "hypervisor_list": {
                    "items": {
                        "$ref": "#/definitions/hypervisor_info"
                    }, 
                    "type": "array", 
                    "description": "Type and version of hypervisors on the cluster."
                }, 
                "aos_version": {
                    "type": "string", 
                    "description": "AOS version of the cluster."
                }, 
                "is_capable": {
                    "type": "boolean", 
                    "description": "If this cluster is capable for a feature."
                }
            }, 
            "description": "Feature capability on a cluster."
        }, 
        "cluster_capability_status": {
            "title": "The capability status of a cluster for a feature.", 
            "type": "object", 
            "properties": {
                "cluster_capability_list": {
                    "items": {
                        "$ref": "#/definitions/cluster_capability"
                    }, 
                    "type": "array", 
                    "description": "Capability of the feature per cluster managed by Prism Central.\n"
                }
            }, 
            "description": "The capability of a cluster for a feature - whether a cluster is capable for enabling a feature or not.\n"
        }, 
        "cluster_config": {
            "title": "Cluster Configuration", 
            "type": "object", 
            "properties": {
                "gpu_driver_version": {
                    "type": "string", 
                    "description": "GPU driver version."
                }, 
                "client_auth": {
                    "$ref": "#/definitions/client_auth"
                }, 
                "software_map": {
                    "additionalProperties": {
                        "$ref": "#/definitions/cluster_software"
                    }, 
                    "type": "object", 
                    "description": "Map of software on the cluster with software type as the\nkey.\n"
                }, 
                "encryption_status": {
                    "$ref": "#/definitions/encryption_status"
                }, 
                "ssl_key": {
                    "readOnly": true, 
                    "$ref": "#/definitions/ssl_key"
                }, 
                "service_list": {
                    "readOnly": true, 
                    "$ref": "#/definitions/cluster_service_list"
                }, 
                "certification_signing_info": {
                    "$ref": "#/definitions/certification_signing_info"
                }, 
                "redundancy_factor": {
                    "type": "integer", 
                    "description": "Cluster supported redundancy factor.", 
                    "format": "int32"
                }, 
                "external_configurations": {
                    "description": "External Connector Configurations.", 
                    "$ref": "#/definitions/external_configurations"
                }, 
                "ca_certificate_list": {
                    "items": {
                        "$ref": "#/definitions/ca_cert"
                    }, 
                    "readOnly": true, 
                    "type": "array", 
                    "description": "List of cluster trusted CA certificates."
                }, 
                "enabled_feature_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "LOCK_DOWN_ENABLED", 
                            "PASSWORD_REMOTE_LOGIN_ENABLED", 
                            "SHADOW_CLONES_ENABLED", 
                            "COMMON_CRITERIA_MODE_ENABLED", 
                            "SSP_CONFIGURED", 
                            "ACS_ENABLED", 
                            "NETWORK_FLOW_STATS_COLLECTOR_ENABLED"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Array of enabled features."
                }, 
                "is_available": {
                    "readOnly": true, 
                    "type": "boolean", 
                    "description": "Indicates if cluster is available to contact."
                }, 
                "timezone": {
                    "type": "string", 
                    "description": "Zone name used in value of TZ environment variable."
                }, 
                "cluster_arch": {
                    "readOnly": true, 
                    "type": "string", 
                    "x-ntnx-enum": [
                        "X86_64", 
                        "PPC64LE"
                    ], 
                    "description": "Cluster architecture."
                }, 
                "management_server_list": {
                    "items": {
                        "$ref": "#/definitions/cluster_management_server"
                    }, 
                    "readOnly": true, 
                    "type": "array", 
                    "description": "List of cluster management servers."
                }, 
                "authorized_public_key_list": {
                    "items": {
                        "$ref": "#/definitions/public_key"
                    }, 
                    "type": "array", 
                    "description": "List of valid ssh keys for the cluster."
                }, 
                "supported_information_verbosity": {
                    "default": "BASIC_PLUS_CORE_DUMP", 
                    "x-ntnx-enum": [
                        "NOTHING", 
                        "BASIC", 
                        "BASIC_PLUS_CORE_DUMP", 
                        "ALL"
                    ], 
                    "type": "string", 
                    "description": "Verbosity level settings for populating support information.\n- 'Nothing': Send nothing\n- 'Basic': Send basic information - skip core dump and hypervisor\n           stats information\n- 'BasicPlusCoreDump': Send basic and core dump information\n- 'All': Send all information\n"
                }, 
                "domain_awareness_level": {
                    "default": "NODE", 
                    "x-ntnx-enum": [
                        "NODE", 
                        "BLOCK", 
                        "RACK"
                    ], 
                    "type": "string", 
                    "description": "Domain awareness supported on cluster."
                }, 
                "build": {
                    "readOnly": true, 
                    "$ref": "#/definitions/build_info"
                }, 
                "operation_mode": {
                    "$ref": "#/definitions/cluster_operation_mode"
                }
            }, 
            "description": "Cluster Configuration."
        }, 
        "cluster_config_spec": {
            "title": "Cluster Configuration", 
            "type": "object", 
            "properties": {
                "gpu_driver_version": {
                    "type": "string", 
                    "description": "GPU driver version."
                }, 
                "client_auth": {
                    "$ref": "#/definitions/client_auth"
                }, 
                "authorized_public_key_list": {
                    "items": {
                        "$ref": "#/definitions/public_key"
                    }, 
                    "type": "array", 
                    "description": "List of valid ssh keys for the cluster."
                }, 
                "software_map": {
                    "additionalProperties": {
                        "$ref": "#/definitions/cluster_software"
                    }, 
                    "type": "object", 
                    "description": "Map of software on the cluster with software type as the\nkey.\n"
                }, 
                "encryption_status": {
                    "$ref": "#/definitions/encryption_status"
                }, 
                "supported_information_verbosity": {
                    "default": "BASIC_PLUS_CORE_DUMP", 
                    "x-ntnx-enum": [
                        "NOTHING", 
                        "BASIC", 
                        "BASIC_PLUS_CORE_DUMP", 
                        "ALL"
                    ], 
                    "type": "string", 
                    "description": "Verbosity level settings for populating support information.\n- 'Nothing': Send nothing\n- 'Basic': Send basic information - skip core dump and hypervisor\n           stats information\n- 'BasicPlusCoreDump': Send basic and core dump information\n- 'All': Send all information\n"
                }, 
                "certification_signing_info": {
                    "$ref": "#/definitions/certification_signing_info"
                }, 
                "redundancy_factor": {
                    "type": "integer", 
                    "description": "Cluster supported redundancy factor. Default is 2.", 
                    "format": "int32"
                }, 
                "external_configurations": {
                    "description": "External Connector Configurations.", 
                    "$ref": "#/definitions/external_configurations_spec"
                }, 
                "domain_awareness_level": {
                    "default": "NODE", 
                    "x-ntnx-enum": [
                        "NODE", 
                        "BLOCK", 
                        "RACK"
                    ], 
                    "type": "string", 
                    "description": "Domain awareness supported on cluster."
                }, 
                "enabled_feature_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "LOCK_DOWN_ENABLED", 
                            "PASSWORD_REMOTE_LOGIN_ENABLED", 
                            "SHADOW_CLONES_ENABLED", 
                            "COMMON_CRITERIA_MODE_ENABLED", 
                            "SSP_CONFIGURED", 
                            "ACS_ENABLED", 
                            "NETWORK_FLOW_STATS_COLLECTOR_ENABLED"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Array of enabled features."
                }, 
                "timezone": {
                    "type": "string", 
                    "description": "Zone name used in value of TZ environment variable."
                }, 
                "operation_mode": {
                    "$ref": "#/definitions/cluster_operation_mode"
                }
            }, 
            "description": "Cluster Configuration."
        }, 
        "cluster_def_status": {
            "title": "Cluster Status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The state of the cluster entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Cluster Name."
                }, 
                "resources": {
                    "required": [
                        "config", 
                        "network"
                    ], 
                    "type": "object", 
                    "description": "Cluster resources.", 
                    "properties": {
                        "nodes": {
                            "$ref": "#/definitions/cluster_nodes"
                        }, 
                        "config": {
                            "$ref": "#/definitions/cluster_config"
                        }, 
                        "network": {
                            "$ref": "#/definitions/cluster_network"
                        }, 
                        "analysis": {
                            "$ref": "#/definitions/cluster_analysis"
                        }, 
                        "runtime_status_list": {
                            "items": {
                                "x-ntnx-enum": [
                                    "UPGRADE_QUEUED", 
                                    "UPGRADE_CANCELLED", 
                                    "UPGRADE_IN_PROGRESS", 
                                    "UPGRADE_SCHEDULED", 
                                    "HAVE_SELF_ENCRYPTING_DRIVE", 
                                    "SSP_CONFIG_OWNER"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "Cluster current attributes and onging operations."
                        }
                    }
                }
            }, 
            "description": "Cluster status definition.  A Nutanix cluster is comprised of three or\nmore Nutanix nodes. Each node in the cluster contains memory, CPU, RAM,\nand storage (SSD/HDD). Each node in the cluster runs standard hypervisor\nsuch as VMware vSphere, Microsoft Hyper-V, or AHV. A Controller VM (CVM)\nruns on each node in the cluster. The CVM enables each node to share\nlocal storage from all nodes in the cluster.\n"
        }, 
        "cluster_domain_server": {
            "title": "Domain Server", 
            "required": [
                "name"
            ], 
            "type": "object", 
            "properties": {
                "nameserver": {
                    "type": "string", 
                    "description": "The IP of the nameserver that can resolve the domain name. Must set\nwhen joining the domain.\n"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Joined domain name. In 'put' request, empty name will unjoin the\ncluster from current domain.\n"
                }, 
                "domain_credentials": {
                    "$ref": "#/definitions/credentials"
                }
            }, 
            "description": "Cluster domain server. Only applied to the cluster with all Hyper-V hosts.\n"
        }, 
        "cluster_intent_input": {
            "title": "cluster Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/cluster"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cluster_metadata"
                }
            }, 
            "description": "An intentful representation of a cluster"
        }, 
        "cluster_intent_resource": {
            "title": "cluster Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cluster_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cluster"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cluster_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cluster"
        }, 
        "cluster_intent_response": {
            "title": "cluster Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/cluster_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/cluster"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cluster_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a cluster"
        }, 
        "cluster_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/cluster_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/cluster_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of clusters"
        }, 
        "cluster_list_metadata": {
            "title": "Metadata for cluster list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "cluster", 
                    "x-ntnx-enum": [
                        "cluster"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "cluster_list_metadata_output": {
            "title": "Metadata for cluster list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "cluster", 
                    "x-ntnx-enum": [
                        "cluster"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "cluster_management_server": {
            "title": "Cluster Management Server", 
            "required": [
                "ip", 
                "type"
            ], 
            "type": "object", 
            "properties": {
                "drs_enabled": {
                    "type": "boolean", 
                    "description": "Denotes if DRS is enabled or not."
                }, 
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "VCENTER"
                    ], 
                    "type": "string"
                }, 
                "status_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "REGISTERED", 
                            "IN_USE"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Array of management server status: - 'REGISTERED': Indicates whether the server is registered with\n                Nutanix or not.\n- 'IN_USE': Indicates whether any host is managed by this server or\n            not.\n"
                }
            }, 
            "description": "Cluster Management server information."
        }, 
        "cluster_metadata": {
            "title": "cluster metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when cluster was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "cluster", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cluster"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "cluster uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the cluster is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when cluster was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the cluster"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "cluster name", 
                    "maxLength": 64
                }
            }, 
            "description": "The cluster kind metadata"
        }, 
        "cluster_network": {
            "title": "Cluster Network Configuration", 
            "type": "object", 
            "properties": {
                "http_proxy_whitelist": {
                    "items": {
                        "$ref": "#/definitions/http_proxy_whitelist"
                    }, 
                    "type": "array", 
                    "description": "HTTP proxy whitelist."
                }, 
                "masquerading_port": {
                    "type": "integer", 
                    "description": "Port used together with masquerading_ip to connect to the cluster.\n", 
                    "format": "int32"
                }, 
                "masquerading_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The cluster NAT'd or proxy IP which maps to the cluster local IP.\n"
                }, 
                "external_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The local IP of cluster visible externally."
                }, 
                "http_proxy_list": {
                    "items": {
                        "$ref": "#/definitions/cluster_network_entity"
                    }, 
                    "type": "array", 
                    "description": "List of proxies to connect to the service centers."
                }, 
                "smtp_server": {
                    "$ref": "#/definitions/smtp_server"
                }, 
                "ntp_server_ip_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The list of IP addresses or FQDNs of the NTP servers."
                }, 
                "external_subnet": {
                    "default": "172.16.0.0/255.240.0.0", 
                    "type": "string", 
                    "description": "External subnet for cross server communication. The format is\nIP/netmask.\n"
                }, 
                "external_data_services_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The cluster IP address that provides external entities access to\nvarious cluster data services.\n"
                }, 
                "domain_server": {
                    "$ref": "#/definitions/cluster_domain_server"
                }, 
                "name_server_ip_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The list of IP addresses of the name servers."
                }, 
                "nfs_subnet_whitelist": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Comma separated list of subnets (of the form 'a.b.c.d/l.m.n.o') that\nare allowed to send NFS requests to this container. If not specified,\nthe global NFS whitelist will be looked up for access permission.\nThe internal subnet is always automatically considered part of the\nwhitelist, even if the field below does not explicitly specify it.\nSimilarly, all the hypervisor IPs are considered part of the\nwhitelist. Finally, to permit debugging, all of the SVMs local IPs\nare considered to be implicitly part of the whitelist.\n"
                }, 
                "internal_subnet": {
                    "default": "192.168.5.0/255.255.255.0", 
                    "type": "string", 
                    "description": "The internal subnet is local to every server - its not visible\noutside.iSCSI requests generated internally within the appliance\n(by user VMs or VMFS) are sent to the internal subnet. The format is\nIP/netmask.\n"
                }
            }, 
            "description": "Cluster network."
        }, 
        "cluster_network_entity": {
            "title": "Cluster Network Entity", 
            "required": [
                "address"
            ], 
            "type": "object", 
            "properties": {
                "credentials": {
                    "$ref": "#/definitions/credentials"
                }, 
                "address": {
                    "$ref": "#/definitions/address"
                }, 
                "proxy_type_list": {
                    "items": {
                        "default": "HTTP", 
                        "x-ntnx-enum": [
                            "HTTP", 
                            "HTTPS", 
                            "SOCKS"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Cluster network entity."
        }, 
        "cluster_nodes": {
            "title": "Cluster Nodes", 
            "type": "object", 
            "properties": {
                "hypervisor_server_list": {
                    "items": {
                        "$ref": "#/definitions/hypervisor_server"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }
            }, 
            "description": "Node info for this cluster."
        }, 
        "cluster_operation_mode": {
            "x-ntnx-enum": [
                "NORMAL", 
                "READ_ONLY", 
                "STAND_ALONE", 
                "SWITCH_TO_TWO_NODE", 
                "OVERRIDE"
            ], 
            "type": "string", 
            "description": "Cluster operation mode. - 'NORMAL': Cluster is operating normally. - 'READ_ONLY': Cluster is operating in read only mode. - 'STAND_ALONE': Only one node is operational in the cluster. This is\n                 valid only for single node or two node clusters.\n- 'SWITCH_TO_TWO_NODE': Cluster is moving from single node to two node\n                        cluster.\n- 'OVERRIDE': Valid only for single node cluster. If the user wants to\n              run vms on a single node cluster in read only mode, he\n              can set the cluster peration mode to override. Writes\n              will be allowed in override mode.\n", 
            "title": "Cluster operation mode"
        }, 
        "cluster_reference": {
            "title": "Reference to a cluster", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cluster", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cluster"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a cluster"
        }, 
        "cluster_service_list": {
            "items": {
                "default": "AOS", 
                "x-ntnx-enum": [
                    "AOS", 
                    "PRISM_CENTRAL", 
                    "CLOUD_DATA_GATEWAY", 
                    "AFS", 
                    "WITNESS", 
                    "XI_PORTAL", 
                    "ONE_NODE", 
                    "TWO_NODE"
                ], 
                "type": "string"
            }, 
            "type": "array", 
            "description": "Array of enabled cluster services. For example, a cluster can function\nas both AOS and cloud data gateway.\n- 'AOS': Regular Prism Element\n- 'PRISM_CENTRAL': Prism Central\n- 'CLOUD_DATA_GATEWAY': Cloud backup and DR gateway\n- 'AFS': Cluster for file server\n- 'WITNESS' : Witness cluster\n- 'XI_PORTAL': Xi cluster\n- 'ONE_NODE_CLUSTER': Single node backup cluster\n- 'TWO_NODE_CLUSTER': Two node cluster\n", 
            "title": "List of Cluster Services"
        }, 
        "cluster_software": {
            "title": "Cluster software", 
            "required": [
                "software_type", 
                "version"
            ], 
            "properties": {
                "status": {
                    "default": "INSTALLED", 
                    "x-ntnx-enum": [
                        "INSTALLED", 
                        "UPGRADING", 
                        "DOWNLOADED"
                    ], 
                    "type": "string", 
                    "description": "Current software status."
                }, 
                "version": {
                    "type": "string"
                }, 
                "software_type": {
                    "$ref": "#/definitions/software_type"
                }
            }, 
            "description": "Cluster software."
        }, 
        "cluster_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "cluster", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "cluster"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "common_report_config": {
            "title": "Common Report Config creation/modification spec.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the common report config.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "title": "Common Report Config Resources.", 
                    "type": "object", 
                    "properties": {
                        "report_customization": {
                            "$ref": "#/definitions/report_customization"
                        }, 
                        "retention_policy": {
                            "$ref": "#/definitions/retention_policy"
                        }, 
                        "description": {
                            "type": "string", 
                            "description": "Description of the common report config.", 
                            "maxLength": 1000
                        }, 
                        "notification_policy": {
                            "$ref": "#/definitions/notification_policy"
                        }
                    }, 
                    "description": "Common report config resources definition."
                }
            }, 
            "description": "Common Report Config creation/modification spec."
        }, 
        "common_report_config_def_status": {
            "title": "Common Report Config creation/modification status.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The state of the common report config entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the common report config."
                }, 
                "resources": {
                    "title": "Common Report Config Resources.", 
                    "type": "object", 
                    "properties": {
                        "report_customization": {
                            "$ref": "#/definitions/report_customization"
                        }, 
                        "retention_policy": {
                            "$ref": "#/definitions/retention_policy"
                        }, 
                        "description": {
                            "type": "string", 
                            "description": "Description of the common report config."
                        }, 
                        "notification_policy": {
                            "$ref": "#/definitions/notification_policy"
                        }
                    }, 
                    "description": "Common report config resources definition."
                }
            }, 
            "description": "Common Report Config creation/modification status."
        }, 
        "common_report_config_intent_input": {
            "title": "common_report_config Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/common_report_config"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/common_report_config_metadata"
                }
            }, 
            "description": "An intentful representation of a common_report_config"
        }, 
        "common_report_config_intent_resource": {
            "title": "common_report_config Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/common_report_config_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/common_report_config"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/common_report_config_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a common_report_config"
        }, 
        "common_report_config_intent_response": {
            "title": "common_report_config Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/common_report_config_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/common_report_config"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/common_report_config_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a common_report_config"
        }, 
        "common_report_config_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/common_report_config_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/common_report_config_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of common_report_configs"
        }, 
        "common_report_config_list_metadata": {
            "title": "Metadata for common_report_config list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "common_report_config", 
                    "x-ntnx-enum": [
                        "common_report_config"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "common_report_config_list_metadata_output": {
            "title": "Metadata for common_report_config list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "common_report_config", 
                    "x-ntnx-enum": [
                        "common_report_config"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "common_report_config_metadata": {
            "title": "common_report_config metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when common_report_config was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "common_report_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "common_report_config"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "common_report_config uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the common_report_config is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when common_report_config was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the common_report_config"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "common_report_config name", 
                    "maxLength": 64
                }
            }, 
            "description": "The common_report_config kind metadata"
        }, 
        "common_report_config_reference": {
            "title": "Reference to a common_report_config", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "common_report_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "common_report_config"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a common_report_config"
        }, 
        "common_report_config_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "common_report_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "common_report_config"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "component_instance_parameters": {
            "additionalProperties": {
                "type": "string"
            }, 
            "type": "object", 
            "description": "The trigger or action required input parameter value map, or the output\nparameters.\n", 
            "title": "Component instance parameters"
        }, 
        "component_validation_error": {
            "title": "Component validation error", 
            "type": "object", 
            "properties": {
                "instance_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Id to uniquely identify action/trigger in instance list.", 
                    "format": "UUID"
                }, 
                "error_object_list": {
                    "items": {
                        "$ref": "#/definitions/error_message_object"
                    }, 
                    "type": "array", 
                    "description": "list of error message objects."
                }, 
                "parameter_error_list": {
                    "items": {
                        "$ref": "#/definitions/parameter_error"
                    }, 
                    "type": "array", 
                    "description": "list of parameter error messages."
                }, 
                "component_type": {
                    "type": "string", 
                    "description": "component type like action or trigger."
                }, 
                "component_name": {
                    "type": "string", 
                    "description": "name of the component."
                }
            }, 
            "description": "validation errors in action rule."
        }, 
        "composite_response": {
            "title": "Composite Response Definition", 
            "type": "object", 
            "properties": {
                "type": {
                    "x-ntnx-enum": [
                        "ONEOF", 
                        "ALL"
                    ], 
                    "type": "string", 
                    "description": "Type of the response."
                }, 
                "data_list": {
                    "items": {
                        "type": "object"
                    }, 
                    "type": "array", 
                    "description": "List containing response. This contains base_response object definiton."
                }, 
                "layout": {
                    "x-ntnx-enum": [
                        "ADJACENT", 
                        "STACKED"
                    ], 
                    "type": "string", 
                    "description": "Layout of the composite response."
                }
            }, 
            "description": "Composite response object defintion."
        }, 
        "configuration_info": {
            "title": "Information needed prior to enable the service", 
            "type": "object", 
            "properties": {
                "original_memory_bytes": {
                    "type": "number", 
                    "description": "Original memory (in bytes)", 
                    "format": "double"
                }, 
                "additional_memory": {
                    "type": "integer", 
                    "description": "Additional memory (in GiB) required to enable the service", 
                    "format": "int64"
                }, 
                "additional_memory_bytes": {
                    "type": "number", 
                    "description": "Additional memory (in bytes) required to enable the service", 
                    "format": "double"
                }
            }, 
            "description": "Information needed by the caller before they enable the service\n"
        }, 
        "contact_information": {
            "title": "Contact Information object.", 
            "type": "object", 
            "properties": {
                "phone_number": {
                    "type": "string", 
                    "description": "Phone Number of the contact."
                }, 
                "email_address": {
                    "pattern": "(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)", 
                    "type": "string", 
                    "description": "Email address of the contact."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the contact."
                }
            }, 
            "description": "Contact information object."
        }, 
        "container": {
            "title": "Container Entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Container name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/container_resources"
                }
            }, 
            "description": "Container Entity Definition."
        }, 
        "container_def_status": {
            "title": "Container Status Definition", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "State of the container."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Container name."
                }, 
                "resources": {
                    "$ref": "#/definitions/container_resources_def_status"
                }
            }, 
            "description": "Container Status Definition."
        }, 
        "container_intent_input": {
            "title": "container Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/container"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_metadata"
                }
            }, 
            "description": "An intentful representation of a container"
        }, 
        "container_intent_resource": {
            "title": "container Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/container_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/container"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a container"
        }, 
        "container_intent_response": {
            "title": "container Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/container_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/container"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a container"
        }, 
        "container_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/container_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/container_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of containers"
        }, 
        "container_list_metadata": {
            "title": "Metadata for container list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "container", 
                    "x-ntnx-enum": [
                        "container"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "container_list_metadata_output": {
            "title": "Metadata for container list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "container", 
                    "x-ntnx-enum": [
                        "container"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "container_metadata": {
            "title": "container metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when container was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "container", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "container"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "container uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the container is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when container was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the container"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "container name", 
                    "maxLength": 64
                }
            }, 
            "description": "The container kind metadata"
        }, 
        "container_options": {
            "title": "Container options", 
            "type": "object", 
            "properties": {
                "network_port_bindings": {
                    "additionalProperties": {
                        "$ref": "#/definitions/network_port_bindings"
                    }, 
                    "description": "Map of port bindings, key is container port and value is a list of host side network port binding.\n"
                }, 
                "volume_mount_map": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "Map of Volume Group name to mount path."
                }, 
                "container_runtime": {
                    "x-ntnx-enum": [
                        "DOCKER"
                    ], 
                    "type": "string", 
                    "description": "Name of container runtime."
                }, 
                "container_additional_options": {
                    "type": "string", 
                    "description": "Additional options to be used for container."
                }, 
                "num_cpu_shares": {
                    "default": 1024, 
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Number of cpu shares.", 
                    "format": "int32"
                }, 
                "environments": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "Map of environment variable names and values."
                }, 
                "command": {
                    "type": "string", 
                    "description": "Command to be executed in the container."
                }, 
                "restart_policy": {
                    "type": "string", 
                    "description": "Container restart policy."
                }, 
                "memory_mib": {
                    "default": 1024, 
                    "type": "integer", 
                    "description": "Memory in MiBs.", 
                    "format": "int32"
                }
            }, 
            "description": "Container options required to run the container."
        }, 
        "container_options_status": {
            "title": "Container options", 
            "type": "object", 
            "properties": {
                "network_port_bindings": {
                    "additionalProperties": {
                        "$ref": "#/definitions/network_port_bindings_status"
                    }, 
                    "description": "List of port mappings, key is container port binding, value is host port binding"
                }, 
                "volume_mount_map": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "Map of Volume Group name to mount path."
                }, 
                "container_runtime": {
                    "x-ntnx-enum": [
                        "DOCKER"
                    ], 
                    "type": "string", 
                    "description": "Name of container runtime."
                }, 
                "container_additional_options": {
                    "type": "string", 
                    "description": "Additional options to be used for container."
                }, 
                "num_cpu_shares": {
                    "type": "integer", 
                    "description": "Number of cpu shares.", 
                    "format": "int32"
                }, 
                "environments": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "description": "Map of environment variable names and values."
                }, 
                "command": {
                    "type": "string", 
                    "description": "Command to be executed for the container."
                }, 
                "restart_policy": {
                    "type": "string", 
                    "description": "Container restart policy."
                }, 
                "memory_mib": {
                    "type": "integer", 
                    "description": "Memory in MiBs.", 
                    "format": "int32"
                }
            }, 
            "description": "Container options in use by the container"
        }, 
        "container_reference": {
            "title": "Reference to a container", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "container", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "container"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a container"
        }, 
        "container_resources": {
            "title": "Container Resources", 
            "required": [
                "image_name"
            ], 
            "type": "object", 
            "properties": {
                "container_state": {
                    "x-ntnx-enum": [
                        "IMAGE_DOWNLOADED", 
                        "CREATED", 
                        "RUNNING", 
                        "STOPPED", 
                        "KILLED", 
                        "REMOVED", 
                        "DELETED", 
                        "PAUSED"
                    ], 
                    "type": "string", 
                    "description": "Desired state of the container."
                }, 
                "container_options": {
                    "description": "Various options for container.", 
                    "$ref": "#/definitions/container_options"
                }, 
                "registry_reference": {
                    "description": "Reference to container registry.", 
                    "$ref": "#/definitions/docker_registry_reference"
                }, 
                "subnet_reference_list": {
                    "items": {
                        "$ref": "#/definitions/subnet_reference"
                    }, 
                    "type": "array", 
                    "description": "Networks associated with this container."
                }, 
                "volume_reference_list": {
                    "items": {
                        "$ref": "#/definitions/volume_group_reference"
                    }, 
                    "type": "array", 
                    "description": "Referenced volumes associated with this container."
                }, 
                "image_name": {
                    "type": "string", 
                    "description": "Image name to be used for container.", 
                    "maxLength": 64
                }, 
                "volume_list": {
                    "items": {
                        "$ref": "#/definitions/volume_group"
                    }, 
                    "type": "array", 
                    "description": "Volumes associated with this container."
                }
            }, 
            "description": "Container Resources Definition."
        }, 
        "container_resources_def_status": {
            "title": "Container Resources Status Definition", 
            "required": [
                "image_name"
            ], 
            "type": "object", 
            "properties": {
                "registry_reference": {
                    "description": "Reference to container registry.", 
                    "$ref": "#/definitions/docker_registry_reference"
                }, 
                "image_name": {
                    "type": "string", 
                    "description": "Image name used for container."
                }, 
                "volume_list": {
                    "items": {
                        "$ref": "#/definitions/volume_group_def_status"
                    }, 
                    "type": "array", 
                    "description": "Volumes associated with this container."
                }, 
                "container_state": {
                    "x-ntnx-enum": [
                        "QUEUED", 
                        "IMAGE_DOWNLOADED", 
                        "CREATED", 
                        "RUNNING", 
                        "STOPPED", 
                        "KILLED", 
                        "REMOVED", 
                        "DELETED", 
                        "PAUSED", 
                        "FAILED"
                    ], 
                    "type": "string", 
                    "description": "Current state of the Container."
                }, 
                "runtime_name": {
                    "type": "string", 
                    "description": "Name of container given by runtime."
                }, 
                "container_options": {
                    "description": "Various options for container.", 
                    "$ref": "#/definitions/container_options_status"
                }, 
                "subnet_reference_list": {
                    "items": {
                        "$ref": "#/definitions/subnet_reference"
                    }, 
                    "type": "array", 
                    "description": "Networks associated with this container."
                }, 
                "volume_reference_list": {
                    "items": {
                        "$ref": "#/definitions/volume_group_reference"
                    }, 
                    "type": "array", 
                    "description": "Referenced Volumes associated with this container."
                }
            }, 
            "description": "Container Resources Status Definition."
        }, 
        "container_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "container", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "container"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "controller_vm": {
            "title": "Host Controller VM Info", 
            "required": [
                "ip"
            ], 
            "type": "object", 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Controller VM IP address."
                }, 
                "nat_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Controller VM NAT IP address."
                }, 
                "oplog_usage": {
                    "$ref": "#/definitions/oplog_usage"
                }, 
                "nat_port": {
                    "type": "integer", 
                    "description": "Controller VM NAT port.", 
                    "format": "int32"
                }
            }, 
            "description": "Host controller vm information."
        }, 
        "credentials": {
            "title": "Credentials to login server", 
            "required": [
                "username"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string"
                }, 
                "password": {
                    "type": "string"
                }
            }, 
            "description": "Credentials to login server"
        }, 
        "csrs_spec": {
            "title": "Spec for CSRs download", 
            "type": "object", 
            "properties": {
                "node_uuid_list": {
                    "items": {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "type": "string", 
                        "format": "UUID"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Spec for CSRs download. If node uuid list is empty, all cluster nodes will\nbe assumed.\n"
        }, 
        "custom_generic_key_value_pair": {
            "additionalProperties": {
                "type": "string"
            }, 
            "type": "object", 
            "description": "Generic key value pair used for custom attributes", 
            "title": "Generic key value pair"
        }, 
        "customization_spec_list_metadata": {
            "title": "Metadata for customization_spec list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "customization_spec", 
                    "x-ntnx-enum": [
                        "customization_spec"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "customization_spec_list_metadata_output": {
            "title": "Metadata for customization_spec list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "customization_spec", 
                    "x-ntnx-enum": [
                        "customization_spec"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "customization_spec_metadata": {
            "title": "customization_spec metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when customization_spec was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "customization_spec", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "customization_spec"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "customization_spec uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the customization_spec is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when customization_spec was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the customization_spec"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "customization_spec name", 
                    "maxLength": 64
                }
            }, 
            "description": "The customization_spec kind metadata"
        }, 
        "customization_spec_reference": {
            "title": "Reference to a customization_spec", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "customization_spec", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "customization_spec"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a customization_spec"
        }, 
        "customization_spec_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "customization_spec", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "customization_spec"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "datacenter": {
            "title": "Datacenter Entity", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The datacenter name", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/datacenter_resources"
                }
            }, 
            "description": "Datacenter entity definition"
        }, 
        "datacenter_component": {
            "title": "Hardware component", 
            "type": "object", 
            "properties": {
                "rack_unit_height": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "rack unit height", 
                    "format": "int32"
                }, 
                "management_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "management IP address"
                }, 
                "rack_unit_position": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "rack unit position", 
                    "format": "int32"
                }, 
                "management_mac_address": {
                    "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", 
                    "type": "string", 
                    "description": "management mac address", 
                    "x-example": "50:6b:8d:ee:de:2b"
                }, 
                "installation_time": {
                    "type": "string", 
                    "description": "installation date time", 
                    "format": "date-time"
                }
            }, 
            "description": "Common properties for node or a network device in datacenters\n"
        }, 
        "datacenter_def_status": {
            "title": "Datacenter Entity Status", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The datacenter name", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/datacenter_resources"
                }
            }, 
            "description": "Datacenter entity status definition"
        }, 
        "datacenter_intent_input": {
            "title": "datacenter Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/datacenter"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/datacenter_metadata"
                }
            }, 
            "description": "An intentful representation of a datacenter"
        }, 
        "datacenter_intent_resource": {
            "title": "datacenter Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/datacenter_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/datacenter"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/datacenter_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a datacenter"
        }, 
        "datacenter_intent_response": {
            "title": "datacenter Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/datacenter_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/datacenter"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/datacenter_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a datacenter"
        }, 
        "datacenter_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/datacenter_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/datacenter_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of datacenters"
        }, 
        "datacenter_list_metadata": {
            "title": "Metadata for datacenter list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "datacenter", 
                    "x-ntnx-enum": [
                        "datacenter"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "datacenter_list_metadata_output": {
            "title": "Metadata for datacenter list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "datacenter", 
                    "x-ntnx-enum": [
                        "datacenter"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "datacenter_metadata": {
            "title": "datacenter metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when datacenter was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "datacenter", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "datacenter"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "datacenter uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the datacenter is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when datacenter was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the datacenter"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "datacenter name", 
                    "maxLength": 64
                }
            }, 
            "description": "The datacenter kind metadata"
        }, 
        "datacenter_reference": {
            "title": "Reference to a datacenter", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "datacenter", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "datacenter"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a datacenter"
        }, 
        "datacenter_resources": {
            "title": "Datacenter Entity", 
            "required": [
                "availability_zone_reference"
            ], 
            "type": "object", 
            "properties": {
                "address": {
                    "$ref": "#/definitions/postal_address"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "Datacenter entity definition"
        }, 
        "datacenter_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "datacenter", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "datacenter"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "day_time": {
            "title": "Day and Time at which NGT policy should be triggered", 
            "required": [
                "day_of_week", 
                "time"
            ], 
            "type": "object", 
            "properties": {
                "day_of_week": {
                    "x-ntnx-enum": [
                        "SUNDAY", 
                        "MONDAY", 
                        "TUESDAY", 
                        "WEDNESDAY", 
                        "THURSDAY", 
                        "FRIDAY", 
                        "SATURDAY"
                    ], 
                    "type": "string", 
                    "description": "Day of week the policy has to take effect."
                }, 
                "time": {
                    "type": "string", 
                    "description": "Time of the day, the policy will be started. This is in \"<x>h:<y>m\"\nformat. The values must be between 00h:00m and 23h:59m. For example\nuser specified 18h:00m and the current time is 17h:00m then the first\nsnapshot will be captured at 18h:00m. If the current time is 19h:00m\nthen the first snapshot will be captured at 18h:00m next day. If not\nset, policy will be applicable immediately.\n"
                }
            }, 
            "description": "Day and Time at which NGT policy should be triggered."
        }, 
        "deployment": {
            "title": "Deployment related config for this gateway.", 
            "type": "object", 
            "properties": {
                "ip_subnet": {
                    "$ref": "#/definitions/ip_subnet"
                }, 
                "vlan_id": {
                    "format": "uint16", 
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "The network to deploy the VPN gateway on.", 
                    "maximum": 4095
                }, 
                "cluster_reference": {
                    "description": "The cluster to deploy the VPN gateway on.", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "default_gateway_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Default gateway IP address."
                }, 
                "static_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Static private IP address for the VPN gateway."
                }
            }, 
            "description": "Deployment related config for this gateway."
        }, 
        "deployment_status": {
            "title": "Deployment related status for this gateway.", 
            "type": "object", 
            "properties": {
                "vm_reference": {
                    "description": "Reference to the deployed gateway VM. Applies only to local gateway entities.\n", 
                    "$ref": "#/definitions/vm_reference"
                }, 
                "default_gateway_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Default gateway IP address."
                }, 
                "ip_subnet": {
                    "$ref": "#/definitions/ip_subnet_status"
                }, 
                "cluster_reference": {
                    "description": "The cluster to deploy the VPN gateway on.", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "vlan_id": {
                    "type": "integer", 
                    "description": "The network to deploy the VPN gateway on.", 
                    "format": "uint16"
                }, 
                "static_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Static private IP address for the VPN gateway."
                }
            }, 
            "description": "Deployment related status for this gateway."
        }, 
        "description_item": {
            "title": "Description item of upgrade notification", 
            "type": "object", 
            "properties": {
                "affected_release_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Earlier releases to which the notification applies."
                }, 
                "message": {
                    "type": "string"
                }, 
                "severity_level": {
                    "type": "string"
                }
            }, 
            "description": "Description item of upgrade notification"
        }, 
        "dhcp_options": {
            "title": "DHCP options", 
            "type": "object", 
            "properties": {
                "domain_name_server_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "boot_file_name": {
                    "type": "string"
                }, 
                "domain_search_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "domain_name": {
                    "type": "string"
                }, 
                "tftp_server_name": {
                    "type": "string"
                }
            }, 
            "description": "Spec for defining DHCP options."
        }, 
        "direct_connect": {
            "title": "direct_connect Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for direct_connect.", 
                    "maxLength": 1000
                }, 
                "name": {
                    "type": "string", 
                    "description": "direct_connect Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/direct_connect_resources"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a direct_connect spec"
        }, 
        "direct_connect_def_status": {
            "title": "direct_connect Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the direct_connect."
                }, 
                "name": {
                    "type": "string", 
                    "description": "direct_connect Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the direct_connect, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/direct_connect_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for direct_connect."
                }
            }, 
            "description": "An intentful representation of a direct_connect status"
        }, 
        "direct_connect_intent_input": {
            "title": "direct_connect Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/direct_connect"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/direct_connect_metadata"
                }
            }, 
            "description": "An intentful representation of a direct_connect"
        }, 
        "direct_connect_intent_resource": {
            "title": "direct_connect Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/direct_connect_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/direct_connect"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/direct_connect_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a direct_connect"
        }, 
        "direct_connect_intent_response": {
            "title": "direct_connect Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/direct_connect_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/direct_connect"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/direct_connect_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a direct_connect"
        }, 
        "direct_connect_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/direct_connect_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/direct_connect_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of direct_connects"
        }, 
        "direct_connect_list_metadata": {
            "title": "Metadata for direct_connect list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "direct_connect", 
                    "x-ntnx-enum": [
                        "direct_connect"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "direct_connect_list_metadata_output": {
            "title": "Metadata for direct_connect list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "direct_connect", 
                    "x-ntnx-enum": [
                        "direct_connect"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "direct_connect_metadata": {
            "title": "direct_connect metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when direct_connect was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "direct_connect", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "direct_connect"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "direct_connect uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the direct_connect is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when direct_connect was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the direct_connect"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "direct_connect name", 
                    "maxLength": 64
                }
            }, 
            "description": "The direct_connect kind metadata"
        }, 
        "direct_connect_reference": {
            "title": "Reference to a direct_connect", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "direct_connect", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "direct_connect"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a direct_connect"
        }, 
        "direct_connect_resources": {
            "title": "Direct connect create/modify spec", 
            "required": [
                "virtual_network_reference", 
                "service_provider", 
                "bandwidth_mbps"
            ], 
            "type": "object", 
            "properties": {
                "bandwidth_mbps": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Direct connect total bandwidth in Mbps.", 
                    "format": "int32"
                }, 
                "service_provider": {
                    "type": "string", 
                    "description": "The name of the service provider to be utilized for this direct\nconnnect.\n", 
                    "maxLength": 64
                }, 
                "virtual_network_reference": {
                    "description": "Virtual Network Reference", 
                    "$ref": "#/definitions/virtual_network_reference"
                }
            }, 
            "description": "Direct connect spec"
        }, 
        "direct_connect_resources_def_status": {
            "title": "Direct connect create/modify status", 
            "type": "object", 
            "properties": {
                "bandwidth_mbps": {
                    "type": "integer", 
                    "description": "Direct connect total bandwidth in Mbps.", 
                    "format": "int32"
                }, 
                "service_provider": {
                    "type": "string", 
                    "description": "The name of the service provider to be utilized for this direct connect\n"
                }, 
                "virtual_network_reference": {
                    "description": "Virtual Network Reference", 
                    "$ref": "#/definitions/virtual_network_reference"
                }, 
                "provisioning_status": {
                    "x-ntnx-enum": [
                        "PENDING_CREATE", 
                        "PENDING_UPDATE", 
                        "PENDING_DELETE", 
                        "PROVISIONED"
                    ], 
                    "type": "string", 
                    "description": "The provisioning status of the direct connect."
                }
            }, 
            "description": "Direct connect create/modify status"
        }, 
        "direct_connect_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "direct_connect", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "direct_connect"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "direct_connect_virtual_interface": {
            "title": "direct_connect_virtual_interface Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for direct_connect_virtual_interface.", 
                    "maxLength": 1000
                }, 
                "name": {
                    "type": "string", 
                    "description": "direct_connect_virtual_interface Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/direct_connect_virtual_interface_resources"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a direct_connect_virtual_interface spec"
        }, 
        "direct_connect_virtual_interface_def_status": {
            "title": "direct_connect_virtual_interface Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the direct_connect_virtual_interface."
                }, 
                "name": {
                    "type": "string", 
                    "description": "direct_connect_virtual_interface Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the direct_connect_virtual_interface, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/direct_connect_virtual_interface_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for direct_connect_virtual_interface."
                }
            }, 
            "description": "An intentful representation of a direct_connect_virtual_interface status"
        }, 
        "direct_connect_virtual_interface_intent_input": {
            "title": "direct_connect_virtual_interface Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/direct_connect_virtual_interface"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/direct_connect_virtual_interface_metadata"
                }
            }, 
            "description": "An intentful representation of a direct_connect_virtual_interface"
        }, 
        "direct_connect_virtual_interface_intent_resource": {
            "title": "direct_connect_virtual_interface Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/direct_connect_virtual_interface_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/direct_connect_virtual_interface"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/direct_connect_virtual_interface_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a direct_connect_virtual_interface"
        }, 
        "direct_connect_virtual_interface_intent_response": {
            "title": "direct_connect_virtual_interface Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/direct_connect_virtual_interface_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/direct_connect_virtual_interface"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/direct_connect_virtual_interface_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a direct_connect_virtual_interface"
        }, 
        "direct_connect_virtual_interface_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/direct_connect_virtual_interface_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/direct_connect_virtual_interface_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of direct_connect_virtual_interfaces"
        }, 
        "direct_connect_virtual_interface_list_metadata": {
            "title": "Metadata for direct_connect_virtual_interface list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "direct_connect_virtual_interface", 
                    "x-ntnx-enum": [
                        "direct_connect_virtual_interface"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "direct_connect_virtual_interface_list_metadata_output": {
            "title": "Metadata for direct_connect_virtual_interface list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "direct_connect_virtual_interface", 
                    "x-ntnx-enum": [
                        "direct_connect_virtual_interface"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "direct_connect_virtual_interface_metadata": {
            "title": "direct_connect_virtual_interface metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when direct_connect_virtual_interface was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "direct_connect_virtual_interface", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "direct_connect_virtual_interface"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "direct_connect_virtual_interface uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the direct_connect_virtual_interface is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when direct_connect_virtual_interface was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the direct_connect_virtual_interface"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "direct_connect_virtual_interface name", 
                    "maxLength": 64
                }
            }, 
            "description": "The direct_connect_virtual_interface kind metadata"
        }, 
        "direct_connect_virtual_interface_reference": {
            "title": "Reference to a direct_connect_virtual_interface", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "direct_connect_virtual_interface", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "direct_connect_virtual_interface"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a direct_connect_virtual_interface"
        }, 
        "direct_connect_virtual_interface_resources": {
            "title": "Direct connect virtual interface create/modify spec", 
            "required": [
                "direct_connect_reference", 
                "virtual_network_reference", 
                "peer_asn", 
                "peer_ip_prefix"
            ], 
            "type": "object", 
            "properties": {
                "virtual_network_reference": {
                    "description": "Virtual network reference for private virtual interface.", 
                    "$ref": "#/definitions/virtual_network_reference"
                }, 
                "peer_asn": {
                    "description": "Customer peering autonomous system number (ASN).", 
                    "$ref": "#/definitions/asn"
                }, 
                "peer_ip_prefix": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/(\\d|[1-2]\\d|3[0-2]))$", 
                    "type": "string", 
                    "description": "Customer peering IPv4 /30 or /31 prefix."
                }, 
                "direct_connect_reference": {
                    "description": "Direct connect reference.", 
                    "$ref": "#/definitions/direct_connect_reference"
                }, 
                "md5": {
                    "type": "string", 
                    "description": "md5 hash for bgp peering."
                }
            }, 
            "description": "Direct connect virtual interface spec."
        }, 
        "direct_connect_virtual_interface_resources_def_status": {
            "title": "Direct connect virtual interface create/modify status", 
            "type": "object", 
            "properties": {
                "peer_asn": {
                    "type": "integer", 
                    "description": "Customer peering autonomous system number (ASN).", 
                    "format": "uint32"
                }, 
                "nutanix_peer_asn": {
                    "type": "integer", 
                    "description": "Nutanix peering autonomous system number.", 
                    "format": "uint32"
                }, 
                "nutanix_peer_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Nutanix peering IP address."
                }, 
                "direct_connect_reference": {
                    "description": "Direct connect reference.", 
                    "$ref": "#/definitions/direct_connect_reference"
                }, 
                "peering_state": {
                    "x-ntnx-enum": [
                        "UP", 
                        "DOWN"
                    ], 
                    "type": "string", 
                    "description": "The peering state of the direct connect virtual interface."
                }, 
                "peer_ip_prefix": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/(\\d|[1-2]\\d|3[0-2]))$", 
                    "type": "string", 
                    "description": "Customer peering IPv4 /30 or /31 prefix."
                }, 
                "md5": {
                    "type": "string", 
                    "description": "md5 hash for bgp peering."
                }, 
                "virtual_network_reference": {
                    "description": "Virtual network reference for private virtual interface.", 
                    "$ref": "#/definitions/virtual_network_reference"
                }
            }, 
            "description": "Direct connect virtual interface create/modify status"
        }, 
        "direct_connect_virtual_interface_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "direct_connect_virtual_interface", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "direct_connect_virtual_interface"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "directory_service": {
            "title": "Directory service", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The name of the directory service.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "title": "Directory service resources", 
                    "required": [
                        "url", 
                        "domain_name", 
                        "directory_type", 
                        "service_account"
                    ], 
                    "type": "object", 
                    "properties": {
                        "open_ldap_configuration": {
                            "description": "Configuration for OpenLDAP.", 
                            "$ref": "#/definitions/open_ldap_configuration"
                        }, 
                        "admin_group_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_group_reference"
                            }, 
                            "type": "array", 
                            "description": "List of admin user groups available in the directory service.\n"
                        }, 
                        "service_account": {
                            "$ref": "#/definitions/service_account"
                        }, 
                        "url": {
                            "type": "string", 
                            "description": "URL of the directory.", 
                            "maxLength": 2000
                        }, 
                        "directory_type": {
                            "x-ntnx-enum": [
                                "ACTIVE_DIRECTORY", 
                                "OPEN_LDAP"
                            ], 
                            "type": "string", 
                            "description": "Type of the directory service."
                        }, 
                        "admin_user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "The list of admin users available in the directory service.\n"
                        }, 
                        "domain_name": {
                            "type": "string", 
                            "description": "The domain name of the directory service."
                        }
                    }, 
                    "description": "The details of the directory service."
                }
            }, 
            "description": "The configuration details of the directory service."
        }, 
        "directory_service_def_status": {
            "title": "Directory service", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the directory service configuration."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the directory service."
                }, 
                "resources": {
                    "title": "Directory service resources", 
                    "required": [
                        "url", 
                        "domain_name", 
                        "directory_type", 
                        "service_account"
                    ], 
                    "type": "object", 
                    "properties": {
                        "open_ldap_configuration": {
                            "description": "Configuration for OpenLDAP.", 
                            "$ref": "#/definitions/open_ldap_configuration_def_status"
                        }, 
                        "admin_group_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_group_reference"
                            }, 
                            "type": "array", 
                            "description": "List of admin user groups available in the directory service.\n"
                        }, 
                        "service_account": {
                            "description": "Validates and connects to the directory service with the given\ncredentials.\n", 
                            "$ref": "#/definitions/service_account"
                        }, 
                        "url": {
                            "type": "string", 
                            "description": "URL of the directory."
                        }, 
                        "directory_type": {
                            "x-ntnx-enum": [
                                "ACTIVE_DIRECTORY", 
                                "OPEN_LDAP"
                            ], 
                            "type": "string", 
                            "description": "Type of the directory service."
                        }, 
                        "admin_user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "The list of admin users available in the directory service.\n"
                        }, 
                        "domain_name": {
                            "type": "string", 
                            "description": "The domain name of the directory service."
                        }
                    }, 
                    "description": "The configuration details of the directory service."
                }
            }, 
            "description": "Details of the directory service."
        }, 
        "directory_service_intent_input": {
            "title": "directory_service Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/directory_service"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_metadata"
                }
            }, 
            "description": "An intentful representation of a directory_service"
        }, 
        "directory_service_intent_resource": {
            "title": "directory_service Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/directory_service_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/directory_service"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a directory_service"
        }, 
        "directory_service_intent_response": {
            "title": "directory_service Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/directory_service_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/directory_service"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a directory_service"
        }, 
        "directory_service_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/directory_service_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of directory_services"
        }, 
        "directory_service_list_metadata": {
            "title": "Metadata for directory_service list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "directory_service", 
                    "x-ntnx-enum": [
                        "directory_service"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "directory_service_list_metadata_output": {
            "title": "Metadata for directory_service list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "directory_service", 
                    "x-ntnx-enum": [
                        "directory_service"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "directory_service_metadata": {
            "title": "directory_service metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when directory_service was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "directory_service", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "directory_service"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "directory_service uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the directory_service is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when directory_service was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the directory_service"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "directory_service name", 
                    "maxLength": 64
                }
            }, 
            "description": "The directory_service kind metadata"
        }, 
        "directory_service_reference": {
            "title": "Reference to a directory_service", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "directory_service", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "directory_service"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a directory_service"
        }, 
        "directory_service_search_metadata": {
            "title": "Directory service search metadata", 
            "required": [
                "query"
            ], 
            "type": "object", 
            "properties": {
                "query": {
                    "type": "string", 
                    "description": "The search string."
                }, 
                "searched_attribute_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The attributes for search operation. If not specified, search is\nperformed with the common name.\n"
                }, 
                "returned_attribute_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The attributes the search operation returns. If not available, a list\nof default attributes is returned.\n"
                }, 
                "is_wildcard_search": {
                    "default": true, 
                    "type": "boolean", 
                    "description": "The attribute that tells if the query is a wildcard match or exact match query.\n"
                }
            }, 
            "description": "The parameters to search for directory service."
        }, 
        "directory_service_search_response": {
            "title": "Directory service search response", 
            "type": "object", 
            "properties": {
                "search_result_list": {
                    "items": {
                        "$ref": "#/definitions/entity"
                    }, 
                    "type": "array"
                }, 
                "domain_name": {
                    "type": "string", 
                    "description": "The domain name of the directory service."
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/directory_service_search_metadata"
                }
            }, 
            "description": "The response returned for directory service search operation."
        }, 
        "directory_service_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "directory_service", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "directory_service"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "directory_service_user": {
            "title": "Directory Service user Definition.", 
            "type": "object", 
            "properties": {
                "user_principal_name": {
                    "type": "string", 
                    "description": "The UserPrincipalName of the user from the directory service.\n", 
                    "maxLength": 104
                }, 
                "directory_service_reference": {
                    "description": "Directory service reference if the user type is directory service.\n", 
                    "$ref": "#/definitions/directory_service_reference"
                }
            }, 
            "description": "A Directory Service user."
        }, 
        "directory_service_user_group_input": {
            "title": "A Directory Service user group.", 
            "type": "object", 
            "properties": {
                "distinguished_name": {
                    "type": "string", 
                    "description": "The Distinguished name for the user group.", 
                    "maxLength": 255
                }
            }, 
            "description": "A Directory Service user group."
        }, 
        "directory_service_user_group_status": {
            "title": "A Directory Service user group.", 
            "type": "object", 
            "properties": {
                "distinguished_name": {
                    "type": "string", 
                    "description": "The Distinguished name for the user group."
                }, 
                "directory_service_reference": {
                    "description": "The directory service that this user group belongs to.", 
                    "$ref": "#/definitions/directory_service_reference"
                }
            }, 
            "description": "A Directory Service user group."
        }, 
        "directory_service_user_status": {
            "title": "Directory Service user Response.", 
            "type": "object", 
            "properties": {
                "user_principal_name": {
                    "type": "string", 
                    "description": "The UserPrincipalName of the user from the directory service. It will be same as default user principal name if no upn suffix is enabled for user logon name in directory service.\n", 
                    "maxLength": 104
                }, 
                "directory_service_reference": {
                    "description": "Directory service reference if the user type is directory service.\n", 
                    "$ref": "#/definitions/directory_service_reference"
                }, 
                "default_user_principal_name": {
                    "type": "string", 
                    "description": "The Default UserPrincipalName of the user from the directory service. This is of format samAccountName@domain_name.\n", 
                    "maxLength": 104
                }
            }, 
            "description": "A Directory Service user."
        }, 
        "disaster_recovery_service_config_input": {
            "title": "Disaster Recovery service configuration.", 
            "required": [
                "state"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "x-ntnx-enum": [
                        "ENABLE"
                    ], 
                    "type": "string", 
                    "description": "The desired state of Disaster Recovery service."
                }
            }, 
            "description": "Input body to configure Disaster Recovery service."
        }, 
        "disk": {
            "type": "object", 
            "description": "Disk specification.", 
            "title": "Disk specification."
        }, 
        "disk_address": {
            "title": "Disk Address", 
            "required": [
                "adapter_type", 
                "device_index"
            ], 
            "type": "object", 
            "properties": {
                "device_index": {
                    "type": "integer"
                }, 
                "adapter_type": {
                    "x-ntnx-enum": [
                        "SCSI", 
                        "IDE", 
                        "PCI", 
                        "SATA", 
                        "SPAPR"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "Disk Address."
        }, 
        "disk_def_status": {
            "title": "Disk object", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the disk."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the disk, if in an error state."
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Disk resources.", 
                    "properties": {
                        "host_reference": {
                            "$ref": "#/definitions/reference"
                        }, 
                        "enabled_features_list": {
                            "items": {
                                "x-ntnx-enum": [
                                    "CAN_ADD_AS_NEW_DISK", 
                                    "CAN_ADD_AS_OLD_DISK", 
                                    "BOOT_DISK", 
                                    "ONLY_BOOT_DISK", 
                                    "SELF_ENCRYPTING_ENABLED", 
                                    "PASSWORD_PROTECTED"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "Disk feature flags\n- 'CanAddAsNewDisk': Flag to indicate if this disk can be added as\n   new disk.\n- 'CanAddAsOldDisk': Flag to indicate if the disk can be added as\n   old disk.\n- 'BootDisk': Flag to indicate if its a boot disk.\n- 'OnlyBootDisk': Flag to indicate if the disk is boot only and\n   no disk operation to be run on it.\n- 'SelfEncryptingEnabled': Flag to indicate if the disk has self\n   encryption enabled.\n- 'PasswordProtected': Flag to indicate if the disk is password\n   protected.\n"
                        }, 
                        "vendor": {
                            "type": "string", 
                            "description": "Disk vendor."
                        }, 
                        "mount_path": {
                            "type": "string", 
                            "description": "Mount path."
                        }, 
                        "storage_pool_uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "Storage pool uuid.", 
                            "format": "UUID"
                        }, 
                        "slot_number": {
                            "type": "integer", 
                            "description": "Disk location in a node.", 
                            "format": "int32"
                        }, 
                        "serial_number": {
                            "type": "string", 
                            "description": "Disk serial number."
                        }, 
                        "storage_tier_type": {
                            "x-ntnx-enum": [
                                "PCIE_SSD", 
                                "SATA_SSD", 
                                "HDD"
                            ], 
                            "type": "string", 
                            "description": "Storage tier type."
                        }, 
                        "size_bytes": {
                            "type": "integer", 
                            "description": "Disk size in bytes.", 
                            "format": "int64"
                        }, 
                        "state_list": {
                            "$ref": "#/definitions/disk_state_list"
                        }, 
                        "model": {
                            "type": "string", 
                            "description": "Disk model."
                        }, 
                        "firmware_version": {
                            "type": "string", 
                            "description": "Firmware version."
                        }
                    }
                }
            }, 
            "description": "Disk object."
        }, 
        "disk_intent_input": {
            "title": "disk Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/disk"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/disk_metadata"
                }
            }, 
            "description": "An intentful representation of a disk"
        }, 
        "disk_intent_resource": {
            "title": "disk Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/disk_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/disk"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/disk_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a disk"
        }, 
        "disk_intent_response": {
            "title": "disk Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/disk_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/disk"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/disk_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a disk"
        }, 
        "disk_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/disk_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/disk_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of disks"
        }, 
        "disk_list_metadata": {
            "title": "Metadata for disk list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "disk", 
                    "x-ntnx-enum": [
                        "disk"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "disk_list_metadata_output": {
            "title": "Metadata for disk list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "disk", 
                    "x-ntnx-enum": [
                        "disk"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "disk_metadata": {
            "title": "disk metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when disk was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "disk", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "disk"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "disk uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the disk is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when disk was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the disk"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "disk name", 
                    "maxLength": 64
                }
            }, 
            "description": "The disk kind metadata"
        }, 
        "disk_reference": {
            "title": "Reference to a disk", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "disk", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "disk"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a disk"
        }, 
        "disk_spec": {
            "title": "VM virtual disk specification", 
            "required": [
                "uuid", 
                "total_size_bytes"
            ], 
            "type": "object", 
            "properties": {
                "total_size_bytes": {
                    "type": "integer", 
                    "description": "Total size of the disk in bytes.", 
                    "format": "int64"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The device ID which is used to uniquely identify this particular disk.\n", 
                    "format": "UUID"
                }
            }, 
            "description": "Details of the VM virtual disk."
        }, 
        "disk_state_list": {
            "items": {
                "x-ntnx-enum": [
                    "DATA_MIGRATION_INITIATED", 
                    "MARKED_FOR_REMOVAL_BUT_NOT_DETACHABLE", 
                    "READY_TO_DETACH", 
                    "DATA_MIGRATED", 
                    "MARKED_FOR_REMOVAL", 
                    "ONLINE", 
                    "BAD", 
                    "MOUNTED", 
                    "UNDER_DIAGNOSIS"
                ], 
                "type": "string"
            }, 
            "type": "array", 
            "description": "Array of disk states\n- 'DataMigrationInitiated': Data Migration Initiated.\n- 'MarkedForRemovalButNotDetachable': Marked for removal, data\n   migration is in progress.\n- 'ReadyToDetach': Flag to indicate the disk is detachable.\n- 'DataMigrated': Flag to indicate if data migration is completed for\n   this disk.\n- 'MarkedForRemoval': Flag to indicate if the disk is marked for\n   removal.\n- 'Online': Flag to indicate if the disk is online.\n- 'Bad': Flag to indicate if the disk is bad.\n- 'Mounted': Flag to indicate if the disk is mounted.\n- 'UnderDiagnosis': Flag to indicate if the disk is under diagnosis.\n", 
            "title": "Disk State List"
        }, 
        "disk_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "disk", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "disk"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "display_metadata": {
            "title": "Component display metadata", 
            "type": "object", 
            "properties": {
                "field_type": {
                    "x-ntnx-enum": [
                        "INPUT", 
                        "SELECT", 
                        "INPUT_WITH_UNITS", 
                        "ENTITY_SEARCH"
                    ], 
                    "type": "string", 
                    "description": "UI component type of the form field."
                }, 
                "field_name": {
                    "type": "string", 
                    "description": "the name of the form field."
                }
            }, 
            "description": "display metadata of the form field."
        }, 
        "docker_registry": {
            "title": "Docker Registry spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the docker registry"
                }, 
                "resources": {
                    "$ref": "#/definitions/docker_registry_resources"
                }
            }, 
            "description": "Docker registry spec"
        }, 
        "docker_registry_def_status": {
            "title": "Docker Registry", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the docker registry"
                }, 
                "resources": {
                    "$ref": "#/definitions/docker_registry_resources"
                }
            }, 
            "description": "Docker registry"
        }, 
        "docker_registry_image_search_list_intent_response": {
            "title": "Docker registry image search results response", 
            "required": [
                "metadata", 
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "metadata": {
                    "$ref": "#/definitions/docker_registry_list_metadata"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "entity_list": {
                    "items": {
                        "$ref": "#/definitions/docker_registry_image_status"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }
            }, 
            "description": "Docker registry image search results response"
        }, 
        "docker_registry_image_status": {
            "title": "Docker registry image search result", 
            "required": [
                "name", 
                "is_official", 
                "owner", 
                "tag_list"
            ], 
            "type": "object", 
            "properties": {
                "owner": {
                    "type": "string", 
                    "description": "Owner user name"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Repository description", 
                    "maxLength": 1000
                }, 
                "is_official": {
                    "type": "boolean", 
                    "description": "Whether it is an official Docker Hub image"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Repository name", 
                    "maxLength": 64
                }, 
                "tag_list": {
                    "items": {
                        "$ref": "#/definitions/docker_registry_image_tag"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Docker registry image search result"
        }, 
        "docker_registry_image_tag": {
            "title": "Docker Hub tagged image", 
            "required": [
                "name", 
                "size_mib", 
                "modified_date"
            ], 
            "type": "object", 
            "properties": {
                "modified_date": {
                    "type": "string", 
                    "description": "Last modified date in RFC 3339", 
                    "format": "date-time"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Image tag name", 
                    "maxLength": 64
                }, 
                "size_mib": {
                    "type": "integer", 
                    "description": "Size of the image in MiB", 
                    "format": "int64"
                }
            }, 
            "description": "Docker Hub tagged image"
        }, 
        "docker_registry_intent_input": {
            "title": "docker_registry Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/docker_registry"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/docker_registry_metadata"
                }
            }, 
            "description": "An intentful representation of a docker_registry"
        }, 
        "docker_registry_intent_resource": {
            "title": "docker_registry Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/docker_registry_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/docker_registry"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/docker_registry_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a docker_registry"
        }, 
        "docker_registry_intent_response": {
            "title": "docker_registry Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/docker_registry_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/docker_registry"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/docker_registry_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a docker_registry"
        }, 
        "docker_registry_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/docker_registry_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/docker_registry_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of docker_registrys"
        }, 
        "docker_registry_list_metadata": {
            "title": "Metadata for docker_registry list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "docker_registry", 
                    "x-ntnx-enum": [
                        "docker_registry"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "docker_registry_list_metadata_output": {
            "title": "Metadata for docker_registry list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "docker_registry", 
                    "x-ntnx-enum": [
                        "docker_registry"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "docker_registry_metadata": {
            "title": "docker_registry metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when docker_registry was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "docker_registry", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "docker_registry"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "docker_registry uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the docker_registry is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when docker_registry was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the docker_registry"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "docker_registry name", 
                    "maxLength": 64
                }
            }, 
            "description": "The docker_registry kind metadata"
        }, 
        "docker_registry_reference": {
            "title": "Reference to a docker_registry", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "docker_registry", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "docker_registry"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a docker_registry"
        }, 
        "docker_registry_resources": {
            "title": "Docker Registry Resources", 
            "required": [
                "username", 
                "url", 
                "password"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "User name of the docker registry", 
                    "maxLength": 64
                }, 
                "is_enabled": {
                    "type": "boolean", 
                    "description": "Flag to indicate whether the docker registry is enabled or not.\nIf unset, defaults to False.\n"
                }, 
                "certificate": {
                    "type": "string", 
                    "description": "Certificate required for the private docker registry"
                }, 
                "url": {
                    "type": "string", 
                    "description": "URL of the docker registry"
                }, 
                "password": {
                    "type": "string", 
                    "description": "Password of the user for the docker registry"
                }, 
                "is_system_default": {
                    "readOnly": true, 
                    "type": "boolean", 
                    "description": "Flag to indicate whether the docker registry is a system default\n"
                }
            }, 
            "description": "Docker registry resources"
        }, 
        "docker_registry_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "docker_registry", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "docker_registry"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "duration": {
            "x-ntnx-enum": [
                "THIRTY_SECONDS", 
                "ONE_MINUTE", 
                "FIVE_MINUTES", 
                "TEN_MINUTES", 
                "THIRTY_MINUTES", 
                "ONE_HOUR", 
                "TWO_HOURS"
            ], 
            "type": "string", 
            "description": "Duration for streaming policies", 
            "title": "Duration for streaming policies"
        }, 
        "eb_filter": {
            "title": "Entitybrowser Filter Definition", 
            "type": "object", 
            "properties": {
                "operator": {
                    "type": "string", 
                    "description": "Operator that is being used in filter."
                }, 
                "rhs": {
                    "type": "string", 
                    "description": "Right hand side of the filter expression."
                }, 
                "lhs": {
                    "type": "string", 
                    "description": "Left hand side of the filter expression."
                }, 
                "display_for_rhs": {
                    "type": "string", 
                    "description": "Display for RHS value of the filter expression."
                }, 
                "display_for_operator": {
                    "type": "string", 
                    "description": "Display string for the operator."
                }
            }, 
            "description": "Entitybrowser filter object definition."
        }, 
        "email_config": {
            "title": "Report Email Configuration.", 
            "type": "object", 
            "properties": {
                "email_subject": {
                    "type": "string", 
                    "description": "Subject of email to be sent for report."
                }, 
                "recipient_format": {
                    "items": {
                        "x-ntnx-enum": [
                            "PDF", 
                            "CSV"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List specifying the formats in which report is to be sent."
                }, 
                "email_body": {
                    "type": "string", 
                    "description": "Content of the email body."
                }, 
                "recipient_list": {
                    "items": {
                        "$ref": "#/definitions/recipient"
                    }, 
                    "type": "array", 
                    "description": "Email recipients list.", 
                    "maxItems": 100
                }
            }, 
            "description": "Report Email configuration."
        }, 
        "encryption_status": {
            "default": "NOT_SUPPORTED", 
            "x-ntnx-enum": [
                "NOT_SUPPORTED", 
                "DISABLED", 
                "ENABLED"
            ], 
            "type": "string", 
            "description": "Cluster encryption status.", 
            "title": "Cluster encryption status"
        }, 
        "entities_with_metrics_result": {
            "type": "object", 
            "description": "Entities with metrics result object defintion. Making it opaque in the\nfirst release conciously. This will have contain the details of entity\nmetadata and metrics.\n", 
            "title": "Entities Metrics Result Defintion"
        }, 
        "entity": {
            "title": "Directory service search response", 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "User or group in the directory service."
                }, 
                "name": {
                    "type": "string", 
                    "description": "The name of the entity in canonical format.", 
                    "maxLength": 64
                }, 
                "attribute_list": {
                    "items": {
                        "$ref": "#/definitions/attribute"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "The response returned for directory service search operation."
        }, 
        "entity_filter_expression": {
            "title": "Entity Filter Expression.", 
            "required": [
                "left_hand_side", 
                "operator", 
                "right_hand_side"
            ], 
            "type": "object", 
            "properties": {
                "operator": {
                    "x-ntnx-enum": [
                        "IN", 
                        "NOT_IN"
                    ], 
                    "type": "string", 
                    "description": "The operator in the filter expression."
                }, 
                "left_hand_side": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "entity_type"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "entity_type": {
                            "type": "string", 
                            "description": "The representation of the possible value of an LHS, in this case it is an entity type.A certain entity type e.g. VM Note. To express all entity types, use ALL\n", 
                            "maxLength": 64
                        }
                    }, 
                    "description": "The LHS of the filter expression - the entity type."
                }, 
                "right_hand_side": {
                    "description": "The Right hand side(RHS) of a filter expression.", 
                    "$ref": "#/definitions/right_hand_side"
                }
            }, 
            "description": "Entity Filter Expression is a combination of LHS-Operator-RHS. This filter expression helps express the Filter on actual entities. Example1 - To express All VMs\n  left_hand_side = VM\n  operator = IN\n  right_hand_side = ALL\nExample2 - To express Not VM1 or VM2\n  left_hand_side =  VM\n  operator = NOT_IN\n  right_hand_side = [\"VM1\", \"VM2\"]\n"
        }, 
        "entity_info": {
            "title": "Entity name/type/id", 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "Entity type"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Entity name"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Entity UUID", 
                    "format": "UUID"
                }
            }, 
            "description": "Entity information"
        }, 
        "entity_metadata": {
            "title": "Entity Metadata Definition", 
            "type": "object", 
            "properties": {
                "cluster_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Cluster uuid on which the entity is present.", 
                    "format": "UUID"
                }, 
                "entity_id": {
                    "type": "string", 
                    "description": "Unique identifier of the entity."
                }, 
                "entity_name": {
                    "type": "string", 
                    "description": "Name of the entity."
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Type of the entity."
                }
            }, 
            "description": "Entity metadata object definition."
        }, 
        "entity_reference": {
            "title": "Entity Reference.", 
            "type": "object", 
            "properties": {
                "kind": {
                    "type": "string", 
                    "description": "Kind of the reference."
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "CATEGORIES_MATCH_ALL", 
                        "CATEGORIES_MATCH_ANY"
                    ], 
                    "type": "string", 
                    "description": "The type of filter being used."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the entity.", 
                    "format": "UUID"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the entity."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the entity.", 
                    "maxLength": 64
                }
            }, 
            "description": "Reference to an entity."
        }, 
        "entity_spec": {
            "title": "Entity specs", 
            "required": [
                "vm_spec"
            ], 
            "type": "object", 
            "properties": {
                "vm_spec": {
                    "description": "VM config specification.", 
                    "$ref": "#/definitions/vm_spec"
                }
            }, 
            "description": "Specification of the entities which need to be placed."
        }, 
        "entity_sync_input": {
            "title": "Entity sync input definition.", 
            "type": "object", 
            "properties": {
                "should_override": {
                    "type": "boolean", 
                    "description": "Indicates whether to override entities in case of conflicts.\n"
                }
            }, 
            "description": "Entity sync request parameters."
        }, 
        "entity_sync_rule": {
            "title": "Entity sync rule creation/modification spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Entity sync rule name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/entity_sync_rule_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the entity sync rule.", 
                    "maxLength": 1000
                }
            }, 
            "description": "Entity sync rule creation/modification spec."
        }, 
        "entity_sync_rule_def_status": {
            "title": "Entity sync rule creation/modification status", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Entity sync rule name."
                }, 
                "resources": {
                    "$ref": "#/definitions/entity_sync_rule_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the entity sync rule."
                }
            }, 
            "description": "Entity sync rule creation/modification status."
        }, 
        "entity_sync_rule_intent_input": {
            "title": "entity_sync_rule Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/entity_sync_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/entity_sync_rule_metadata"
                }
            }, 
            "description": "An intentful representation of a entity_sync_rule"
        }, 
        "entity_sync_rule_intent_resource": {
            "title": "entity_sync_rule Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/entity_sync_rule_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/entity_sync_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/entity_sync_rule_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a entity_sync_rule"
        }, 
        "entity_sync_rule_intent_response": {
            "title": "entity_sync_rule Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/entity_sync_rule_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/entity_sync_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/entity_sync_rule_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a entity_sync_rule"
        }, 
        "entity_sync_rule_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/entity_sync_rule_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/entity_sync_rule_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of entity_sync_rules"
        }, 
        "entity_sync_rule_list_metadata": {
            "title": "Metadata for entity_sync_rule list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "entity_sync_rule", 
                    "x-ntnx-enum": [
                        "entity_sync_rule"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "entity_sync_rule_list_metadata_output": {
            "title": "Metadata for entity_sync_rule list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "entity_sync_rule", 
                    "x-ntnx-enum": [
                        "entity_sync_rule"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "entity_sync_rule_metadata": {
            "title": "entity_sync_rule metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when entity_sync_rule was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "entity_sync_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "entity_sync_rule"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "entity_sync_rule uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the entity_sync_rule is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when entity_sync_rule was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the entity_sync_rule"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "entity_sync_rule name", 
                    "maxLength": 64
                }
            }, 
            "description": "The entity_sync_rule kind metadata"
        }, 
        "entity_sync_rule_reference": {
            "title": "Reference to a entity_sync_rule", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "entity_sync_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "entity_sync_rule"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a entity_sync_rule"
        }, 
        "entity_sync_rule_resources": {
            "title": "Entity sync rule resources", 
            "type": "object", 
            "properties": {
                "kind_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "PROTECTION_RULE", 
                            "RECOVERY_PLAN"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of kinds of the entities which needs to be synced."
                }
            }, 
            "description": "Entity sync rule encodes the list of entity kinds which needs to be\nsynced.\n"
        }, 
        "entity_sync_rule_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "entity_sync_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "entity_sync_rule"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "entitybrowser_response": {
            "title": "Entitybrowser Response Definition", 
            "type": "object", 
            "properties": {
                "filter": {
                    "$ref": "#/definitions/eb_filter"
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the response."
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Type of the entity."
                }
            }, 
            "description": "Entitybrowser response object definition."
        }, 
        "environment": {
            "title": "environment Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for environment.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/environment_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "environment Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a environment spec"
        }, 
        "environment_def_status": {
            "title": "environment Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the environment."
                }, 
                "name": {
                    "type": "string", 
                    "description": "environment Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the environment, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/environment_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for environment."
                }
            }, 
            "description": "An intentful representation of a environment status"
        }, 
        "environment_intent_input": {
            "title": "environment Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/environment"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/environment_metadata"
                }
            }, 
            "description": "An intentful representation of a environment"
        }, 
        "environment_intent_resource": {
            "title": "environment Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/environment_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/environment"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/environment_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a environment"
        }, 
        "environment_intent_response": {
            "title": "environment Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/environment_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/environment"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/environment_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a environment"
        }, 
        "environment_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/environment_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/environment_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of environments"
        }, 
        "environment_list_metadata": {
            "title": "Metadata for environment list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "environment", 
                    "x-ntnx-enum": [
                        "environment"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "environment_list_metadata_output": {
            "title": "Metadata for environment list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "environment", 
                    "x-ntnx-enum": [
                        "environment"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "environment_metadata": {
            "title": "environment metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when environment was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "environment", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "environment"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "environment uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the environment is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when environment was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the environment"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "environment name", 
                    "maxLength": 64
                }
            }, 
            "description": "The environment kind metadata"
        }, 
        "environment_reference": {
            "title": "Reference to a environment", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "environment", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "environment"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a environment"
        }, 
        "environment_resources": {
            "title": "Resources for Environment.", 
            "type": "object", 
            "properties": {
                "substrate_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_substrate_input"
                    }, 
                    "type": "array", 
                    "description": "Substrate definitions for Environment."
                }, 
                "credential_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_credential_input"
                    }, 
                    "type": "array", 
                    "description": "Credential definitions for Environment."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_input"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }
            }, 
            "description": "Resources for Environment."
        }, 
        "environment_resources_def_status": {
            "title": "Status of the environment", 
            "type": "object", 
            "properties": {
                "project_reference": {
                    "description": "The project the environment is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "substrate_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_substrate_response"
                    }, 
                    "type": "array", 
                    "description": "Substrate definitions for Environment."
                }, 
                "credential_definition_list": {
                    "items": {
                        "$ref": "#/definitions/app_credential_response"
                    }, 
                    "type": "array", 
                    "description": "Credential definitions for Environment."
                }, 
                "variable_list": {
                    "items": {
                        "$ref": "#/definitions/app_variable_response"
                    }, 
                    "type": "array", 
                    "description": "List of variables"
                }
            }, 
            "description": "Status of the environment"
        }, 
        "environment_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "environment", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "environment"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "error_message_object": {
            "title": "Error object", 
            "type": "object", 
            "properties": {
                "param_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "params to enhance error message"
                }, 
                "error_message": {
                    "type": "string", 
                    "description": "error message with param place holders"
                }
            }, 
            "description": "structured error object for UI consumption"
        }, 
        "execution_plan": {
            "default": "PARALLEL", 
            "x-ntnx-enum": [
                "SEQUENTIAL", 
                "PARALLEL"
            ], 
            "type": "string", 
            "description": "Execution plan for multiple requests.", 
            "title": "Execution plan for multiple requests"
        }, 
        "execution_schedule": {
            "title": "Execution schedule for requests", 
            "required": [
                "start_time"
            ], 
            "type": "object", 
            "properties": {
                "start_time": {
                    "type": "string", 
                    "description": "Start time to execute a request.", 
                    "format": "date-time"
                }, 
                "time_zone": {
                    "type": "string", 
                    "description": "Name of specified time zone."
                }, 
                "timeout_secs": {
                    "type": "integer", 
                    "description": "Time out in seconds for a request execution.", 
                    "format": "int64"
                }
            }, 
            "description": "Execution schedule for requests."
        }, 
        "execution_status": {
            "x-ntnx-enum": [
                "SUCCEEDED", 
                "COMPLETED_WITH_ERROR", 
                "FAILED", 
                "ABORTED", 
                "TIMEDOUT", 
                "INPROGRESS", 
                "SCHEDULED", 
                "TRIGGERED"
            ], 
            "type": "string", 
            "description": "The execution status of an action or an action rule.", 
            "title": "Action execution status or action rule execution status."
        }, 
        "expression": {
            "title": "Expression Definition", 
            "type": "object", 
            "properties": {
                "operator": {
                    "type": "string", 
                    "description": "If the term is a filter (LHS operator RHS), then this\nrepresents the operator.\n"
                }, 
                "property_type": {
                    "type": "string", 
                    "description": "Whether the term is an attribute, metric, action."
                }, 
                "property_name": {
                    "type": "string", 
                    "description": "Name of the attribute, metric, action."
                }, 
                "value": {
                    "type": "string", 
                    "description": "In case of a filter, this represents the RHS."
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "The entity type that the term represents."
                }
            }, 
            "description": "Expression object definition. This holds the context about the token.\n"
        }, 
        "external_configurations": {
            "title": "External Connector Configurations.", 
            "type": "object", 
            "properties": {
                "citrix_connector_config": {
                    "$ref": "#/definitions/citrix_connector_config_details"
                }
            }, 
            "description": "External configurations for the connectors."
        }, 
        "external_configurations_spec": {
            "title": "External Connector Configurations.", 
            "type": "object", 
            "properties": {
                "citrix_connector_config": {
                    "$ref": "#/definitions/citrix_connector_config_details_spec"
                }
            }, 
            "description": "External configurations for the connectors."
        }, 
        "failover_cluster": {
            "title": "Hyper-v failover cluster", 
            "required": [
                "domain_credential"
            ], 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "IP address of the failover cluster."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the failover cluster."
                }, 
                "domain_credential": {
                    "$ref": "#/definitions/credentials"
                }
            }, 
            "description": "Hyper-V failover cluster."
        }, 
        "favorite": {
            "title": "Favorite definition.", 
            "type": "object", 
            "properties": {
                "route": {
                    "type": "string", 
                    "description": "Optional route if present to directly link to the favorite.", 
                    "maxLength": 2048
                }, 
                "query_term_list": {
                    "items": {
                        "$ref": "#/definitions/query_term"
                    }, 
                    "type": "array", 
                    "description": "Structured representation that infers query intent unambiguously. Client will echo this information back to the backend. Essentially, it is like a search result link. The list has an item corresponding to every query term. One user query is nothing but a collection of multiple query terms.\n"
                }, 
                "complete_query": {
                    "type": "string", 
                    "description": "Actual query string."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Entity id.", 
                    "format": "UUID"
                }
            }, 
            "description": "Favorite object definition."
        }, 
        "favorite_get_response": {
            "title": "Get favorites response.", 
            "type": "object", 
            "properties": {
                "favorite_list": {
                    "type": "string", 
                    "description": "List of favorites." 
                }
            }, 
            "description": "Contains the list of favorites."
        }, 
        "file_item": {
            "title": "file_item Intent Spec with placement specified", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for file_item.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/file_item_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "file_item Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a file_item spec"
        }, 
        "file_item_def_status": {
            "title": "file_item Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the file_item."
                }, 
                "name": {
                    "type": "string", 
                    "description": "file_item Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the file_item, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/file_item_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for file_item."
                }
            }, 
            "description": "An intentful representation of a file_item status"
        }, 
        "file_item_intent_input": {
            "title": "file_item Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/file_item"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/file_item_metadata"
                }
            }, 
            "description": "An intentful representation of a file_item"
        }, 
        "file_item_intent_resource": {
            "title": "file_item Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/file_item_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/file_item"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/file_item_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a file_item"
        }, 
        "file_item_intent_response": {
            "title": "file_item Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/file_item_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/file_item"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/file_item_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a file_item"
        }, 
        "file_item_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/file_item_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/file_item_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of file_items"
        }, 
        "file_item_list_metadata": {
            "title": "Metadata for file_item list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "file_item", 
                    "x-ntnx-enum": [
                        "file_item"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "file_item_list_metadata_output": {
            "title": "Metadata for file_item list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "file_item", 
                    "x-ntnx-enum": [
                        "file_item"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "file_item_metadata": {
            "title": "file_item metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when file_item was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "file_item", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "file_item"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "file_item uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the file_item is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when file_item was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the file_item"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "file_item name", 
                    "maxLength": 64
                }
            }, 
            "description": "The file_item kind metadata"
        }, 
        "file_item_reference": {
            "title": "Reference to a file_item", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "file_item", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "file_item"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a file_item"
        }, 
        "file_item_resources": {
            "title": "File item spec object", 
            "type": "object", 
            "properties": {
                "checksum": {
                    "description": "Checksum of the file_item. Should only be set when being used to validate an file_item when setting the source of an file_item, otherwise this is generated by file_item service.", 
                    "$ref": "#/definitions/checksum"
                }, 
                "source_uri": {
                    "type": "string", 
                    "description": "URI that points at the file to create the file_item from."
                }, 
                "data_source_reference": {
                    "description": "Reference to VM disk or image. The expected kind for VMs is vm_disk and for Images is image. In case of VM Disk the uuid should be the disk device uuid, where the disk device is from disk_list from VM status. In case of Images the uuid should be the uuid of the image.", 
                    "$ref": "#/definitions/reference"
                }, 
                "source_auth": {
                    "description": "Authentication object needed to fetch the source.", 
                    "$ref": "#/definitions/source_auth"
                }
            }, 
            "description": "File item spec object"
        }, 
        "file_item_resources_def_status": {
            "title": "File item object", 
            "type": "object", 
            "properties": {
                "retrieval_uri_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of URIs where the raw file_item data can be accessed."
                }, 
                "size_bytes": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "source_auth": {
                    "description": "Authentication object needed to fetch the source.", 
                    "$ref": "#/definitions/source_auth"
                }, 
                "checksum": {
                    "description": "Checksum of the file_item. Should only be set when being used to validate an file_item when setting the source of an file_item, otherwise this is generated by file_item service.", 
                    "$ref": "#/definitions/checksum"
                }, 
                "source_uri": {
                    "type": "string", 
                    "description": "URI that points at the file to create the file_item from."
                }, 
                "data_source_reference": {
                    "description": "Reference to VM disk or image. The expected kind for VMs is vm_disk and for Images is image. In case of VM Disk the uuid should be the disk device uuid, where the disk device is from disk_list from VM status. In case of Images the uuid should be the uuid of the image.", 
                    "$ref": "#/definitions/reference"
                }
            }, 
            "description": "File item object"
        }, 
        "file_item_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "file_item", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "file_item"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "filter": {
            "title": "Filter.", 
            "required": [
                "entity_filter_expression_list"
            ], 
            "type": "object", 
            "properties": {
                "entity_filter_expression_list": {
                    "items": {
                        "$ref": "#/definitions/entity_filter_expression"
                    }, 
                    "type": "array", 
                    "description": "A list of Entity filter expressions."
                }, 
                "scope_filter_expression_list": {
                    "items": {
                        "$ref": "#/definitions/scope_filter_expression"
                    }, 
                    "type": "array", 
                    "description": "A list of Scope filter expressions."
                }
            }, 
            "description": "A filter defines the selection criteria for entities. It consists of two lists of filter expressions. The filter expressions can be of two types, Scope or Entity. The expressions in both these lists are combined with a logical AND.\n"
        }, 
        "floating_ip": {
            "title": "floating_ip Intent Spec with placement specified", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for floating_ip.", 
                    "maxLength": 1000
                }, 
                "name": {
                    "type": "string", 
                    "description": "floating_ip Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/floating_ip_resources"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a floating_ip spec"
        }, 
        "floating_ip_def_status": {
            "title": "floating_ip Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the floating_ip."
                }, 
                "name": {
                    "type": "string", 
                    "description": "floating_ip Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the floating_ip, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/floating_ip_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for floating_ip."
                }
            }, 
            "description": "An intentful representation of a floating_ip status"
        }, 
        "floating_ip_intent_input": {
            "title": "floating_ip Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/floating_ip"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/floating_ip_metadata"
                }
            }, 
            "description": "An intentful representation of a floating_ip"
        }, 
        "floating_ip_intent_resource": {
            "title": "floating_ip Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/floating_ip_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/floating_ip"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/floating_ip_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a floating_ip"
        }, 
        "floating_ip_intent_response": {
            "title": "floating_ip Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/floating_ip_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/floating_ip"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/floating_ip_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a floating_ip"
        }, 
        "floating_ip_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/floating_ip_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/floating_ip_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of floating_ips"
        }, 
        "floating_ip_list_metadata": {
            "title": "Metadata for floating_ip list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "floating_ip", 
                    "x-ntnx-enum": [
                        "floating_ip"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "floating_ip_list_metadata_output": {
            "title": "Metadata for floating_ip list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "floating_ip", 
                    "x-ntnx-enum": [
                        "floating_ip"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "floating_ip_metadata": {
            "title": "floating_ip metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when floating_ip was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "floating_ip", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "floating_ip"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "floating_ip uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the floating_ip is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when floating_ip was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the floating_ip"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "floating_ip name", 
                    "maxLength": 64
                }
            }, 
            "description": "The floating_ip kind metadata"
        }, 
        "floating_ip_reference": {
            "title": "Reference to a floating_ip", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "floating_ip", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "floating_ip"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a floating_ip"
        }, 
        "floating_ip_resources": {
            "title": "Floating IP association request", 
            "type": "object", 
            "properties": {
                "vm_nic_reference": {
                    "description": "NIC with which the floating IP is associated.", 
                    "$ref": "#/definitions/vm_nic_reference"
                }
            }, 
            "description": "Associate Floating IP to NIC"
        }, 
        "floating_ip_resources_def_status": {
            "title": "Floating IP allocation status", 
            "type": "object", 
            "properties": {
                "floating_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The Floating IP associated with the vnic."
                }, 
                "vm_nic_reference": {
                    "description": "NIC with which the floating IP is associated.", 
                    "$ref": "#/definitions/vm_nic_reference"
                }
            }, 
            "description": "Floating IP allocation status."
        }, 
        "floating_ip_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "floating_ip", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "floating_ip"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "flow_service_config_input": {
            "description": "Input body to configure Flow.", 
            "title": "Flow configuration.", 
            "type": "object", 
            "properties": {
                "is_validation_only": {
                    "type": "boolean", 
                    "description": "Flag indicating whether to do Flow enablement validation only.\n"
                }, 
                "state": {
                    "x-ntnx-enum": [
                        "ENABLE", 
                        "DISABLE"
                    ], 
                    "type": "string", 
                    "description": "The desired state of Flow."
                }, 
                "netsil_config": {
                    "description": "Parameters required to configure the PC with Netsil AOC and spin up the IPFix aggregator in the PE.\n", 
                    "$ref": "#/definitions/netsil_config"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "state"
                    ]
                }, 
                {
                    "required": [
                        "is_validation_only"
                    ]
                }
            ]
        }, 
        "flow_service_config_status": {
            "title": "Flow Service configuration state.", 
            "type": "object", 
            "properties": {
                "task_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Task uuid for the Flow enablement submitted request. This will not be populated when only validation is done.\n", 
                    "format": "UUID"
                }, 
                "validation_result": {
                    "description": "Validation result of the Flow service enablement. Will only be populated when user does validation_only operation.\n", 
                    "$ref": "#/definitions/validation_result"
                }
            }, 
            "description": "Flow Service configuration state."
        }, 
        "gcp_list_metadata": {
            "title": "Metadata for GCP list calls", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }
            }, 
            "description": "All GCP list calls will have this metadata block as input"
        }, 
        "generic_key_value_pair": {
            "additionalProperties": {
                "type": "string"
            }, 
            "type": "object", 
            "description": "Generic key value pair used for custom attributes.", 
            "title": "Generic key value pair."
        }, 
        "generic_response": {
            "title": "Generic Response Defintion", 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "Type of the response."
                }, 
                "result": {
                    "$ref": "#/definitions/entities_with_metrics_result"
                }
            }, 
            "description": "Generic response object definition."
        }, 
        "graphql_query": {
            "title": "Graphql query.", 
            "required": [
                "query"
            ], 
            "type": "object", 
            "properties": {
                "query": {
                    "type": "string"
                }
            }, 
            "description": "Graphql query."
        }, 
        "graphql_response": {
            "title": "Graphql api success response.", 
            "type": "object", 
            "properties": {
                "data": {
                    "additionalProperties": {
                        "type": "object"
                    }, 
                    "type": "object"
                }
            }, 
            "description": "Graphql api success response."
        }, 
        "group_query": {
            "type": "object", 
            "description": "Group query object definition. Making it opaque in the first\nrelease. This will have the details of the parameters which are\npresent in group query.\n", 
            "title": "Group Query Definition"
        }, 
        "groups_aggregation_function": {
            "x-ntnx-enum": [
                "SUM", 
                "AVG", 
                "MIN", 
                "MAX", 
                "LAST", 
                "COUNT", 
                "BUCKETS"
            ], 
            "type": "string", 
            "description": "Downsampling function to take time series data and resolve to one value for aggregation purposes.\n", 
            "title": "Entities Request Aggregation Function"
        }, 
        "groups_attribute_type": {
            "x-ntnx-enum": [
                "CONTINUOUS", 
                "DISCRETE"
            ], 
            "type": "string", 
            "description": "The type of an attribute being used for grouping - may be continuous or discrete.\n", 
            "title": "Attribute Type"
        }, 
        "groups_bucket_summary_map": {
            "additionalProperties": {
                "type": "integer", 
                "format": "int64"
            }, 
            "type": "object", 
            "description": "Group Bucket Summary Map.", 
            "title": "Group Buckets Summary Map"
        }, 
        "groups_entity": {
            "title": "Entity", 
            "type": "object", 
            "properties": {
                "entity_id": {
                    "type": "string"
                }, 
                "data": {
                    "items": {
                        "$ref": "#/definitions/groups_field_data"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "An Individual Entity."
        }, 
        "groups_field_data": {
            "title": "Group Summary Data", 
            "type": "object", 
            "properties": {
                "buckets": {
                    "$ref": "#/definitions/groups_bucket_summary_map"
                }, 
                "values": {
                    "items": {
                        "$ref": "#/definitions/groups_timevalue_pair"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string"
                }
            }, 
            "description": "Group Summary Data."
        }, 
        "groups_get_entities_request": {
            "title": "Get Entities Request", 
            "required": [
                "entity_type"
            ], 
            "type": "object", 
            "properties": {
                "number_of_intervals_for_latest_data": {
                    "type": "integer", 
                    "description": "When retrieving latest values, how far back to look as a multiple of the downsampling interval for the metric.\n", 
                    "format": "int32"
                }, 
                "filter_criteria": {
                    "type": "string", 
                    "description": "FIQL filter criteria that will be used to filter the returned data.\n"
                }, 
                "group_sort_attribute": {
                    "type": "string", 
                    "description": "The name of the attribute that will be used to sort groups.\n"
                }, 
                "group_attributes": {
                    "items": {
                        "$ref": "#/definitions/groups_requested_attribute"
                    }, 
                    "type": "array"
                }, 
                "number_of_buckets": {
                    "type": "integer", 
                    "description": "For grouping, how many groups to return.", 
                    "format": "int32"
                }, 
                "entity_ids": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "A set of entities that the request will be scoped to."
                }, 
                "group_count": {
                    "type": "integer", 
                    "description": "The maximum number of groups to return in the result.", 
                    "format": "int64"
                }, 
                "group_member_attributes": {
                    "items": {
                        "$ref": "#/definitions/groups_requested_attribute"
                    }, 
                    "type": "array"
                }, 
                "group_member_sort_attribute": {
                    "type": "string", 
                    "description": "The name of the attribute that will be used to sort group members.\n"
                }, 
                "bucket_boundary": {
                    "type": "integer", 
                    "description": "For grouping, the boundary to snap to when grouping.", 
                    "format": "int32"
                }, 
                "group_offset": {
                    "type": "integer", 
                    "description": "The offset into the total set of groups to return.", 
                    "format": "int64"
                }, 
                "interval_end_ms": {
                    "default": 0, 
                    "type": "integer", 
                    "description": "For a time-series query, the end of the interval since the epoch in ms. Default is latest value only.\n", 
                    "format": "int64"
                }, 
                "downsampling_interval": {
                    "type": "integer", 
                    "description": "Downsampling interval to apply to query if override is desired.\n", 
                    "format": "int32"
                }, 
                "availability_zone_scope": {
                    "default": "LOCAL", 
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "GLOBAL"
                    ], 
                    "type": "string", 
                    "description": "The scope of availability zones from which to fetch the  data.\n"
                }, 
                "interval_start_ms": {
                    "default": 0, 
                    "type": "integer", 
                    "description": "For a time-series query, the start of the interval since the epoch in ms. Default is latest value only.\n", 
                    "format": "int64"
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "The entity type that will be requested."
                }, 
                "grouping_attribute_type": {
                    "$ref": "#/definitions/groups_attribute_type"
                }, 
                "group_member_offset": {
                    "type": "integer", 
                    "description": "The offset into the total member set to return per group.", 
                    "format": "int64"
                }, 
                "group_member_count": {
                    "type": "integer", 
                    "description": "The maximum number of members to return per group.", 
                    "format": "int64"
                }, 
                "grouping_attribute": {
                    "type": "string", 
                    "description": "Attribute that will be used to perform a group-by if needed.\n"
                }, 
                "group_member_sort_downsampling_function": {
                    "$ref": "#/definitions/groups_sort_downsampling_function"
                }, 
                "group_member_sort_order": {
                    "$ref": "#/definitions/groups_sort_order"
                }, 
                "query_name": {
                    "type": "string", 
                    "description": "A custom name to use for tagging the query when debugging."
                }, 
                "group_sort_order": {
                    "$ref": "#/definitions/groups_sort_order"
                }, 
                "group_sort_downsample_function": {
                    "$ref": "#/definitions/groups_sort_downsampling_function"
                }
            }, 
            "description": "Get Entities Request."
        }, 
        "groups_get_entities_response": {
            "title": "Get Entities Response", 
            "type": "object", 
            "properties": {
                "filtered_entity_count": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "group_results": {
                    "items": {
                        "$ref": "#/definitions/groups_group_result"
                    }, 
                    "type": "array"
                }, 
                "entity_type": {
                    "type": "string"
                }, 
                "filtered_group_count": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "total_entity_count": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "total_group_count": {
                    "type": "integer", 
                    "format": "int64"
                }
            }, 
            "description": "Get Entities Response."
        }, 
        "groups_group_result": {
            "title": "Group Result", 
            "type": "object", 
            "properties": {
                "entity_results": {
                    "items": {
                        "$ref": "#/definitions/groups_entity"
                    }, 
                    "type": "array"
                }, 
                "group_by_column_value": {
                    "type": "string"
                }, 
                "total_entity_count": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "group_summaries": {
                    "$ref": "#/definitions/groups_group_summary_map"
                }
            }, 
            "description": "Group Result."
        }, 
        "groups_group_summary_map": {
            "additionalProperties": {
                "$ref": "#/definitions/groups_field_data"
            }, 
            "type": "object", 
            "description": "Group Summary Info Map.", 
            "title": "Group Summary Map"
        }, 
        "groups_requested_attribute": {
            "title": "Entities Request Attribute", 
            "required": [
                "attribute"
            ], 
            "type": "object", 
            "properties": {
                "attribute": {
                    "type": "string"
                }, 
                "operation": {
                    "$ref": "#/definitions/groups_aggregation_function"
                }, 
                "ancestor_entity_type": {
                    "type": "string"
                }
            }, 
            "description": "An attribute that has been requested to be returned in the response.\n"
        }, 
        "groups_sort_downsampling_function": {
            "x-ntnx-enum": [
                "MAX", 
                "MIN", 
                "FIRST", 
                "LAST", 
                "LATEST"
            ], 
            "type": "string", 
            "description": "Downsampling function to take time series data and resolve to one value for sorting purposes.\n", 
            "title": "Entities Request Downsampling Function"
        }, 
        "groups_sort_order": {
            "x-ntnx-enum": [
                "ASCENDING", 
                "DESCENDING"
            ], 
            "type": "string", 
            "description": "Sort order for entities and entity groups.", 
            "title": "Entities Request Sort Order"
        }, 
        "groups_timevalue_pair": {
            "title": "Time-Value Pair", 
            "type": "object", 
            "properties": {
                "values": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array"
                }, 
                "time": {
                    "type": "integer", 
                    "format": "int64"
                }
            }, 
            "description": "Time-Value Pair Data."
        }, 
        "guest_customization": {
            "x-ntnx-one-of": [
                {
                    "required": [
                        "sysprep"
                    ]
                }, 
                {
                    "required": [
                        "cloud_init"
                    ]
                }
            ], 
            "title": "Guest Customization Configuration for creation/modification request", 
            "additionalProperties": {
                "type": "string"
            }, 
            "type": "object", 
            "properties": {
                "cloud_init": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "user_data"
                            ]
                        }, 
                        {
                            "required": [
                                "custom_key_values"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "meta_data": {
                            "type": "string", 
                            "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n", 
                            "maxLength": 32000
                        }, 
                        "user_data": {
                            "type": "string", 
                            "description": "The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n", 
                            "maxLength": 32000
                        }, 
                        "custom_key_values": {
                            "$ref": "#/definitions/custom_generic_key_value_pair"
                        }
                    }, 
                    "description": "If this field is set, the guest will be customized using cloud-init. Either user_data or custom_key_values should be provided. If custom_key_ves are provided then the user data will be generated using these key-value pairs.\n"
                }, 
                "is_overridable": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "Flag to allow override of customization by deployer."
                }, 
                "sysprep": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "unattend_xml"
                            ]
                        }, 
                        {
                            "required": [
                                "custom_key_values"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "install_type": {
                            "default": "PREPARED", 
                            "x-ntnx-enum": [
                                "FRESH", 
                                "PREPARED"
                            ], 
                            "type": "string", 
                            "description": "Whether the guest will be freshly installed using this unattend configuration, or whether this unattend configuration will be applied to a pre-prepared image. Default is \"PREPARED\".\n"
                        }, 
                        "unattend_xml": {
                            "type": "string", 
                            "description": "This field contains a Sysprep unattend xml definition, as a string. The value must be base64 encoded.\n", 
                            "maxLength": 32000
                        }, 
                        "custom_key_values": {
                            "$ref": "#/definitions/custom_generic_key_value_pair"
                        }
                    }, 
                    "description": "If this field is set, the guest will be customized using Sysprep. Either unattend_xml or custom_key_values should be provided. If custom_key_values are provided then the unattended answer file will be generated using these key-value pairs.\n"
                }
            }, 
            "description": "VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.\n"
        }, 
        "guest_customization_status": {
            "x-ntnx-one-of": [
                {
                    "required": [
                        "sysprep"
                    ]
                }, 
                {
                    "required": [
                        "cloud_init"
                    ]
                }
            ], 
            "title": "Guest Customization Configuration for creation/modification request", 
            "additionalProperties": {
                "type": "string"
            }, 
            "type": "object", 
            "properties": {
                "cloud_init": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "user_data"
                            ]
                        }, 
                        {
                            "required": [
                                "custom_key_values"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "meta_data": {
                            "type": "string", 
                            "description": "The contents of the meta_data configuration for cloud-init. This can be formatted as YAML or JSON. The value must be base64 encoded.\n"
                        }, 
                        "user_data": {
                            "type": "string", 
                            "description": "The contents of the user_data configuration for cloud-init. This can be formatted as YAML, JSON, or could be a shell script. The value must be base64 encoded.\n"
                        }, 
                        "custom_key_values": {
                            "$ref": "#/definitions/custom_generic_key_value_pair"
                        }
                    }, 
                    "description": "If this field is set, the guest will be customized using cloud-init. Either user_data or custom_key_values should be provided. If custom_key_ves are provided then the user data will be generated using these key-value pairs.\n"
                }, 
                "is_overridable": {
                    "type": "boolean", 
                    "description": "Flag to allow override of customization by deployer."
                }, 
                "sysprep": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "unattend_xml"
                            ]
                        }, 
                        {
                            "required": [
                                "custom_key_values"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "install_type": {
                            "default": "PREPARED", 
                            "x-ntnx-enum": [
                                "FRESH", 
                                "PREPARED"
                            ], 
                            "type": "string", 
                            "description": "Whether the guest will be freshly installed using this unattend configuration, or whether this unattend configuration will be applied to a pre-prepared image. Default is \"PREPARED\".\n"
                        }, 
                        "unattend_xml": {
                            "type": "string", 
                            "description": "This field contains a Sysprep unattend xml definition, as a string. The value must be base64 encoded.\n"
                        }, 
                        "custom_key_values": {
                            "$ref": "#/definitions/custom_generic_key_value_pair"
                        }
                    }, 
                    "description": "If this field is set, the guest will be customized using Sysprep. Either unattend_xml or custom_key_values should be provided. If custom_key_values are provided then the unattended answer file will be generated using these key-value pairs.\n"
                }
            }, 
            "description": "VM guests may be customized at boot time using one of several different methods. Currently, cloud-init w/ ConfigDriveV2 (for Linux VMs) and Sysprep (for Windows VMs) are supported. Only ONE OF sysprep or cloud_init should be provided. Note that guest customization can currently only be set during VM creation. Attempting to change it after creation will result in an error. Additional properties can be specified. For example - in the context of VM template creation if \"override_script\" is set to \"True\" then the deployer can upload their own custom script.\n"
        }, 
        "guest_tools_spec": {
            "title": "Guest Tools information", 
            "type": "object", 
            "properties": {
                "nutanix_guest_tools": {
                    "description": "Nutanix Guest Tools information", 
                    "$ref": "#/definitions/nutanix_guest_tools_spec"
                }
            }, 
            "description": "Information regarding guest tools."
        }, 
        "guest_tools_status": {
            "title": "Guest Tools information", 
            "type": "object", 
            "properties": {
                "nutanix_guest_tools": {
                    "description": "Nutanix Guest Tools information", 
                    "$ref": "#/definitions/nutanix_guest_tools_status"
                }
            }, 
            "description": "Information regarding guest tools."
        }, 
        "help_result": {
            "title": "Help Result Definition", 
            "type": "object", 
            "properties": {
                "url": {
                    "type": "string", 
                    "description": "URL of the help page from."
                }, 
                "title": {
                    "type": "string", 
                    "description": "Title fo the help result."
                }, 
                "ancestor_title_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of ancestor titles for the help page."
                }, 
                "highlight_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of highlights for the help page."
                }, 
                "ancestor_url_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of ancestor urls for the help page."
                }
            }, 
            "description": "Help result object definition."
        }, 
        "host": {
            "title": "Host Input definition", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Host Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Host resources.", 
                    "properties": {
                        "windows_domain": {
                            "$ref": "#/definitions/windows_domain"
                        }, 
                        "controller_vm": {
                            "$ref": "#/definitions/controller_vm"
                        }, 
                        "failover_cluster": {
                            "$ref": "#/definitions/failover_cluster"
                        }
                    }
                }
            }, 
            "description": "Host Definition."
        }, 
        "host_def_status": {
            "title": "Host Status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Host Name."
                }, 
                "resources": {
                    "title": "Host Resources", 
                    "type": "object", 
                    "properties": {
                        "gpu_driver_version": {
                            "type": "string", 
                            "description": "Host GPU driver version."
                        }, 
                        "failover_cluster": {
                            "$ref": "#/definitions/failover_cluster"
                        }, 
                        "ipmi": {
                            "$ref": "#/definitions/ipmi"
                        }, 
                        "cpu_model": {
                            "type": "string", 
                            "description": "Host CPU model."
                        }, 
                        "host_nics_id_list": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "Host NICs."
                        }, 
                        "num_cpu_sockets": {
                            "type": "integer", 
                            "description": "Number of CPU sockets.", 
                            "format": "int64"
                        }, 
                        "windows_domain": {
                            "$ref": "#/definitions/windows_domain"
                        }, 
                        "gpu_list": {
                            "items": {
                                "$ref": "#/definitions/host_gpu"
                            }, 
                            "type": "array", 
                            "description": "List of GPUs on the host."
                        }, 
                        "serial_number": {
                            "type": "string", 
                            "description": "Node serial number."
                        }, 
                        "cpu_capacity_hz": {
                            "type": "integer", 
                            "description": "Host CPU capacity.", 
                            "format": "int64"
                        }, 
                        "memory_capacity_mib": {
                            "type": "integer", 
                            "description": "Host memory capacity in MiB.", 
                            "format": "int64"
                        }, 
                        "host_disks_reference_list": {
                            "items": {
                                "$ref": "#/definitions/disk_reference"
                            }, 
                            "type": "array"
                        }, 
                        "monitoring_state": {
                            "x-ntnx-enum": [
                                "MONITORED", 
                                "NOT_MONITORED"
                            ], 
                            "type": "string", 
                            "description": "Host monitoring status."
                        }, 
                        "hypervisor": {
                            "$ref": "#/definitions/hypervisor"
                        }, 
                        "host_type": {
                            "x-ntnx-enum": [
                                "HYPER_CONVERGED", 
                                "COMPUTE_ONLY"
                            ], 
                            "type": "string", 
                            "description": "Host type."
                        }, 
                        "num_cpu_cores": {
                            "type": "integer", 
                            "description": "Number of CPU cores on Host.", 
                            "format": "int64"
                        }, 
                        "rackable_unit_reference": {
                            "$ref": "#/definitions/rackable_unit_reference"
                        }, 
                        "controller_vm": {
                            "$ref": "#/definitions/controller_vm"
                        }, 
                        "block": {
                            "$ref": "#/definitions/block"
                        }
                    }, 
                    "description": "Host resources."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/reference"
                }
            }, 
            "description": "Host Status definition."
        }, 
        "host_gpu": {
            "title": "Host GPU", 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "UNUSED", 
                        "USED_FOR_PASSTHROUGH", 
                        "USED_FOR_VIRTUAL"
                    ], 
                    "type": "string", 
                    "description": "Current status of the physical GPU."
                }, 
                "vendor": {
                    "x-ntnx-enum": [
                        "NVIDIA", 
                        "INTEL", 
                        "AMD"
                    ], 
                    "type": "string", 
                    "description": "The vendor of the GPU."
                }, 
                "num_virtual_display_heads": {
                    "type": "integer", 
                    "description": "Number of supported virtual display heads.", 
                    "format": "int32"
                }, 
                "assignable": {
                    "type": "boolean", 
                    "description": "Whether this vGPU instance can be allocated to a VM."
                }, 
                "license_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of license types associated with this GPU."
                }, 
                "num_vgpus_allocated": {
                    "type": "integer", 
                    "description": "The number of vGPU instances allocated for this physical GPU resource.\n", 
                    "format": "int32"
                }, 
                "pci_address": {
                    "type": "string", 
                    "description": "GPU {segment:bus:device:function} (sbdf) address."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the host GPU."
                }, 
                "frame_buffer_size_mib": {
                    "type": "integer", 
                    "description": "GPU frame buffer size in MiB.", 
                    "format": "int64"
                }, 
                "index": {
                    "type": "integer", 
                    "description": "The index of the vGPU within physical GPU resource.", 
                    "format": "int32"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the GPU.", 
                    "format": "UUID"
                }, 
                "numa_node": {
                    "type": "integer", 
                    "description": "NUMA node this GPU belongs to.", 
                    "format": "int32"
                }, 
                "max_resolution": {
                    "type": "string", 
                    "description": "Maximum resolution per display head."
                }, 
                "consumer_reference": {
                    "$ref": "#/definitions/reference"
                }, 
                "mode": {
                    "x-ntnx-enum": [
                        "PASSTHROUGH_GRAPHICS", 
                        "PASSTHROUGH_COMPUTE", 
                        "VIRTUAL"
                    ], 
                    "type": "string", 
                    "description": "The type of this GPU."
                }, 
                "fraction": {
                    "type": "integer", 
                    "description": "Fraction of the physical GPU.", 
                    "format": "int32"
                }, 
                "guest_driver_version": {
                    "type": "string", 
                    "description": "Last determined guest driver version."
                }, 
                "device_id": {
                    "type": "integer", 
                    "description": "The device ID of the GPU.", 
                    "format": "int32"
                }
            }, 
            "description": "Host GPU."
        }, 
        "host_intent_input": {
            "title": "host Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/host"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/host_metadata"
                }
            }, 
            "description": "An intentful representation of a host"
        }, 
        "host_intent_resource": {
            "title": "host Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/host_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/host"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/host_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a host"
        }, 
        "host_intent_response": {
            "title": "host Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/host_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/host"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/host_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a host"
        }, 
        "host_ipmi_args": {
            "title": "IPMI Args", 
            "required": [
                "args"
            ], 
            "type": "object", 
            "properties": {
                "args": {
                    "type": "string", 
                    "description": "IPMI arguments"
                }
            }, 
            "description": "Arguments to the IPMI command"
        }, 
        "host_ipmi_cmd_result": {
            "title": "IPMI Command", 
            "type": "object", 
            "properties": {
                "result": {
                    "type": "string", 
                    "description": "Result of the command"
                }
            }, 
            "description": "IPMI Command"
        }, 
        "host_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/host_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/host_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of hosts"
        }, 
        "host_list_metadata": {
            "title": "Metadata for host list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "host", 
                    "x-ntnx-enum": [
                        "host"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "host_list_metadata_output": {
            "title": "Metadata for host list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "host", 
                    "x-ntnx-enum": [
                        "host"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "host_metadata": {
            "title": "host metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when host was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "host", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "host"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "host uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the host is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when host was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the host"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "host name", 
                    "maxLength": 64
                }
            }, 
            "description": "The host kind metadata"
        }, 
        "host_reference": {
            "title": "Reference to a host", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "host", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "host"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a host"
        }, 
        "host_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "host", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "host"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "http_proxy_whitelist": {
            "title": "HTTP Proxy Whitelist", 
            "required": [
                "target", 
                "target_type"
            ], 
            "type": "object", 
            "properties": {
                "target": {
                    "type": "string"
                }, 
                "target_type": {
                    "x-ntnx-enum": [
                        "IPV4_ADDRESS", 
                        "IPV4_NETWORK_MASK", 
                        "DOMAIN_NAME_SUFFIX", 
                        "HOST_NAME"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "HTTP Proxy Whitelist."
        }, 
        "hypervisor": {
            "title": "Hypervisor Info", 
            "required": [
                "ip"
            ], 
            "type": "object", 
            "properties": {
                "num_vms": {
                    "type": "integer", 
                    "description": "Num of VMs running on this Host.", 
                    "format": "int64"
                }, 
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Hypervisor IP."
                }, 
                "hypervisor_full_name": {
                    "type": "string", 
                    "description": "Full name of hypervisor running on Host."
                }
            }, 
            "description": "Host Hypervisor information."
        }, 
        "hypervisor_info": {
            "title": "Hypervisor type and version on a cluster.", 
            "type": "object", 
            "properties": {
                "hypervisor_version": {
                    "type": "string"
                }, 
                "hypervisor_type": {
                    "type": "string"
                }
            }, 
            "description": "Hypervisor info for a cluster."
        }, 
        "hypervisor_server": {
            "title": "Hypervisor Server", 
            "required": [
                "ip"
            ], 
            "type": "object", 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string"
                }, 
                "version": {
                    "type": "string"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "VMWARE", 
                        "XEN", 
                        "AHV", 
                        "HYPERV"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "Hypervisor server information."
        }, 
        "icmp": {
            "title": "ICMP parameters", 
            "type": "object", 
            "properties": {
                "icmp_code": {
                    "minimum": 0, 
                    "type": "integer", 
                    "maximum": 255, 
                    "format": "uint8"
                }, 
                "icmp_type": {
                    "minimum": 0, 
                    "type": "integer", 
                    "maximum": 255, 
                    "format": "uint8"
                }
            }, 
            "description": "ICMP parameters to be matched in routing policy."
        }, 
        "icmp_status": {
            "title": "ICMP parameters", 
            "type": "object", 
            "properties": {
                "icmp_code": {
                    "type": "integer", 
                    "format": "uint8"
                }, 
                "icmp_type": {
                    "type": "integer", 
                    "format": "uint8"
                }
            }, 
            "description": "ICMP parameters to be matched in routing policy."
        }, 
        "idempotence_identifiers_input": {
            "title": "Idempotence object", 
            "required": [
                "count"
            ], 
            "type": "object", 
            "properties": {
                "client_identifier": {
                    "type": "string", 
                    "description": "The client identifier string."
                }, 
                "count": {
                    "default": 1, 
                    "type": "integer", 
                    "description": "The number of idempotence identifiers provided."
                }, 
                "valid_duration_in_minutes": {
                    "type": "integer", 
                    "description": "Number of minutes from creation time for which idempotence identifier uuid list is valid."
                }
            }, 
            "description": "Resources for the idempotence identifier kind."
        }, 
        "idempotence_identifiers_list_metadata": {
            "title": "Metadata for idempotence_identifiers list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "idempotence_identifiers", 
                    "x-ntnx-enum": [
                        "idempotence_identifiers"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "idempotence_identifiers_list_metadata_output": {
            "title": "Metadata for idempotence_identifiers list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "idempotence_identifiers", 
                    "x-ntnx-enum": [
                        "idempotence_identifiers"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "idempotence_identifiers_metadata": {
            "title": "idempotence_identifiers metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when idempotence_identifiers was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "idempotence_identifiers", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "idempotence_identifiers"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "idempotence_identifiers uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the idempotence_identifiers is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when idempotence_identifiers was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the idempotence_identifiers"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "idempotence_identifiers name", 
                    "maxLength": 64
                }
            }, 
            "description": "The idempotence_identifiers kind metadata"
        }, 
        "idempotence_identifiers_reference": {
            "title": "Reference to a idempotence_identifiers", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "idempotence_identifiers", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "idempotence_identifiers"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a idempotence_identifiers"
        }, 
        "idempotence_identifiers_response": {
            "title": "Idempotence identifier status definition.", 
            "required": [
                "count", 
                "uuid_list"
            ], 
            "type": "object", 
            "properties": {
                "client_identifier": {
                    "type": "string", 
                    "description": "The client identifier string."
                }, 
                "count": {
                    "default": 1, 
                    "type": "integer", 
                    "description": "The number of idempotence identifiers provided."
                }, 
                "expiration_time": {
                    "type": "string", 
                    "description": "The expiration time (with reference to system time). Value is creation time + valid_duration", 
                    "format": "date-time"
                }, 
                "uuid_list": {
                    "items": {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "type": "string", 
                        "description": "UUID to identify the relationship <to be updated>", 
                        "format": "UUID"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Idempotence identifier status definition."
        }, 
        "idempotence_identifiers_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "idempotence_identifiers", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "idempotence_identifiers"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "identifier_input": {
            "title": "The input definition.", 
            "required": [
                "name_list"
            ], 
            "type": "object", 
            "properties": {
                "name_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "The list of names for which UUID is to be generated."
                }
            }, 
            "description": "The input definition object"
        }, 
        "identifier_response": {
            "title": "A list of UUID5 corresponding to the provided names.", 
            "type": "object", 
            "properties": {
                "name_uuid_list": {
                    "items": {
                        "$ref": "#/definitions/name_identifier_map"
                    }, 
                    "type": "array", 
                    "description": "The list of name to salted UUID5 mapping(s)."
                }
            }, 
            "description": "A list of UUID5 corresponding to the provided names."
        }, 
        "identity_provider": {
            "title": "Identity provider details", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Identity Provider name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "idp_metadata"
                            ]
                        }, 
                        {
                            "required": [
                                "idp_properties"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "idp_properties": {
                            "required": [
                                "idp_url", 
                                "login_url", 
                                "certificate"
                            ], 
                            "type": "object", 
                            "description": "Urls and other info about the IDP.", 
                            "properties": {
                                "idp_url": {
                                    "type": "string", 
                                    "description": "URL of the Identity provider.", 
                                    "maxLength": 2000
                                }, 
                                "logout_url": {
                                    "type": "string", 
                                    "description": "Logout URL of the Identity provider.", 
                                    "maxLength": 2000
                                }, 
                                "login_url": {
                                    "type": "string", 
                                    "description": "Login URL of the Identity provider.", 
                                    "maxLength": 2000
                                }, 
                                "error_url": {
                                    "type": "string", 
                                    "description": "Error URL of the Identity provider.", 
                                    "maxLength": 2000
                                }, 
                                "certificate": {
                                    "type": "string", 
                                    "description": "Cert for verification."
                                }
                            }
                        }, 
                        "idp_metadata": {
                            "type": "string", 
                            "description": "Metadata in xml format with IDP details."
                        }
                    }, 
                    "description": "Urls and other info about the IDP."
                }
            }, 
            "description": "The configuration details of the identity provider."
        }, 
        "identity_provider_def_status": {
            "title": "Identity provider details", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Identity Provider name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "type": "object", 
                    "description": "Urls and other info about the IDP.", 
                    "properties": {
                        "idp_properties": {
                            "required": [
                                "idp_url", 
                                "login_url", 
                                "certificate"
                            ], 
                            "type": "object", 
                            "description": "Urls and other info about the IDP.", 
                            "properties": {
                                "idp_url": {
                                    "type": "string", 
                                    "description": "URL of the Identity provider.", 
                                    "maxLength": 2000
                                }, 
                                "logout_url": {
                                    "type": "string", 
                                    "description": "Logout URL of the Identity provider.", 
                                    "maxLength": 2000
                                }, 
                                "login_url": {
                                    "type": "string", 
                                    "description": "Login URL of the Identity provider.", 
                                    "maxLength": 2000
                                }, 
                                "error_url": {
                                    "type": "string", 
                                    "description": "Error URL of the Identity provider.", 
                                    "maxLength": 2000
                                }, 
                                "certificate": {
                                    "type": "string", 
                                    "description": "Cert for verification."
                                }
                            }
                        }, 
                        "idp_metadata": {
                            "type": "string", 
                            "description": "Metadata in xml format with IDP details."
                        }
                    }
                }
            }, 
            "description": "Details of the identity provider."
        }, 
        "identity_provider_intent_input": {
            "title": "identity_provider Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/identity_provider"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/identity_provider_metadata"
                }
            }, 
            "description": "An intentful representation of a identity_provider"
        }, 
        "identity_provider_intent_resource": {
            "title": "identity_provider Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/identity_provider_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/identity_provider"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/identity_provider_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a identity_provider"
        }, 
        "identity_provider_intent_response": {
            "title": "identity_provider Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/identity_provider_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/identity_provider"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/identity_provider_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a identity_provider"
        }, 
        "identity_provider_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/identity_provider_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/identity_provider_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of identity_providers"
        }, 
        "identity_provider_list_metadata": {
            "title": "Metadata for identity_provider list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "identity_provider", 
                    "x-ntnx-enum": [
                        "identity_provider"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "identity_provider_list_metadata_output": {
            "title": "Metadata for identity_provider list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "identity_provider", 
                    "x-ntnx-enum": [
                        "identity_provider"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "identity_provider_metadata": {
            "title": "identity_provider metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when identity_provider was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "identity_provider", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "identity_provider"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "identity_provider uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the identity_provider is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when identity_provider was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the identity_provider"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "identity_provider name", 
                    "maxLength": 64
                }
            }, 
            "description": "The identity_provider kind metadata"
        }, 
        "identity_provider_reference": {
            "title": "Reference to a identity_provider", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "identity_provider", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "identity_provider"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a identity_provider"
        }, 
        "identity_provider_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "identity_provider", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "identity_provider"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "image": {
            "title": "image Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "image Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/image_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for image.", 
                    "maxLength": 1000
                }
            }, 
            "description": "An intentful representation of a image spec"
        }, 
        "image_architecture": {
            "x-ntnx-enum": [
                "X86_64", 
                "PPC64", 
                "PPC64LE"
            ], 
            "type": "string", 
            "description": "The supported CPU architecture for a disk image.", 
            "title": "Image architecture"
        }, 
        "image_def_status": {
            "title": "image Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the image."
                }, 
                "name": {
                    "type": "string", 
                    "description": "image Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the image, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/image_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for image."
                }
            }, 
            "description": "An intentful representation of a image status"
        }, 
        "image_intent_input": {
            "title": "image Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/image"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/image_metadata"
                }
            }, 
            "description": "An intentful representation of a image"
        }, 
        "image_intent_resource": {
            "title": "image Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/image_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/image"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/image_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a image"
        }, 
        "image_intent_response": {
            "title": "image Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/image_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/image"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/image_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a image"
        }, 
        "image_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/image_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/image_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of images"
        }, 
        "image_list_metadata": {
            "title": "Metadata for image list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "image", 
                    "x-ntnx-enum": [
                        "image"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "image_list_metadata_output": {
            "title": "Metadata for image list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "image", 
                    "x-ntnx-enum": [
                        "image"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "image_metadata": {
            "title": "image metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when image was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "image", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "image"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "image uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the image is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when image was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the image"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "image name", 
                    "maxLength": 64
                }
            }, 
            "description": "The image kind metadata"
        }, 
        "image_migrate_input": {
            "title": "Input for image migration", 
            "required": [
                "cluster_reference"
            ], 
            "type": "object", 
            "properties": {
                "image_reference_list": {
                    "items": {
                        "$ref": "#/definitions/image_reference"
                    }, 
                    "type": "array", 
                    "description": "Reference to the images from PE cluster to be migrated\n"
                }, 
                "cluster_reference": {
                    "description": "Reference to the PE cluster that currently owns images to be migrated.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }
            }, 
            "description": "Specify the cluster and image(s) from the cluster to migrate to PC\n"
        }, 
        "image_reference": {
            "title": "Reference to a image", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "image", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "image"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a image"
        }, 
        "image_remote_copy_input": {
            "title": "Input for image remote copy operation", 
            "type": "object", 
            "properties": {
                "image_reference_list": {
                    "items": {
                        "$ref": "#/definitions/image_reference"
                    }, 
                    "type": "array", 
                    "description": "Reference to the images from local PC to be used for remote copying. These images will be copied to the remote PC cluster\n"
                }
            }, 
            "description": "Specify the remote PC and image(s) from the local cluster to copy onto remote PC's cluster\n"
        }, 
        "image_resources": {
            "title": "Image spec resources", 
            "type": "object", 
            "properties": {
                "version": {
                    "description": "The image version", 
                    "$ref": "#/definitions/image_version_resources"
                }, 
                "architecture": {
                    "description": "Indicates the CPU architecture that the image is compatible with. If this is not specified for an image this will default to the CPU architecture type of the cluster.\n", 
                    "$ref": "#/definitions/image_architecture"
                }, 
                "image_type": {
                    "$ref": "#/definitions/image_type"
                }, 
                "checksum": {
                    "description": "Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n", 
                    "$ref": "#/definitions/checksum"
                }, 
                "source_uri": {
                    "type": "string", 
                    "description": "The source URI points at the location of a the source image which is used to create/update image.\n"
                }, 
                "data_source_reference": {
                    "description": "Reference to VM disk. The expected kind for VMs Disk is vm_disk. The uuid should be the disk device uuid, where the disk device is from disk_list from VM status.\n", 
                    "$ref": "#/definitions/reference"
                }, 
                "source_options": {
                    "$ref": "#/definitions/source_options"
                }
            }, 
            "description": "Describes the image spec resources object."
        }, 
        "image_resources_def_status": {
            "title": "Image status resources", 
            "type": "object", 
            "properties": {
                "retrieval_uri_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of URIs where the raw image data can be accessed.\n"
                }, 
                "image_type": {
                    "$ref": "#/definitions/image_type"
                }, 
                "checksum": {
                    "description": "Checksum of the image. The checksum is used for image validation if the image has a source specified. For images that do not have their source specified the checksum is generated by the image service.\n", 
                    "$ref": "#/definitions/checksum"
                }, 
                "source_uri": {
                    "type": "string", 
                    "description": "The source URI points at the location of a the source image which is used to create/update image.\n"
                }, 
                "version": {
                    "description": "The image version", 
                    "$ref": "#/definitions/image_version_status"
                }, 
                "architecture": {
                    "$ref": "#/definitions/image_architecture"
                }, 
                "size_bytes": {
                    "type": "integer", 
                    "description": "The size of the image in bytes.", 
                    "format": "int64"
                }, 
                "data_source_reference": {
                    "description": "Reference to VM disk. The expected kind for VMs Disk is vm_disk. The uuid should be the disk device uuid, where the disk device is from disk_list from VM status.\n", 
                    "$ref": "#/definitions/reference"
                }, 
                "source_options": {
                    "$ref": "#/definitions/source_options"
                }
            }, 
            "description": "Describes the image status resources object."
        }, 
        "image_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "image", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "image"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "image_type": {
            "x-ntnx-enum": [
                "DISK_IMAGE", 
                "ISO_IMAGE"
            ], 
            "type": "string", 
            "description": "The type of image.", 
            "title": "Image type"
        }, 
        "image_version_resources": {
            "title": "Image version", 
            "required": [
                "product_name", 
                "product_version"
            ], 
            "type": "object", 
            "properties": {
                "product_version": {
                    "type": "string", 
                    "description": "Version string for the disk image.", 
                    "maxLength": 64
                }, 
                "product_name": {
                    "type": "string", 
                    "description": "Name of the producer/distribution of the image. For example windows or red hat.\n", 
                    "maxLength": 64
                }
            }, 
            "description": "The image version, which is composed of a product name and product version.\n"
        }, 
        "image_version_status": {
            "title": "Image version", 
            "required": [
                "product_name", 
                "product_version"
            ], 
            "type": "object", 
            "properties": {
                "product_version": {
                    "type": "string", 
                    "description": "Version string for the disk image."
                }, 
                "product_name": {
                    "type": "string", 
                    "description": "Name of the producer/distribution of the image. For example windows or red hat.\n"
                }
            }, 
            "description": "The image version, which is composed of a product name and product version.\n"
        }, 
        "indicator": {
            "title": "Information about a monitored metric crossed threshold.", 
            "type": "object", 
            "properties": {
                "metric_display_name": {
                    "type": "string", 
                    "description": "The metric display name in English"
                }, 
                "metric_name": {
                    "type": "string", 
                    "description": "The metric key name"
                }, 
                "trigger_time": {
                    "type": "string", 
                    "description": "The time that this indicator was created.  It is the\nsource metric time.\n", 
                    "format": "date-time"
                }, 
                "condition_type": {
                    "x-ntnx-enum": [
                        "STATIC_THRESHOLD", 
                        "ANOMALY", 
                        "SAFETY_ZONE"
                    ], 
                    "type": "string", 
                    "description": "Indicating if this symptom is caused by static threshold\nor anomaly (dynamic threshold) evaluation.  If an indicator is raised,\nthere may have another indicator indicating the safe guard zone value.\n"
                }, 
                "threshold": {
                    "description": "The threshold used for comparison.", 
                    "$ref": "#/definitions/param_value"
                }, 
                "last_value": {
                    "description": "The last raw value that caused the indicator.", 
                    "$ref": "#/definitions/param_value"
                }, 
                "comparison_operator": {
                    "x-ntnx-enum": [
                        "EQUAL_TO", 
                        "GREATER_THAN", 
                        "GREATER_THAN_OR_EQUAL_TO", 
                        "LESS_THAN", 
                        "LESS_THAN_OR_EQUAL_TO", 
                        "CONTAINS"
                    ], 
                    "type": "string", 
                    "description": "The comparison operator used in this evaluation"
                }, 
                "unit": {
                    "type": "string", 
                    "description": "Data unit."
                }, 
                "wait_time_in_usecs": {
                    "type": "integer", 
                    "description": "How long the indicator had been lasted before raised the issue\n", 
                    "format": "int64"
                }
            }, 
            "description": "It is a symptom that caused the alert."
        }, 
        "instance_tenancy": {
            "x-ntnx-enum": [
                "DEFAULT", 
                "DEDICATED"
            ], 
            "type": "string", 
            "description": "The supported tenancy options for instances launched into the VPC.\n", 
            "title": "Instance Tenancy"
        }, 
        "ip_address": {
            "title": "IP Address", 
            "type": "object", 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Address string."
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "ASSIGNED", 
                        "LEARNED"
                    ], 
                    "type": "string", 
                    "description": "Address type. It can only be \"ASSIGNED\" in the spec. If no type is\nspecified in the spec, the default type is set to \"ASSIGNED\".\n"
                }, 
                "prefix_length": {
                    "format": "int32", 
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Prefix length for the IP address.", 
                    "maximum": 32
                }, 
                "gateway_address_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Gateway IP addresses matching the subnet."
                }, 
                "ip_type": {
                    "x-ntnx-enum": [
                        "DHCP", 
                        "STATIC"
                    ], 
                    "type": "string", 
                    "description": "Indicates whether IP address is DHCP or Static."
                }
            }, 
            "description": "An IP address."
        }, 
        "ip_config": {
            "title": "IP config", 
            "type": "object", 
            "properties": {
                "pool_list": {
                    "items": {
                        "$ref": "#/definitions/ip_pool"
                    }, 
                    "type": "array"
                }, 
                "default_gateway_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Default gateway IP address."
                }, 
                "prefix_length": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "subnet_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Subnet IP address."
                }, 
                "dhcp_options": {
                    "$ref": "#/definitions/dhcp_options"
                }, 
                "dhcp_server_address": {
                    "$ref": "#/definitions/address"
                }
            }, 
            "description": "IP config."
        }, 
        "ip_pool": {
            "title": "IP pool", 
            "type": "object", 
            "properties": {
                "range": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)[ ](?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Range of IPs (example: 10.0.0.9 10.0.0.19).\n"
                }
            }, 
            "description": "IP pool."
        }, 
        "ip_subnet": {
            "title": "IP subnet.", 
            "type": "object", 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "IPV4 address."
                }, 
                "prefix_length": {
                    "minimum": 0, 
                    "type": "integer", 
                    "maximum": 32, 
                    "format": "int32"
                }
            }, 
            "description": "IP subnet provided as an address and prefix length."
        }, 
        "ip_subnet_status": {
            "title": "IP subnet.", 
            "type": "object", 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "IPV4 address."
                }, 
                "prefix_length": {
                    "type": "integer", 
                    "format": "int32"
                }
            }, 
            "description": "IP subnet provided as an address and prefix length."
        }, 
        "ipmi": {
            "title": "Host IPMI info", 
            "required": [
                "ip"
            ], 
            "type": "object", 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "IPMI IP address."
                }
            }, 
            "description": "Host IPMI info."
        }, 
        "ipsec_config": {
            "title": "IPSEC related configuration spec for the VPN connection", 
            "type": "object", 
            "properties": {
                "remote_vti_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Virtual tunnel interface IP of the remote VPN gateway."
                }, 
                "vti_ip_prefix_length": {
                    "format": "uint16", 
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "IP prefix length of the virtual tunnel interface.", 
                    "maximum": 32
                }, 
                "remote_authentication_id": {
                    "type": "string", 
                    "description": "IKE Authentication ID of the remote peer."
                }, 
                "local_vti_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Virtual tunnel interface IP of the local VPN gateway."
                }, 
                "pre_shared_key": {
                    "type": "string", 
                    "description": "Shared secret for authentication between gateway peers.", 
                    "format": "password"
                }, 
                "local_authentication_id": {
                    "type": "string", 
                    "description": "Local IKE authentication ID used for this connection."
                }
            }, 
            "description": "IPSEC related configuration spec for the VPN connections."
        }, 
        "ipsec_config_status": {
            "title": "IPSEC related configuration status for the VPN connection", 
            "type": "object", 
            "properties": {
                "remote_vti_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Virtual tunnel interface IP of the remote VPN gateway."
                }, 
                "vti_ip_prefix_length": {
                    "type": "integer", 
                    "description": "IP prefix length of the virtual tunnel interface."
                }, 
                "negotiated_proposal": {
                    "type": "object", 
                    "description": "Describes the proposal (encryption and authentication algorithms) that\nwas negotiated for this VPN connection.\n", 
                    "properties": {
                        "ipsec_authentication_algorithm": {
                            "x-ntnx-enum": [
                                "MD5", 
                                "SHA1", 
                                "SHA256", 
                                "SHA384", 
                                "SHA512"
                            ], 
                            "type": "string", 
                            "description": "Authentication algorithm used in IPSEC."
                        }, 
                        "ipsec_encryption_algorithm": {
                            "x-ntnx-enum": [
                                "AES128", 
                                "AES256", 
                                "3DES"
                            ], 
                            "type": "string", 
                            "description": "Encryption algorithm used in IPSEC."
                        }, 
                        "ike_encryption_algorithm": {
                            "x-ntnx-enum": [
                                "AES128", 
                                "AES256", 
                                "3DES"
                            ], 
                            "type": "string", 
                            "description": "Encryption algorithm used in IKE."
                        }, 
                        "ike_authentication_algorithm": {
                            "x-ntnx-enum": [
                                "MD5", 
                                "SHA1", 
                                "SHA256", 
                                "SHA384", 
                                "SHA512"
                            ], 
                            "type": "string", 
                            "description": "Authentication algorithm used in IKE."
                        }
                    }
                }, 
                "remote_authentication_id": {
                    "type": "string", 
                    "description": "IKE Authentication ID of the remote peer."
                }, 
                "local_vti_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Virtual tunnel interface IP of the local VPN gateway."
                }, 
                "pre_shared_key": {
                    "type": "string", 
                    "description": "Shared secret for authentication between gateway peers.", 
                    "format": "password"
                }, 
                "local_authentication_id": {
                    "type": "string", 
                    "description": "Local IKE authentication ID used for this connection."
                }
            }, 
            "description": "IPSEC related configuration status for the VPN connections."
        }, 
        "json_web_key": {
            "title": "JSON Web Key", 
            "required": [
                "alg", 
                "use", 
                "kty", 
                "n", 
                "e"
            ], 
            "type": "object", 
            "properties": {
                "use": {
                    "x-ntnx-enum": [
                        "SIG"
                    ], 
                    "type": "string", 
                    "description": "How the key should be used"
                }, 
                "e": {
                    "type": "string", 
                    "description": "RSA key value (exponent) for key blinding"
                }, 
                "kty": {
                    "x-ntnx-enum": [
                        "RSA"
                    ], 
                    "type": "string", 
                    "description": "Key type"
                }, 
                "alg": {
                    "x-ntnx-enum": [
                        "RSA256"
                    ], 
                    "type": "string", 
                    "description": "Algorithm intended for use with the key"
                }, 
                "kid": {
                    "type": "string", 
                    "description": "Unique identifier for the key"
                }, 
                "n": {
                    "type": "string", 
                    "description": "RSA modulus value"
                }
            }, 
            "description": "JSON Web Key."
        }, 
        "jwk_source": {
            "title": "JWT source", 
            "type": "object", 
            "properties": {
                "api": {
                    "type": "string", 
                    "description": "XIG will poll on this api for JSON web keys.", 
                    "format": "uri"
                }
            }, 
            "description": "API information for getting JWTs"
        }, 
        "key_set_response": {
            "title": "JSON Web Key Set", 
            "type": "object", 
            "properties": {
                "keys": {
                    "items": {
                        "$ref": "#/definitions/json_web_key"
                    }, 
                    "type": "array", 
                    "description": "List of JSON Web Keys"
                }
            }, 
            "description": "Physical Availability Zone's JSON Web Key Set (JWKS)."
        }, 
        "link": {
            "title": "Link Definition", 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "Type of the link."
                }
            }, 
            "description": "Link object definition"
        }, 
        "list_entities_to_sync_response": {
            "items": {
                "required": [
                    "target_availability_zone_reference"
                ], 
                "type": "object", 
                "properties": {
                    "sync_entity_list": {
                        "items": {
                            "type": "object", 
                            "properties": {
                                "operation_type": {
                                    "x-ntnx-enum": [
                                        "UPDATE", 
                                        "DELETE"
                                    ], 
                                    "type": "string", 
                                    "description": "Type of the sync operation.", 
                                    "title": "Sync operation type"
                                }, 
                                "categories": {
                                    "additionalProperties": {
                                        "type": "string"
                                    }, 
                                    "type": "object", 
                                    "description": "Set of categories that will be synced, represented as a\ndictionary of category key -> list of category values.\ne.g.{\"env\":[\"env1\", \"env2\"]}\n"
                                }, 
                                "entity_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of references of entities that will be synced.\n"
                                }
                            }
                        }, 
                        "type": "array"
                    }, 
                    "target_availability_zone_reference": {
                        "description": "Reference to the target Availability Zone where entities need to be\nsynced.\n", 
                        "$ref": "#/definitions/availability_zone_reference"
                    }
                }
            }, 
            "type": "array", 
            "description": "List of entities that needs to be synced to connected Availability Zones.\n", 
            "title": "Response of list_entities_to_sync"
        }, 
        "log_collector_support_case_upload": {
            "title": "Log Collector object.", 
            "type": "object", 
            "properties": {
                "start_time": {
                    "type": "string", 
                    "description": "Start time of the schedule.\nThe time should be specified in this manner.\ndate-fullyear(4digit) \"-\" date-month(2digit) \"-\" date-mday(2digit) \"T\" time-hour(2digit)\n\":\" time-minute(2digit) \":\" time-second(2digit) [.] \"Z\"  or\n(\"+\" / \"-\") time-hour(2digit) \":\" time-minute(2digit)\nExamples\n- 1985-04-12T23:20:50.52Z represents 20 minutes and 50.52 seconds after the 23rd hour of\n  April 12th, 1985 in UTC.\n- 1996-12-19T16:39:57-08:00 This represents 39 minutes and 57 seconds after the 16th hour\n  of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time).\n  Note that this is equivalent to 1996-12-20T00:39:57Z in UTC.\n", 
                    "format": "date-time"
                }, 
                "end_time": {
                    "type": "string", 
                    "description": "End time of the schedule.\nThe time should be specified in this manner.\ndate-fullyear(4digit) \"-\" date-month(2digit) \"-\" date-mday(2digit) \"T\" time-hour(2digit)\n\":\" time-minute(2digit) \":\" time-second(2digit) [.] \"Z\"  or\n(\"+\" / \"-\") time-hour(2digit) \":\" time-minute(2digit)\nExamples\n- 1985-04-12T23:20:50.52Z represents 20 minutes and 50.52 seconds after the 23rd hour of\n  April 12th, 1985 in UTC.\n- 1996-12-19T16:39:57-08:00 This represents 39 minutes and 57 seconds after the 16th hour\n  of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time).\n  Note that this is equivalent to 1996-12-20T00:39:57Z in UTC.\n", 
                    "format": "date-time"
                }, 
                "anonymize_output": {
                    "type": "boolean", 
                    "description": "Flag for anonymized log collection."
                }, 
                "num_hours": {
                    "type": "integer", 
                    "description": "Number of hours for which log has to be collected. Starts from current time - no_of_hours till current time.", 
                    "format": "int32"
                }
            }, 
            "description": "Log Collector object."
        }, 
        "logout_response": {
            "title": "Logout response", 
            "type": "object", 
            "properties": {
                "external_logout_url_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of addition logout urls which should be called by UI"
                }
            }, 
            "description": "Response from logout object"
        }, 
        "marketplace_icon": {
            "title": "Description of icon used by app", 
            "required": [
                "icon_reference", 
                "icon_type"
            ], 
            "type": "object", 
            "properties": {
                "icon_reference": {
                    "$ref": "#/definitions/file_item_reference"
                }, 
                "icon_type": {
                    "x-ntnx-enum": [
                        "ICON", 
                        "FEATURED_ICON", 
                        "SCREENSHOT"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "Description of icon used by app"
        }, 
        "marketplace_item": {
            "title": "Marketplace item information", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Marketplace item name", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/marketplace_item_input_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Marketplace item description", 
                    "maxLength": 5000
                }
            }, 
            "description": "Detailed spec for creation of an marketplace item"
        }, 
        "marketplace_item_config": {
            "title": "Enable or disable Nutanix apps", 
            "required": [
                "enable_nutanix_apps"
            ], 
            "type": "object", 
            "properties": {
                "enable_nutanix_apps": {
                    "type": "boolean", 
                    "description": "Whether to enable or disable Nutanix apps"
                }
            }, 
            "description": "Enable or disable Nutanix apps"
        }, 
        "marketplace_item_def_status": {
            "title": "Marketplace item information", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Marketplace item name"
                }, 
                "resources": {
                    "$ref": "#/definitions/marketplace_item_output_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Marketplace item description"
                }
            }, 
            "description": "Detailed information about marketplace item"
        }, 
        "marketplace_item_input_resources": {
            "title": "Description of the marketplace item", 
            "required": [
                "app_blueprint_template", 
                "author"
            ], 
            "type": "object", 
            "properties": {
                "app_blueprint_template": {
                    "type": "object", 
                    "description": "This is an opaque object that represents the information required to launch an app.\n", 
                    "properties": {
                        "status": {
                            "$ref": "#/definitions/blueprint_download_def_status"
                        }, 
                        "spec": {
                            "$ref": "#/definitions/blueprint_upload"
                        }
                    }
                }, 
                "app_state": {
                    "default": "PENDING", 
                    "x-ntnx-enum": [
                        "PENDING", 
                        "ACCEPTED", 
                        "REJECTED", 
                        "PUBLISHED"
                    ], 
                    "type": "string", 
                    "description": "State indicating if marketplace item is approved, pending or rejected\n"
                }, 
                "author": {
                    "type": "string", 
                    "description": "Person or company which developed the app", 
                    "maxLength": 64
                }, 
                "project_reference_list": {
                    "items": {
                        "$ref": "#/definitions/project_reference"
                    }, 
                    "type": "array", 
                    "description": "The projects this marketplace item has been assigned to"
                }, 
                "icon_reference_list": {
                    "items": {
                        "$ref": "#/definitions/marketplace_icon"
                    }, 
                    "type": "array"
                }, 
                "app_group_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID for the group of MPIs which are versions of the same App\n", 
                    "format": "UUID"
                }, 
                "change_log": {
                    "type": "string", 
                    "description": "Change log for this version of the app\n", 
                    "maxLength": 5000
                }, 
                "version": {
                    "type": "string", 
                    "description": "Indicates version of the App that this marketplace item represents\n", 
                    "maxLength": 64
                }, 
                "app_attribute_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "FEATURED"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Attributes of this app."
                }, 
                "app_source": {
                    "default": "LOCAL", 
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "GLOBAL_STORE"
                    ], 
                    "type": "string", 
                    "description": "Indicates whether the app is Global(Marketplace item) or Local(User created)\n"
                }
            }, 
            "description": "Description of the marketplace item"
        }, 
        "marketplace_item_intent_input": {
            "title": "marketplace_item Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/marketplace_item"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/marketplace_item_metadata"
                }
            }, 
            "description": "An intentful representation of a marketplace_item"
        }, 
        "marketplace_item_intent_resource": {
            "title": "marketplace_item Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/marketplace_item_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/marketplace_item"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/marketplace_item_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a marketplace_item"
        }, 
        "marketplace_item_intent_response": {
            "title": "marketplace_item Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/marketplace_item_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/marketplace_item"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/marketplace_item_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a marketplace_item"
        }, 
        "marketplace_item_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/marketplace_item_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/marketplace_item_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of marketplace_items"
        }, 
        "marketplace_item_list_metadata": {
            "title": "Metadata for marketplace_item list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "marketplace_item", 
                    "x-ntnx-enum": [
                        "marketplace_item"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "marketplace_item_list_metadata_output": {
            "title": "Metadata for marketplace_item list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "marketplace_item", 
                    "x-ntnx-enum": [
                        "marketplace_item"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "marketplace_item_metadata": {
            "title": "marketplace_item metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when marketplace_item was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "marketplace_item", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "marketplace_item"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "marketplace_item uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the marketplace_item is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when marketplace_item was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the marketplace_item"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "marketplace_item name", 
                    "maxLength": 64
                }
            }, 
            "description": "The marketplace_item kind metadata"
        }, 
        "marketplace_item_output_resources": {
            "title": "Description of the marketplace item", 
            "required": [
                "app_blueprint_template", 
                "author"
            ], 
            "type": "object", 
            "properties": {
                "app_blueprint_template": {
                    "type": "object", 
                    "description": "This is an opaque object that represents the information required to launch an app.\n", 
                    "properties": {
                        "status": {
                            "$ref": "#/definitions/blueprint_download_def_status"
                        }, 
                        "spec": {
                            "$ref": "#/definitions/blueprint_upload"
                        }
                    }
                }, 
                "app_state": {
                    "default": "PENDING", 
                    "x-ntnx-enum": [
                        "PENDING", 
                        "ACCEPTED", 
                        "REJECTED", 
                        "PUBLISHED"
                    ], 
                    "type": "string", 
                    "description": "State indicating if marketplace item is approved, pending or rejected\n"
                }, 
                "author": {
                    "type": "string", 
                    "description": "Person or company which developed the app"
                }, 
                "project_reference_list": {
                    "items": {
                        "$ref": "#/definitions/project_reference"
                    }, 
                    "type": "array", 
                    "description": "The projects this marketplace item has been assigned to"
                }, 
                "icon_reference_list": {
                    "items": {
                        "$ref": "#/definitions/marketplace_icon"
                    }, 
                    "type": "array"
                }, 
                "app_group_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID for the group of MPIs which are versions of the same App\n", 
                    "format": "UUID"
                }, 
                "change_log": {
                    "type": "string", 
                    "description": "Change log for this version of the app\n", 
                    "maxLength": 5000
                }, 
                "version": {
                    "type": "string", 
                    "description": "Indicates version of the App that this marketplace item represents\n", 
                    "maxLength": 64
                }, 
                "app_attribute_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "FEATURED"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Attributes of this app."
                }, 
                "app_source": {
                    "default": "LOCAL", 
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "GLOBAL_STORE"
                    ], 
                    "type": "string", 
                    "description": "Indicates whether the app is Global(Marketplace item) or Local(User created)\n"
                }
            }, 
            "description": "Description of the marketplace item"
        }, 
        "marketplace_item_reference": {
            "title": "Reference to a marketplace_item", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "marketplace_item", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "marketplace_item"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a marketplace_item"
        }, 
        "marketplace_item_render_input": {
            "title": "Render marketplace item input spec", 
            "required": [
                "name", 
                "input_type", 
                "input_spec"
            ], 
            "type": "object", 
            "properties": {
                "input_type": {
                    "x-ntnx-enum": [
                        "VM_REFERENCE", 
                        "VM_REFERENCE_WITH_CUSTOMIZATION", 
                        "IMAGE_REFERENCE"
                    ], 
                    "type": "string"
                }, 
                "input_spec": {
                    "description": "Spec based on the type", 
                    "title": "Spec for the given entity type", 
                    "type": "object", 
                    "properties": {
                        "vm_reference_with_customization": {
                            "$ref": "#/definitions/vm_reference_with_customization"
                        }, 
                        "vm_reference": {
                            "$ref": "#/definitions/vm_reference"
                        }, 
                        "image_reference": {
                            "$ref": "#/definitions/image_reference"
                        }
                    }, 
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "vm_reference"
                            ]
                        }, 
                        {
                            "required": [
                                "vm_reference_with_customization"
                            ]
                        }, 
                        {
                            "required": [
                                "image_reference"
                            ]
                        }
                    ]
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the rendered marketplace item", 
                    "maxLength": 64
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for the rendered marketplace item", 
                    "maxLength": 1000
                }
            }, 
            "description": "Source spec that describes an entity like a VM, Image that should be translated into an marketplace item\n"
        }, 
        "marketplace_item_render_output": {
            "title": "Render marketplace item output", 
            "type": "object", 
            "properties": {
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "uuid of the newly created Marketplace item", 
                    "format": "UUID"
                }
            }, 
            "description": "The UUID of the newly created Marketplace item"
        }, 
        "marketplace_item_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "marketplace_item", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "marketplace_item"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "message_resource": {
            "title": "Message.", 
            "required": [
                "message", 
                "reason"
            ], 
            "type": "object", 
            "properties": {
                "message": {
                    "type": "string", 
                    "description": "If state is ERROR, a message describing the error."
                }, 
                "reason": {
                    "x-ntnx-enum": [
                        "ACCESS_DENIED", 
                        "ACCESS_FORBIDDEN", 
                        "ACTION_NOT_SUPPORTED", 
                        "AUTHENTICATION_REQUIRED", 
                        "BEARER_TOKEN_EXPIRED", 
                        "BEARER_TOKEN_BAD_SIGNATURE", 
                        "CANNOT_MODIFY_PRE_CONFIGURED_REPORT", 
                        "CATEGORY_NAME_VALUE_MISMATCH", 
                        "CONFIGURATION_INCOMPLETE", 
                        "CONCURRENT_REQUESTS_NOT_ALLOWED", 
                        "DEFAULT_PROJECT_UNAVAILABLE", 
                        "DESERIALIZATION_FAILED", 
                        "DIRECTORY_SERVICE_CONNECTION_FAILED", 
                        "ENTITY_ALREADY_EXISTS", 
                        "ENTITY_DELETION_FAILED", 
                        "ENTITY_IS_READONLY", 
                        "ENTITY_NAME_UUID_MISMATCH", 
                        "ENTITY_NOT_CONFIGURED", 
                        "ENTITY_NOT_FOUND", 
                        "ENTITY_SAVE_ERROR", 
                        "ENTITY_UPDATE_FAILED", 
                        "IDEMPOTENCE_UUID_CREATION_FAILED", 
                        "IDP_NOT_REACHABLE", 
                        "INTERNAL_ERROR", 
                        "INVALID_ARGUMENT", 
                        "INVALID_AZ_NAME", 
                        "INVALID_CONTENT_TYPE", 
                        "INVALID_DATA_FORMAT", 
                        "INVALID_PORTAL_CONFIGURATION", 
                        "INVALID_REQUEST", 
                        "INVALID_UUID", 
                        "INVALID_OWNER_REFERENCE", 
                        "INTERNAL_AZ_PROXY_SETUP_ERROR", 
                        "INTERNAL_ERROR_REMOTE_REQUEST", 
                        "INTERNAL_ROLE_ACCESS_DENIED", 
                        "INCORRECT_EVENTS_FILTER", 
                        "MISSING_ATTRIBUTE", 
                        "MISSING_CURRENT_USER_METADATA", 
                        "NAME_NOT_IN_DOMAIN", 
                        "NO_RESPONSE_RECEIVED_FROM_PORTAL", 
                        "PE_NOT_PAIRED_WITH_PC", 
                        "PC_NOT_PAIRED_WITH_XI_PORTAL", 
                        "REFERENCE_ERROR", 
                        "RESERVED_ROLE_ACCESS_DENIED", 
                        "REQUEST_NOT_SUPPORTED", 
                        "REMOTE_CLUSTER_IP_FETCH_FAILED", 
                        "REMOTE_CLUSTER_NOT_CONNECTED", 
                        "REMOTE_CONNECTION_EXISTS", 
                        "REMOTE_CONNECTION_NOT_FOUND", 
                        "REPORT_CONFIG_NOT_FOUND", 
                        "REPORTING_RESOURCE_NOT_FOUND", 
                        "REPORTING_INTERNAL_ERROR", 
                        "SERVICE_UNAVAILABLE", 
                        "SEARCH_RESULT_PROCESSING_ERROR", 
                        "TOO_MANY_REQUESTS", 
                        "UNCONFIGURED_API_KEY", 
                        "UNCONFIGURED_PORTAL_CONNECTION", 
                        "UNSPECIFIED_EVENTS_FILTER", 
                        "UNSUPPORTED_AZ_PROXY_API", 
                        "UNSUPPORTED_MEDIA_TYPE_ERROR", 
                        "UPLOAD_TO_S3_FAILED", 
                        "VALIDATION_ERROR", 
                        "INVALID_SSL_CERTIFICATE", 
                        "ERROR_ATTACHING_FILE_TO_CASE", 
                        "SPEC_UPDATE_ERROR", 
                        "SPEC_INCOMPATIBLE_ERROR", 
                        "CLOUD_UNREACHABLE_ERROR", 
                        "INVALID_CLOUD_CREDENTIALS", 
                        "IDP_PORTAL_UNREACHABLE", 
                        "SELF_PAIRING_NOT_ALLOWED", 
                        "PAIRING_FAILED", 
                        "PAIRING_NOT_ALLOWED", 
                        "PAIRING_INITIATING_NOT_ALLOWED", 
                        "CLOUD_TRUST_EXISTS", 
                        "DUPLICATE_CLOUD_TRUST", 
                        "DUPLICATE_CLOUD_TRUST_ON_REMOTE"
                    ], 
                    "type": "string", 
                    "description": "If state is ERROR, a machine-readable snake-cased string."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }
            }, 
            "description": "message."
        }, 
        "metadata": {
            "title": "Metadata Defintion", 
            "type": "object", 
            "properties": {
                "instance_list": {
                    "items": {
                        "$ref": "#/definitions/entity_metadata"
                    }, 
                    "type": "array", 
                    "description": "List of entity instances."
                }, 
                "user_query": {
                    "type": "string", 
                    "description": "User query in simple text."
                }, 
                "filter_list": {
                    "items": {
                        "$ref": "#/definitions/expression"
                    }, 
                    "type": "array", 
                    "description": "List of filters."
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Type of the entity."
                }
            }, 
            "description": "Result metadata object definition."
        }, 
        "microseg_service_config_input": {
            "description": "Input body to configure Microsegmentation.", 
            "title": "Microsegmentation configuration.", 
            "type": "object", 
            "properties": {
                "is_validation_only": {
                    "type": "boolean", 
                    "description": "Flag indicating whether to do Microsegmentation enablement validation only.\n"
                }, 
                "state": {
                    "x-ntnx-enum": [
                        "ENABLE", 
                        "DISABLE"
                    ], 
                    "type": "string", 
                    "description": "The desired state of Microsegmentation."
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "state"
                    ]
                }, 
                {
                    "required": [
                        "is_validation_only"
                    ]
                }
            ]
        }, 
        "migration_target": {
            "title": "Migration target", 
            "required": [
                "availability_zone_reference"
            ], 
            "type": "object", 
            "properties": {
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "A migration target is comprised of availability zone reference\nand optionally reference to any particular cluster within that\navailability zone.\n"
        }, 
        "monetary_value": {
            "title": "Monetary value along with currency details.", 
            "type": "object", 
            "properties": {
                "currency_name": {
                    "x-ntnx-enum": [
                        "DOLLAR"
                    ], 
                    "type": "string"
                }, 
                "amount": {
                    "type": "number", 
                    "description": "amount in currency", 
                    "format": "double"
                }
            }, 
            "description": "Monetary value along with currency details."
        }, 
        "multicluster_config_def_status": {
            "title": "Status for multicluster configuration request", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the multicluster configuration request."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Status for multicluster configuration request."
        }, 
        "multicluster_config_intent_input": {
            "title": "Multicluster config intent input", 
            "required": [
                "api_version", 
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/multicluster_config_spec"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/multicluster_config_metadata"
                }
            }, 
            "description": "An intentful representation of a multicluster config spec."
        }, 
        "multicluster_config_intent_response": {
            "title": "Multicluster config intent response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/multicluster_config_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/multicluster_config_spec"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/multicluster_config_metadata"
                }
            }, 
            "description": "An intentful representation of a multicluster config response."
        }, 
        "multicluster_config_list_metadata": {
            "title": "Metadata for multicluster_config list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "multicluster_config", 
                    "x-ntnx-enum": [
                        "multicluster_config"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "multicluster_config_list_metadata_output": {
            "title": "Metadata for multicluster_config list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "multicluster_config", 
                    "x-ntnx-enum": [
                        "multicluster_config"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "multicluster_config_metadata": {
            "title": "multicluster_config metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when multicluster_config was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "multicluster_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "multicluster_config"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "multicluster_config uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the multicluster_config is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when multicluster_config was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the multicluster_config"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "multicluster_config name", 
                    "maxLength": 64
                }
            }, 
            "description": "The multicluster_config kind metadata"
        }, 
        "multicluster_config_reference": {
            "title": "Reference to a multicluster_config", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "multicluster_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "multicluster_config"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a multicluster_config"
        }, 
        "multicluster_config_spec": {
            "title": "Specification for multicluster configuration request", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "required": [
                        "execution_plan", 
                        "spec_list"
                    ], 
                    "type": "object", 
                    "description": "Multicluster config resources.", 
                    "properties": {
                        "upgrade_schedule": {
                            "$ref": "#/definitions/execution_schedule"
                        }, 
                        "execution_plan": {
                            "$ref": "#/definitions/execution_plan"
                        }, 
                        "spec_list": {
                            "items": {
                                "$ref": "#/definitions/cluster_intent_input"
                            }, 
                            "type": "array"
                        }
                    }
                }
            }, 
            "description": "Specification for multicluster configuration request."
        }, 
        "multicluster_config_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "multicluster_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "multicluster_config"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "name_identifier_map": {
            "title": "A mapping of name to salted UUID5's.", 
            "type": "object", 
            "properties": {
                "identifier": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-5[0-9a-f]{3}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "x-example": "c4a760a8-dbcf-5254-a0d9-6a4474bd1b62", 
                    "format": "UUID"
                }, 
                "name": {
                    "type": "string"
                }
            }, 
            "description": "A mapping of name to the generated / salted UUID5."
        }, 
        "ncc_checks_support_case_upload": {
            "title": "NCC checks object.", 
            "type": "object", 
            "properties": {
                "ncc_check_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of ncc checks to run."
                }, 
                "should_send_email": {
                    "type": "boolean", 
                    "description": "Flag specifying whether an email is to be sent."
                }
            }, 
            "description": "Input for execution of NCC checks."
        }, 
        "netsil_config": {
            "title": "Netsil AOC and IPFix aggregator config info.", 
            "type": "object", 
            "properties": {
                "aoc_url": {
                    "type": "string", 
                    "description": "IP address or Fully Qualified Domain Name(FQDN) obtained by user on deploying Netsil AOC.\n"
                }, 
                "org_id": {
                    "type": "string", 
                    "description": "Organization ID obtained by user on deploying Netsil AOC.\n"
                }, 
                "app_key": {
                    "type": "string", 
                    "description": "Application Key obtained by user on deploying Netsil AOC.\n"
                }
            }, 
            "description": "Details obtained by user on deploying Netsil AOC."
        }, 
        "network_address": {
            "description": "Address (source/destination) of an IP packet. > This could be either an ip prefix or a special category like \"INTERNET\".", 
            "title": "Network address", 
            "type": "object", 
            "properties": {
                "ip_subnet": {
                    "$ref": "#/definitions/ip_subnet"
                }, 
                "address_type": {
                    "x-ntnx-enum": [
                        "ALL", 
                        "INTERNET"
                    ], 
                    "type": "string"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "address_type"
                    ]
                }, 
                {
                    "required": [
                        "ip_subnet"
                    ]
                }
            ]
        }, 
        "network_address_status": {
            "description": "Address (source/destination) of an IP packet. > This could be either an ip prefix or a special category like \"INTERNET\".", 
            "title": "Network address", 
            "type": "object", 
            "properties": {
                "ip_subnet": {
                    "$ref": "#/definitions/ip_subnet_status"
                }, 
                "address_type": {
                    "x-ntnx-enum": [
                        "ALL", 
                        "INTERNET"
                    ], 
                    "type": "string"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "address_type"
                    ]
                }, 
                {
                    "required": [
                        "ip_subnet"
                    ]
                }
            ]
        }, 
        "network_config": {
            "title": "Network Configuration for PC VM.", 
            "type": "object", 
            "properties": {
                "subnet_mask": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Subnet mask IP address."
                }, 
                "network_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Network uuid.", 
                    "format": "UUID"
                }, 
                "default_gateway": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Gateway IP address."
                }
            }, 
            "description": "Network Configuration for PC VM."
        }, 
        "network_device": {
            "title": "Network device entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "An optional name for the device", 
                    "maxLength": 50
                }, 
                "resources": {
                    "$ref": "#/definitions/network_device_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "An optional description for the device", 
                    "maxLength": 1000
                }
            }, 
            "description": "Network device entity definition"
        }, 
        "network_device_def_status": {
            "title": "Network device Entity Status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "An optional name for the device", 
                    "maxLength": 50
                }, 
                "resources": {
                    "$ref": "#/definitions/network_device_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "An optional description for the device", 
                    "maxLength": 1000
                }
            }, 
            "description": "Network device entity status definition"
        }, 
        "network_device_intent_input": {
            "title": "network_device Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/network_device"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_device_metadata"
                }
            }, 
            "description": "An intentful representation of a network_device"
        }, 
        "network_device_intent_resource": {
            "title": "network_device Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/network_device_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/network_device"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_device_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a network_device"
        }, 
        "network_device_intent_response": {
            "title": "network_device Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/network_device_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/network_device"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_device_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a network_device"
        }, 
        "network_device_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/network_device_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_device_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of network_devices"
        }, 
        "network_device_list_metadata": {
            "title": "Metadata for network_device list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "network_device", 
                    "x-ntnx-enum": [
                        "network_device"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "network_device_list_metadata_output": {
            "title": "Metadata for network_device list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "network_device", 
                    "x-ntnx-enum": [
                        "network_device"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "network_device_metadata": {
            "title": "network_device metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when network_device was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "network_device", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_device"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "network_device uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the network_device is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when network_device was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the network_device"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "network_device name", 
                    "maxLength": 64
                }
            }, 
            "description": "The network_device kind metadata"
        }, 
        "network_device_reference": {
            "title": "Reference to a network_device", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network_device", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_device"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a network_device"
        }, 
        "network_device_resources": {
            "title": "Network Device Entity", 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "maxLength": 500
                }, 
                "current_firmware_version": {
                    "type": "string", 
                    "description": "The current firmware version", 
                    "maxLength": 50
                }, 
                "device_class": {
                    "type": "string", 
                    "description": "A well known string for network device class information", 
                    "maxLength": 100
                }, 
                "component": {
                    "$ref": "#/definitions/datacenter_component"
                }, 
                "device_serial": {
                    "type": "string", 
                    "description": "Device serial number", 
                    "maxLength": 100
                }, 
                "upgrade_status": {
                    "type": "string", 
                    "description": "upgrade status", 
                    "maxLength": 25
                }, 
                "model": {
                    "type": "string", 
                    "description": "device model", 
                    "maxLength": 50
                }, 
                "target_firmware_version": {
                    "type": "string", 
                    "description": "The target firmware version", 
                    "maxLength": 50
                }, 
                "ip_address": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "device IP address"
                }, 
                "rack_reference": {
                    "$ref": "#/definitions/rack_reference"
                }
            }, 
            "description": "Network device entity definition"
        }, 
        "network_device_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network_device", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_device"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "network_function_chain": {
            "title": "network function chain Input Definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Network function chain name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/network_function_chain_resource"
                }, 
                "cluster_reference": {
                    "description": "UUID of cluster that hosts the network function chain.", 
                    "$ref": "#/definitions/cluster_reference"
                }
            }, 
            "description": "network function chain Input Definition."
        }, 
        "network_function_chain_def_status": {
            "title": "Network function chain status definition", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Network function chain name."
                }, 
                "resources": {
                    "$ref": "#/definitions/network_function_chain_resource"
                }, 
                "cluster_reference": {
                    "description": "UUID of cluster that hosts the network function chain.", 
                    "$ref": "#/definitions/cluster_reference"
                }
            }, 
            "description": "Network function chain status definition."
        }, 
        "network_function_chain_intent_input": {
            "title": "network_function_chain Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/network_function_chain"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_function_chain_metadata"
                }
            }, 
            "description": "An intentful representation of a network_function_chain"
        }, 
        "network_function_chain_intent_resource": {
            "title": "network_function_chain Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/network_function_chain_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/network_function_chain"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_function_chain_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a network_function_chain"
        }, 
        "network_function_chain_intent_response": {
            "title": "network_function_chain Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/network_function_chain_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/network_function_chain"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_function_chain_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a network_function_chain"
        }, 
        "network_function_chain_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/network_function_chain_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_function_chain_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of network_function_chains"
        }, 
        "network_function_chain_list_metadata": {
            "title": "Metadata for network_function_chain list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "network_function_chain", 
                    "x-ntnx-enum": [
                        "network_function_chain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "network_function_chain_list_metadata_output": {
            "title": "Metadata for network_function_chain list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "network_function_chain", 
                    "x-ntnx-enum": [
                        "network_function_chain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "network_function_chain_metadata": {
            "title": "network_function_chain metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when network_function_chain was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "network_function_chain", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_function_chain"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "network_function_chain uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the network_function_chain is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when network_function_chain was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the network_function_chain"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "network_function_chain name", 
                    "maxLength": 64
                }
            }, 
            "description": "The network_function_chain kind metadata"
        }, 
        "network_function_chain_reference": {
            "title": "Reference to a network_function_chain", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network_function_chain", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_function_chain"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a network_function_chain"
        }, 
        "network_function_chain_resource": {
            "title": "network function chain resource definition", 
            "type": "object", 
            "properties": {
                "network_function_list": {
                    "items": {
                        "$ref": "#/definitions/network_function_resource"
                    }, 
                    "type": "array", 
                    "description": "Referenced network functions in the chain."
                }
            }, 
            "description": "network function chain resource definition."
        }, 
        "network_function_chain_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network_function_chain", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_function_chain"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "network_function_list_metadata": {
            "title": "Metadata for network_function list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "network_function", 
                    "x-ntnx-enum": [
                        "network_function"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "network_function_list_metadata_output": {
            "title": "Metadata for network_function list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "network_function", 
                    "x-ntnx-enum": [
                        "network_function"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "network_function_metadata": {
            "title": "network_function metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when network_function was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "network_function", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_function"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "network_function uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the network_function is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when network_function was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the network_function"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "network_function name", 
                    "maxLength": 64
                }
            }, 
            "description": "The network_function kind metadata"
        }, 
        "network_function_reference": {
            "title": "Reference to a network_function", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network_function", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_function"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a network_function"
        }, 
        "network_function_resource": {
            "title": "Network function resource definition", 
            "required": [
                "network_function_type", 
                "category_filter"
            ], 
            "type": "object", 
            "properties": {
                "network_function_type": {
                    "x-ntnx-enum": [
                        "INLINE", 
                        "TAP"
                    ], 
                    "type": "string", 
                    "description": "The type of the network function."
                }, 
                "category_filter": {
                    "description": "Category filter for this network function.", 
                    "$ref": "#/definitions/category_filter"
                }
            }, 
            "description": "network function resource definition."
        }, 
        "network_function_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network_function", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_function"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "network_port_bindings": {
            "items": {
                "type": "object", 
                "properties": {
                    "host_port": {
                        "type": "string", 
                        "description": "Port number of host"
                    }, 
                    "network_uuid": {
                        "type": "string", 
                        "description": "Uuid of network"
                    }
                }
            }, 
            "type": "array", 
            "description": "Port binding", 
            "title": "Port binding"
        }, 
        "network_port_bindings_status": {
            "items": {
                "type": "object", 
                "properties": {
                    "host_port": {
                        "type": "string", 
                        "description": "Port number of host"
                    }, 
                    "network_uuid": {
                        "type": "string", 
                        "description": "Uuid of network"
                    }, 
                    "ip_addr": {
                        "type": "string", 
                        "description": "Ip address of container."
                    }
                }
            }, 
            "type": "array", 
            "description": "Port binding status", 
            "title": "Port binding status"
        }, 
        "network_rule": {
            "title": "Network rule", 
            "type": "object", 
            "properties": {
                "protocol": {
                    "x-ntnx-enum": [
                        "ALL", 
                        "ICMP", 
                        "TCP", 
                        "UDP"
                    ], 
                    "type": "string", 
                    "description": "Select a protocol to allow.  Multiple protocols can be allowed by repeating network_rule object.  If a protocol is not configured in the network_rule object then it is allowed."
                }, 
                "ip_subnet": {
                    "$ref": "#/definitions/ip_subnet"
                }, 
                "tcp_port_range_list": {
                    "items": {
                        "$ref": "#/definitions/port_range"
                    }, 
                    "type": "array", 
                    "description": "List of TCP ports that are allowed by this rule."
                }, 
                "udp_port_range_list": {
                    "items": {
                        "$ref": "#/definitions/port_range"
                    }, 
                    "type": "array", 
                    "description": "List of UDP ports that are allowed by this rule."
                }, 
                "peer_specification_type": {
                    "x-ntnx-enum": [
                        "ALL", 
                        "FILTER", 
                        "IP_SUBNET"
                    ], 
                    "type": "string", 
                    "description": "The set of categories that matching VMs need to have."
                }, 
                "filter": {
                    "description": "The set of categories that matching VMs need to have.", 
                    "$ref": "#/definitions/category_filter"
                }, 
                "icmp_type_code_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "code": {
                                "minimum": 0, 
                                "type": "integer", 
                                "maximum": 15, 
                                "format": "int32"
                            }, 
                            "type": {
                                "minimum": 0, 
                                "type": "integer", 
                                "maximum": 43, 
                                "format": "int32"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of ICMP types and codes allowed by this rule."
                }, 
                "network_function_chain_reference": {
                    "$ref": "#/definitions/network_function_chain_reference"
                }, 
                "expiration_time": {
                    "type": "string", 
                    "description": "Timestamp of expiration time.", 
                    "maxLength": 64
                }
            }, 
            "description": "Network rule"
        }, 
        "network_rule_status": {
            "title": "Network rule status", 
            "type": "object", 
            "properties": {
                "protocol": {
                    "x-ntnx-enum": [
                        "ALL", 
                        "ICMP", 
                        "TCP", 
                        "UDP"
                    ], 
                    "type": "string", 
                    "description": "Select a protocol to allow.  Multiple protocols can be allowed by repeating network_rule object.  If a protocol is not configured in the network_rule object then it is allowed."
                }, 
                "ip_subnet": {
                    "$ref": "#/definitions/ip_subnet"
                }, 
                "tcp_port_range_list": {
                    "items": {
                        "$ref": "#/definitions/port_range_status"
                    }, 
                    "type": "array", 
                    "description": "List of TCP ports that are allowed by this rule."
                }, 
                "udp_port_range_list": {
                    "items": {
                        "$ref": "#/definitions/port_range_status"
                    }, 
                    "type": "array", 
                    "description": "List of UDP ports that are allowed by this rule."
                }, 
                "peer_specification_type": {
                    "x-ntnx-enum": [
                        "ALL", 
                        "FILTER", 
                        "IP_SUBNET"
                    ], 
                    "type": "string", 
                    "description": "The set of categories that matching VMs need to have."
                }, 
                "filter": {
                    "description": "The set of categories that matching VMs need to have.", 
                    "$ref": "#/definitions/category_filter"
                }, 
                "icmp_type_code_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "code": {
                                "type": "integer", 
                                "format": "int32"
                            }, 
                            "type": {
                                "type": "integer", 
                                "format": "int32"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of ICMP types and codes allowed by this rule."
                }, 
                "network_function_chain_reference": {
                    "$ref": "#/definitions/network_function_chain_reference"
                }, 
                "expiration_time": {
                    "type": "string", 
                    "description": "Timestamp of expiration time."
                }
            }, 
            "description": "Network rul statuse"
        }, 
        "network_security_rule": {
            "title": "Network security rule", 
            "required": [
                "name", 
                "resources"
            ], 
            "properties": {
                "name": {
                    "type": "string", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/network_security_rule_resources"
                }, 
                "description": {
                    "type": "string", 
                    "maxLength": 1000
                }
            }, 
            "description": "Network security rule"
        }, 
        "network_security_rule_def_status": {
            "title": "Network security rule status", 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string"
                }, 
                "resources": {
                    "$ref": "#/definitions/network_security_rule_resources_status"
                }, 
                "description": {
                    "type": "string"
                }
            }, 
            "description": "Network security rule status"
        }, 
        "network_security_rule_intent_input": {
            "title": "network_security_rule Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/network_security_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_security_rule_metadata"
                }
            }, 
            "description": "An intentful representation of a network_security_rule"
        }, 
        "network_security_rule_intent_resource": {
            "title": "network_security_rule Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/network_security_rule_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/network_security_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_security_rule_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a network_security_rule"
        }, 
        "network_security_rule_intent_response": {
            "title": "network_security_rule Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/network_security_rule_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/network_security_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_security_rule_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a network_security_rule"
        }, 
        "network_security_rule_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/network_security_rule_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/network_security_rule_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of network_security_rules"
        }, 
        "network_security_rule_list_metadata": {
            "title": "Metadata for network_security_rule list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "network_security_rule", 
                    "x-ntnx-enum": [
                        "network_security_rule"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "network_security_rule_list_metadata_output": {
            "title": "Metadata for network_security_rule list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "network_security_rule", 
                    "x-ntnx-enum": [
                        "network_security_rule"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "network_security_rule_metadata": {
            "title": "network_security_rule metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when network_security_rule was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "network_security_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_security_rule"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "network_security_rule uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the network_security_rule is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when network_security_rule was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the network_security_rule"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "network_security_rule name", 
                    "maxLength": 64
                }
            }, 
            "description": "The network_security_rule kind metadata"
        }, 
        "network_security_rule_reference": {
            "title": "Reference to a network_security_rule", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network_security_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_security_rule"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a network_security_rule"
        }, 
        "network_security_rule_resources": {
            "description": "Network security rule resources", 
            "title": "Network security rule resources", 
            "type": "object", 
            "properties": {
                "ad_rule": {
                    "title": "AD rule", 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "x-ntnx-enum": [
                                "APPLY", 
                                "MONITOR"
                            ], 
                            "type": "string", 
                            "description": "Type of deployment of the rule."
                        }, 
                        "outbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule"
                            }, 
                            "type": "array"
                        }, 
                        "target_group": {
                            "$ref": "#/definitions/target_group"
                        }, 
                        "inbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "description": "These rules govern what flows are allowed for AD categories. Target group is a required attribute. Empty inbound_allow_list will not allow anything into the target group. Empty outbound_allow_list will not allow anything from the target group.\n"
                }, 
                "app_rule": {
                    "title": "App rule", 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "x-ntnx-enum": [
                                "APPLY", 
                                "MONITOR"
                            ], 
                            "type": "string", 
                            "description": "Type of deployment of the rule."
                        }, 
                        "outbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule"
                            }, 
                            "type": "array"
                        }, 
                        "target_group": {
                            "$ref": "#/definitions/target_group"
                        }, 
                        "inbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "description": "These rules govern what flows are allowed for app rules. Target group is a required attribute. Empty inbound_allow_list will not allow anything into the target group. Empty outbound_allow_list will not allow anything from the target group.\n"
                }, 
                "quarantine_rule": {
                    "title": "Quarantine rule", 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "x-ntnx-enum": [
                                "APPLY", 
                                "MONITOR"
                            ], 
                            "type": "string", 
                            "description": "Type of action."
                        }, 
                        "outbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule"
                            }, 
                            "type": "array"
                        }, 
                        "target_group": {
                            "$ref": "#/definitions/target_group"
                        }, 
                        "inbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "description": "These rules are used for quarantining suspected VMs. Target group is a required attribute.  Empty inbound_allow_list will not allow anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                }, 
                "isolation_rule": {
                    "title": "Isolation rule", 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "x-ntnx-enum": [
                                "APPLY", 
                                "MONITOR"
                            ], 
                            "type": "string", 
                            "description": "Type of action."
                        }, 
                        "first_entity_filter": {
                            "description": "The set of categories that matching VMs need to have.", 
                            "$ref": "#/definitions/category_filter"
                        }, 
                        "second_entity_filter": {
                            "description": "The set of categories that matching VMs need to have.", 
                            "$ref": "#/definitions/category_filter"
                        }
                    }, 
                    "description": "These rules are used for environmental isolation."
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "ad_rule"
                    ]
                }, 
                {
                    "required": [
                        "app_rule"
                    ]
                }, 
                {
                    "required": [
                        "isolation_rule"
                    ]
                }, 
                {
                    "required": [
                        "quarantine_rule"
                    ]
                }
            ]
        }, 
        "network_security_rule_resources_status": {
            "description": "Network security rule resources", 
            "title": "Network security rule resources", 
            "type": "object", 
            "properties": {
                "ad_rule": {
                    "title": "AD rule", 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "x-ntnx-enum": [
                                "APPLY", 
                                "MONITOR"
                            ], 
                            "type": "string", 
                            "description": "Type of deployment of the rule."
                        }, 
                        "outbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule_status"
                            }, 
                            "type": "array"
                        }, 
                        "target_group": {
                            "$ref": "#/definitions/target_group"
                        }, 
                        "inbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule_status"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "description": "These rules govern what flows are allowed for AD categories. Target group is a required attribute. Empty inbound_allow_list will not allow anything into the target group. Empty outbound_allow_list will not allow anything from the target group.\n"
                }, 
                "app_rule": {
                    "title": "App rule", 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "x-ntnx-enum": [
                                "APPLY", 
                                "MONITOR"
                            ], 
                            "type": "string", 
                            "description": "Type of deployment of the rule."
                        }, 
                        "outbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule_status"
                            }, 
                            "type": "array"
                        }, 
                        "target_group": {
                            "$ref": "#/definitions/target_group"
                        }, 
                        "inbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule_status"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "description": "These rules govern what flows are allowed for app rules. Target group is a required attribute. Empty inbound_allow_list will not allow anything into the target group. Empty outbound_allow_list will not allow anything from the target group.\n"
                }, 
                "quarantine_rule": {
                    "title": "Quarantine rule", 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "x-ntnx-enum": [
                                "APPLY", 
                                "MONITOR"
                            ], 
                            "type": "string", 
                            "description": "Type of action."
                        }, 
                        "outbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule_status"
                            }, 
                            "type": "array"
                        }, 
                        "target_group": {
                            "$ref": "#/definitions/target_group"
                        }, 
                        "inbound_allow_list": {
                            "items": {
                                "$ref": "#/definitions/network_rule_status"
                            }, 
                            "type": "array"
                        }
                    }, 
                    "description": "These rules are used for quarantining suspected VMs. Target group is a required attribute.  Empty inbound_allow_list will not allow anything into target group. Empty outbound_allow_list will allow everything from target group.\n"
                }, 
                "isolation_rule": {
                    "title": "Isolation rule", 
                    "type": "object", 
                    "properties": {
                        "action": {
                            "x-ntnx-enum": [
                                "APPLY", 
                                "MONITOR"
                            ], 
                            "type": "string", 
                            "description": "Type of action."
                        }, 
                        "first_entity_filter": {
                            "description": "The set of categories that matching VMs need to have.", 
                            "$ref": "#/definitions/category_filter"
                        }, 
                        "second_entity_filter": {
                            "description": "The set of categories that matching VMs need to have.", 
                            "$ref": "#/definitions/category_filter"
                        }
                    }, 
                    "description": "These rules are used for environmental isolation."
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "ad_rule"
                    ]
                }, 
                {
                    "required": [
                        "app_rule"
                    ]
                }, 
                {
                    "required": [
                        "isolation_rule"
                    ]
                }, 
                {
                    "required": [
                        "quarantine_rule"
                    ]
                }
            ]
        }, 
        "network_security_rule_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "network_security_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "network_security_rule"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "ngt_policy": {
            "title": "NGT policy spec", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "NGT policy name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/ngt_policy_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the ngt policy.", 
                    "maxLength": 1000
                }
            }, 
            "description": "NGT policy spec."
        }, 
        "ngt_policy_def_status": {
            "title": "NGT policy status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Ngt policy name."
                }, 
                "resources": {
                    "$ref": "#/definitions/ngt_policy_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the ngt policy."
                }
            }, 
            "description": "NGT policy status."
        }, 
        "ngt_policy_intent_input": {
            "title": "ngt_policy Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/ngt_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ngt_policy_metadata"
                }
            }, 
            "description": "An intentful representation of a ngt_policy"
        }, 
        "ngt_policy_intent_resource": {
            "title": "ngt_policy Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/ngt_policy_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/ngt_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ngt_policy_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a ngt_policy"
        }, 
        "ngt_policy_intent_response": {
            "title": "ngt_policy Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/ngt_policy_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/ngt_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ngt_policy_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a ngt_policy"
        }, 
        "ngt_policy_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/ngt_policy_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ngt_policy_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of ngt_policys"
        }, 
        "ngt_policy_list_metadata": {
            "title": "Metadata for ngt_policy list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "ngt_policy", 
                    "x-ntnx-enum": [
                        "ngt_policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "ngt_policy_list_metadata_output": {
            "title": "Metadata for ngt_policy list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "ngt_policy", 
                    "x-ntnx-enum": [
                        "ngt_policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "ngt_policy_metadata": {
            "title": "ngt_policy metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when ngt_policy was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "ngt_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "ngt_policy"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "ngt_policy uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the ngt_policy is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when ngt_policy was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the ngt_policy"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "ngt_policy name", 
                    "maxLength": 64
                }
            }, 
            "description": "The ngt_policy kind metadata"
        }, 
        "ngt_policy_reference": {
            "title": "Reference to a ngt_policy", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "ngt_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "ngt_policy"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a ngt_policy"
        }, 
        "ngt_policy_resources": {
            "title": "NGT policy Resources", 
            "required": [
                "type"
            ], 
            "type": "object", 
            "properties": {
                "type": {
                    "x-ntnx-enum": [
                        "REBOOT"
                    ], 
                    "type": "string", 
                    "description": "The type of ngt policy."
                }, 
                "filter_list": {
                    "items": {
                        "$ref": "#/definitions/filter"
                    }, 
                    "type": "array", 
                    "description": "List of entities on which the policy is to be applied."
                }, 
                "parameters": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "reboot_ngt_policy_parameters"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "reboot_ngt_policy_parameters": {
                            "$ref": "#/definitions/reboot_ngt_policy_parameters"
                        }
                    }, 
                    "description": "The parameters based on policy rule to be applied."
                }
            }, 
            "description": "NGT policy resources definition."
        }, 
        "ngt_policy_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "ngt_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "ngt_policy"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "notification_policy": {
            "title": "Notification policy.", 
            "type": "object", 
            "properties": {
                "email_config": {
                    "$ref": "#/definitions/email_config"
                }
            }, 
            "description": "Notification policy."
        }, 
        "nucalm_service_config_input": {
            "title": "NuCalm service configuration.", 
            "type": "object", 
            "properties": {
                "enable_nutanix_apps": {
                    "type": "boolean", 
                    "description": "Flag indicating whether to enable Nutanix apps."
                }, 
                "state": {
                    "x-ntnx-enum": [
                        "ENABLE"
                    ], 
                    "type": "string", 
                    "description": "The desired state of NuCalm service."
                }, 
                "perform_validation_only": {
                    "type": "boolean", 
                    "description": "Flag indicating whether to do NuCalm enablement validation only.\n"
                }
            }, 
            "description": "Input body to configure NuCalm service."
        }, 
        "nusights_proxy_list_metadata": {
            "title": "Metadata for nusights_proxy list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "nusights_proxy", 
                    "x-ntnx-enum": [
                        "nusights_proxy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "nusights_proxy_list_metadata_output": {
            "title": "Metadata for nusights_proxy list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "nusights_proxy", 
                    "x-ntnx-enum": [
                        "nusights_proxy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "nusights_proxy_metadata": {
            "title": "nusights_proxy metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when nusights_proxy was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "nusights_proxy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "nusights_proxy"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "nusights_proxy uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the nusights_proxy is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when nusights_proxy was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the nusights_proxy"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "nusights_proxy name", 
                    "maxLength": 64
                }
            }, 
            "description": "The nusights_proxy kind metadata"
        }, 
        "nusights_proxy_reference": {
            "title": "Reference to a nusights_proxy", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "nusights_proxy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "nusights_proxy"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a nusights_proxy"
        }, 
        "nusights_proxy_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "nusights_proxy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "nusights_proxy"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "nutanix_guest_tools_spec": {
            "title": "Nutanix Guest Tools information", 
            "type": "object", 
            "properties": {
                "state": {
                    "x-ntnx-enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "Nutanix Guest Tools is enabled or not."
                }, 
                "version": {
                    "type": "string", 
                    "description": "Desired Version of Nutanix Guest Tools installed on the VM."
                }, 
                "ngt_state": {
                    "x-ntnx-enum": [
                        "INSTALLED", 
                        "UNINSTALLED"
                    ], 
                    "type": "string", 
                    "description": "Nutanix guest tools is installed or not."
                }, 
                "credentials": {
                    "description": "Administrator Credentials of UVM. This is required for installing Nutanix Guest Tools on the UVM.\n", 
                    "$ref": "#/definitions/credentials"
                }, 
                "iso_mount_state": {
                    "x-ntnx-enum": [
                        "MOUNTED", 
                        "UNMOUNTED"
                    ], 
                    "type": "string", 
                    "description": "Desired mount state of Nutanix Guest Tools ISO.\n"
                }, 
                "enabled_capability_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "SELF_SERVICE_RESTORE", 
                            "VSS_SNAPSHOT"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Application names that are enabled."
                }
            }, 
            "description": "Information regarding Nutanix Guest Tools."
        }, 
        "nutanix_guest_tools_status": {
            "title": "Nutanix Guest Tools status", 
            "type": "object", 
            "properties": {
                "available_version": {
                    "type": "string", 
                    "description": "Version of Nutanix Guest Tools available on the cluster."
                }, 
                "ngt_state": {
                    "x-ntnx-enum": [
                        "INSTALLED", 
                        "UNINSTALLED"
                    ], 
                    "type": "string", 
                    "description": "Nutanix guest tools is installed or not."
                }, 
                "iso_mount_state": {
                    "x-ntnx-enum": [
                        "MOUNTED", 
                        "UNMOUNTED"
                    ], 
                    "type": "string", 
                    "description": "Desired mount state of Nutanix Guest Tools ISO.\n"
                }, 
                "state": {
                    "x-ntnx-enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "Nutanix Guest Tools is enabled or not."
                }, 
                "version": {
                    "type": "string", 
                    "description": "Version of Nutanix Guest Tools installed on the VM."
                }, 
                "enabled_capability_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "SELF_SERVICE_RESTORE", 
                            "VSS_SNAPSHOT"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Application names that are enabled."
                }, 
                "credentials": {
                    "description": "Administrator Credentials of UVM. This is required for installing Nutanix Guest Tools on the UVM.\n", 
                    "$ref": "#/definitions/credentials"
                }, 
                "guest_os_version": {
                    "type": "string", 
                    "description": "Version of the operating system on the VM."
                }, 
                "vss_snapshot_capable": {
                    "type": "boolean", 
                    "description": "Whether the VM is configured to take VSS snapshots through NGT.\n"
                }, 
                "is_reachable": {
                    "type": "boolean", 
                    "description": "Communication from VM to CVM is active or not."
                }, 
                "vm_mobility_drivers_installed": {
                    "type": "boolean", 
                    "description": "Whether VM mobility drivers are installed in the VM."
                }
            }, 
            "description": "Information regarding Nutanix Guest Tools."
        }, 
        "oauth_client_input": {
            "title": "Oauth client", 
            "required": [
                "client_name", 
                "client_description", 
                "redirect_uris", 
                "default_scopes"
            ], 
            "type": "object", 
            "properties": {
                "client_name": {
                    "type": "string", 
                    "description": "client name of the Oauth Client", 
                    "maxLength": 64
                }, 
                "redirect_uris": {
                    "items": {
                        "type": "string", 
                        "description": "entry for redirect URIs"
                    }, 
                    "type": "array"
                }, 
                "client_description": {
                    "type": "string", 
                    "description": "client description of the Oauth Client", 
                    "maxLength": 1000
                }, 
                "default_scopes": {
                    "items": {
                        "type": "string", 
                        "description": "entry for default scopes"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Oauth client information"
        }, 
        "oauth_client_list": {
            "title": "Oauth Client list", 
            "required": [
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/oauth_client_response"
                    }, 
                    "type": "array"
                }, 
                "metadata": {
                    "$ref": "#/definitions/oauth_client_list_metadata"
                }
            }, 
            "description": "Oauth Client list"
        }, 
        "oauth_client_list_metadata": {
            "title": "Metadata for oauth_client list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "oauth_client", 
                    "x-ntnx-enum": [
                        "oauth_client"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "oauth_client_list_metadata_output": {
            "title": "Metadata for oauth_client list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "oauth_client", 
                    "x-ntnx-enum": [
                        "oauth_client"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "oauth_client_metadata": {
            "title": "oauth_client metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when oauth_client was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "oauth_client", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "oauth_client"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "oauth_client uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the oauth_client is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when oauth_client was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the oauth_client"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "oauth_client name", 
                    "maxLength": 64
                }
            }, 
            "description": "The oauth_client kind metadata"
        }, 
        "oauth_client_reference": {
            "title": "Reference to a oauth_client", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "oauth_client", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "oauth_client"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a oauth_client"
        }, 
        "oauth_client_response": {
            "title": "Oauth Client response", 
            "required": [
                "client_id", 
                "client_secret", 
                "client_name", 
                "client_description", 
                "redirect_uris", 
                "default_scopes"
            ], 
            "type": "object", 
            "properties": {
                "redirect_uris": {
                    "items": {
                        "type": "string", 
                        "description": "entry for redirect URIs"
                    }, 
                    "type": "array"
                }, 
                "client_id": {
                    "type": "string", 
                    "description": "client id of the Oauth Client"
                }, 
                "client_secret": {
                    "type": "string", 
                    "description": "client secret of the Oauth Client"
                }, 
                "client_name": {
                    "type": "string", 
                    "description": "client name of the Oauth Client", 
                    "maxLength": 64
                }, 
                "client_description": {
                    "type": "string", 
                    "description": "client description of the Oauth Client", 
                    "maxLength": 1000
                }, 
                "default_scopes": {
                    "items": {
                        "type": "string", 
                        "description": "entry for default scopes"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Oauth client information"
        }, 
        "oauth_client_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "oauth_client", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "oauth_client"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "oauth_generate_token_request": {
            "title": "Oauth token generate request", 
            "required": [
                "client_name", 
                "client_description", 
                "scopes"
            ], 
            "type": "object", 
            "properties": {
                "scopes": {
                    "items": {
                        "type": "string", 
                        "description": "entry for default scopes"
                    }, 
                    "type": "array"
                }, 
                "client_name": {
                    "type": "string", 
                    "description": "client name of the Oauth Client", 
                    "maxLength": 64
                }, 
                "client_description": {
                    "type": "string", 
                    "description": "client description of the Oauth Client", 
                    "maxLength": 1000
                }, 
                "expires_in": {
                    "type": "integer", 
                    "description": "Token expiration time in seconds", 
                    "format": "int64"
                }
            }, 
            "description": "Oauth token generate request"
        }, 
        "oauth_generate_token_response": {
            "title": "Oauth token generate response", 
            "required": [
                "client_id", 
                "client_secret", 
                "oauth_token"
            ], 
            "type": "object", 
            "properties": {
                "client_secret": {
                    "type": "string", 
                    "description": "client secret of the Oauth Client"
                }, 
                "oauth_token": {
                    "$ref": "#/definitions/oauth_token"
                }, 
                "client_id": {
                    "type": "string", 
                    "description": "client id of the Oauth Client"
                }
            }, 
            "description": "Oauth token generate response"
        }, 
        "oauth_list_metadata": {
            "title": "Metadata for oauth list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "oauth", 
                    "x-ntnx-enum": [
                        "oauth"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "oauth_list_metadata_output": {
            "title": "Metadata for oauth list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "oauth", 
                    "x-ntnx-enum": [
                        "oauth"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "oauth_metadata": {
            "title": "oauth metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when oauth was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "oauth", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "oauth"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "oauth uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the oauth is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when oauth was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the oauth"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "oauth name", 
                    "maxLength": 64
                }
            }, 
            "description": "The oauth kind metadata"
        }, 
        "oauth_reference": {
            "title": "Reference to a oauth", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "oauth", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "oauth"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a oauth"
        }, 
        "oauth_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "oauth", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "oauth"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "oauth_token": {
            "title": "Oauth token", 
            "required": [
                "access_token", 
                "token_type", 
                "expires_in", 
                "refresh_token", 
                "scopes"
            ], 
            "type": "object", 
            "properties": {
                "access_token": {
                    "type": "string", 
                    "description": "access_token to be used for accessing gateway"
                }, 
                "token_type": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"bearer\"."
                }, 
                "expires_in": {
                    "type": "integer", 
                    "description": "Token expiration time in seconds", 
                    "format": "int64"
                }, 
                "refresh_token": {
                    "type": "string", 
                    "description": "refresh_token which can used to get new token"
                }, 
                "scopes": {
                    "items": {
                        "type": "string", 
                        "description": "scope which the token grants"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Oauth token information"
        }, 
        "open_ldap_configuration": {
            "title": "OpenLDAP Configuration.", 
            "required": [
                "user_configuration", 
                "user_group_configuration"
            ], 
            "type": "object", 
            "properties": {
                "user_configuration": {
                    "required": [
                        "user_object_class", 
                        "user_search_base", 
                        "username_attribute"
                    ], 
                    "type": "object", 
                    "properties": {
                        "user_search_base": {
                            "type": "string", 
                            "description": "The base DN for user search.", 
                            "maxLength": 200
                        }, 
                        "user_object_class": {
                            "type": "string", 
                            "description": "The object class in the OpenLDAP system that corresponds to users.\n", 
                            "maxLength": 64
                        }, 
                        "username_attribute": {
                            "type": "string", 
                            "description": "Unique identifier for each user which can be used in authentication.\n", 
                            "maxLength": 64
                        }
                    }
                }, 
                "user_group_configuration": {
                    "required": [
                        "group_object_class", 
                        "group_search_base", 
                        "group_member_attribute", 
                        "group_member_attribute_value"
                    ], 
                    "type": "object", 
                    "properties": {
                        "group_search_base": {
                            "type": "string", 
                            "description": "The base DN for group search.\n", 
                            "maxLength": 200
                        }, 
                        "group_member_attribute": {
                            "type": "string", 
                            "description": "The attribute in a group that associates users to the group.\n", 
                            "maxLength": 64
                        }, 
                        "group_object_class": {
                            "type": "string", 
                            "description": "The object class in the OpenLDAP system that corresponds to groups.\n", 
                            "maxLength": 64
                        }, 
                        "group_member_attribute_value": {
                            "type": "string", 
                            "description": "The user attribute value that will be used in group entity to associate user to the group.\n", 
                            "maxLength": 64
                        }
                    }
                }
            }, 
            "description": "Configuration for OpenLDAP directory service."
        }, 
        "open_ldap_configuration_def_status": {
            "title": "OpenLDAP Configuration.", 
            "required": [
                "user_configuration", 
                "user_group_configuration"
            ], 
            "type": "object", 
            "properties": {
                "user_configuration": {
                    "required": [
                        "user_object_class", 
                        "user_search_base", 
                        "username_attribute"
                    ], 
                    "type": "object", 
                    "properties": {
                        "user_search_base": {
                            "type": "string", 
                            "description": "The base DN for user search."
                        }, 
                        "user_object_class": {
                            "type": "string", 
                            "description": "The object class in the OpenLDAP system that corresponds to users.\n"
                        }, 
                        "username_attribute": {
                            "type": "string", 
                            "description": "Unique identifier for each user which can be used in authentication.\n"
                        }
                    }
                }, 
                "user_group_configuration": {
                    "required": [
                        "group_object_class", 
                        "group_search_base", 
                        "group_member_attribute", 
                        "group_member_attribute_value"
                    ], 
                    "type": "object", 
                    "properties": {
                        "group_search_base": {
                            "type": "string", 
                            "description": "The base DN for group search.\n"
                        }, 
                        "group_member_attribute": {
                            "type": "string", 
                            "description": "The attribute in a group that associates users to the group.\n"
                        }, 
                        "group_object_class": {
                            "type": "string", 
                            "description": "The object class in the OpenLDAP system that corresponds to groups.\n"
                        }, 
                        "group_member_attribute_value": {
                            "type": "string", 
                            "description": "The user attribute value that will be used in group entity to associate user to the group.\n"
                        }
                    }
                }
            }, 
            "description": "Configuration for OpenLDAP directory service."
        }, 
        "oplog_usage": {
            "title": "Host oplog disk usage stats", 
            "type": "object", 
            "properties": {
                "oplog_disk_pct": {
                    "type": "number", 
                    "description": "Oplog disk size used in percentage.", 
                    "format": "float"
                }, 
                "oplog_disk_size": {
                    "type": "integer", 
                    "description": "Size of oplog disk in bytes.", 
                    "format": "int64"
                }
            }, 
            "description": "oplog disk usage."
        }, 
        "ospf_config": {
            "title": "OSPF configuration for route peering with internal routers.", 
            "type": "object", 
            "properties": {
                "router_id": {
                    "type": "string", 
                    "description": "OSPF router id of this gateway."
                }, 
                "area_id": {
                    "type": "string", 
                    "description": "OSPF area id of this gateway."
                }, 
                "password": {
                    "type": "string", 
                    "description": "password for authentication.", 
                    "format": "password"
                }, 
                "password_type": {
                    "x-ntnx-enum": [
                        "PLAIN_TEXT", 
                        "MD5"
                    ], 
                    "type": "string", 
                    "description": "OSPF password type."
                }
            }, 
            "description": "OSPF configuration for route peering with internal routers."
        }, 
        "oss_service_config_input": {
            "title": "Bucket Service Manager service configuration.", 
            "required": [
                "state"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "x-ntnx-enum": [
                        "ENABLE"
                    ], 
                    "type": "string", 
                    "description": "The desired state of Bucket Service Manager service."
                }
            }, 
            "description": "Input body to configure Bucket Service Manager service."
        }, 
        "page": {
            "title": "Page Defintion", 
            "type": "object", 
            "properties": {
                "display_info": {
                    "$ref": "#/definitions/entity_metadata"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the page."
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the page."
                }, 
                "children": {
                    "items": {
                        "type": "object"
                    }, 
                    "type": "array", 
                    "description": "List of child pages of this page. Page is being referred here.\n"
                }, 
                "page_metadata": {
                    "$ref": "#/definitions/page_metadata"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the page."
                }
            }, 
            "description": "Page object definition."
        }, 
        "page_metadata": {
            "title": "Page Metadata Definition", 
            "type": "object", 
            "properties": {
                "target_tab_id": {
                    "type": "string", 
                    "description": "Tab id of the page in UI."
                }, 
                "type": {
                    "type": "string", 
                    "description": "Type of the page."
                }, 
                "params": {
                    "items": {
                        "$ref": "#/definitions/expression"
                    }, 
                    "type": "array", 
                    "description": "List of expressions required for page."
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Type of the entity represented in page."
                }, 
                "query": {
                    "type": "string", 
                    "description": "Query in simple text."
                }, 
                "target_id": {
                    "type": "string", 
                    "description": "Target Id for the UI page."
                }
            }, 
            "description": "Page metadata object defintion."
        }, 
        "param_descriptor": {
            "title": "Action component parameter descriptor", 
            "required": [
                "name", 
                "display_name", 
                "element_data_type"
            ], 
            "type": "object", 
            "properties": {
                "default_value": {
                    "description": "The default value of this parameter.  We do not support default\nvalue for complex type\n", 
                    "$ref": "#/definitions/param_value"
                }, 
                "is_required": {
                    "type": "boolean", 
                    "description": "Is this parameter optional."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "parameter display name", 
                    "maxLength": 64
                }, 
                "name": {
                    "type": "string", 
                    "description": "parameter name", 
                    "maxLength": 64
                }, 
                "is_parameterized": {
                    "type": "boolean", 
                    "description": "The field can take parameter or not."
                }, 
                "choice_list": {
                    "items": {
                        "type": "object", 
                        "description": "parameter choice list element.", 
                        "properties": {
                            "name": {
                                "type": "string", 
                                "description": "the name of the choice item."
                            }, 
                            "value": {
                                "description": "The value of the choice item.  The data type should match the\none defined in element_data_type.\n", 
                                "$ref": "#/definitions/param_value"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "The parameter can only be one of the choices in this ordered list.\nWe do not support choice list of elements with complex type.\n"
                }, 
                "is_array": {
                    "type": "boolean", 
                    "description": "Is this parameter a list or a scalar value"
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "The entity type the param value be holding like vm, etc."
                }, 
                "value_info": {
                    "description": "parameter value info.", 
                    "$ref": "#/definitions/value_info"
                }, 
                "is_secret": {
                    "type": "boolean", 
                    "description": "Is this parameter a secret like password, security token?\n"
                }, 
                "element_data_type": {
                    "x-ntnx-enum": [
                        "BOOLEAN", 
                        "LONG", 
                        "DOUBLE", 
                        "STRING", 
                        "ENTITY_INFO", 
                        "BYTES", 
                        "FILE"
                    ], 
                    "type": "string", 
                    "description": "The parameter's data type.  If the parameter is a list, it is the\nelement data type.\n"
                }
            }, 
            "description": "The metadata describes what a parameter is."
        }, 
        "param_value": {
            "description": "Scalar value object that handles different types", 
            "title": "Value object", 
            "type": "object", 
            "properties": {
                "int_value": {
                    "type": "integer", 
                    "format": "int64"
                }, 
                "double_value": {
                    "type": "number", 
                    "format": "double"
                }, 
                "bool_value": {
                    "type": "boolean"
                }, 
                "string_value": {
                    "type": "string"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "bool_value"
                    ]
                }, 
                {
                    "required": [
                        "int_value"
                    ]
                }, 
                {
                    "required": [
                        "double_value"
                    ]
                }, 
                {
                    "required": [
                        "string_value"
                    ]
                }
            ]
        }, 
        "parameter_error": {
            "title": "Parameter error", 
            "type": "object", 
            "properties": {
                "error_object": {
                    "description": "error message object.", 
                    "$ref": "#/definitions/error_message_object"
                }, 
                "parameter_name": {
                    "type": "string", 
                    "description": "name of the parameter."
                }
            }, 
            "description": "error associated with the parameter"
        }, 
        "pc_vm": {
            "title": "Prism central VM configuration", 
            "required": [
                "vm_name", 
                "num_sockets", 
                "memory_size_bytes", 
                "data_disk_size_bytes", 
                "nic_list"
            ], 
            "type": "object", 
            "properties": {
                "vm_name": {
                    "type": "string", 
                    "description": "VM name.", 
                    "maxLength": 64
                }, 
                "data_disk_size_bytes": {
                    "type": "integer", 
                    "description": "Data disk size in bytes.", 
                    "format": "int64"
                }, 
                "dns_server_ip_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of DNS IP addresses."
                }, 
                "container_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Container uuid.", 
                    "format": "UUID"
                }, 
                "nic_list": {
                    "items": {
                        "$ref": "#/definitions/pc_vm_nic_configuration"
                    }, 
                    "type": "array"
                }, 
                "num_sockets": {
                    "type": "integer", 
                    "description": "Number of sockets allocated per VM.", 
                    "format": "int64"
                }, 
                "memory_size_bytes": {
                    "type": "integer", 
                    "description": "Memory in bytes.", 
                    "format": "int64"
                }, 
                "status": {
                    "x-ntnx-enum": [
                        "NORMAL", 
                        "TO_BE_ADDED", 
                        "OK_TO_BE_REMOVED", 
                        "NEW_NODE"
                    ], 
                    "type": "string", 
                    "readOnly": true, 
                    "description": "Prism central VM status"
                }, 
                "power_state": {
                    "x-ntnx-enum": [
                        "ON", 
                        "OFF"
                    ], 
                    "type": "string", 
                    "readOnly": true, 
                    "description": "The current power state of the VM."
                }, 
                "vm_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "VM uuid.", 
                    "format": "UUID"
                }, 
                "ntp_server_list": {
                    "items": {
                        "pattern": "^((?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])(\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]))*))$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of NTP servers."
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster where this prism central VM needs to be deployed.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }
            }, 
            "description": "Prism central VM configuration."
        }, 
        "pc_vm_nic_configuration": {
            "title": "Virtual Machine NIC", 
            "type": "object", 
            "properties": {
                "network_configuration": {
                    "$ref": "#/definitions/network_config"
                }, 
                "ip_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Network IP address."
                }
            }, 
            "description": "Virtual Machine NIC."
        }, 
        "pemkey_spec": {
            "title": "SSL key", 
            "required": [
                "type", 
                "key", 
                "cert"
            ], 
            "type": "object", 
            "properties": {
                "ca_chain": {
                    "type": "string", 
                    "format": "byte"
                }, 
                "type": {
                    "$ref": "#/definitions/ssl_key_type"
                }, 
                "cert": {
                    "type": "string", 
                    "format": "byte"
                }, 
                "key": {
                    "type": "string", 
                    "format": "byte"
                }, 
                "name": {
                    "type": "string", 
                    "maxLength": 64
                }
            }, 
            "description": "SSL key"
        }, 
        "permission": {
            "title": "Permission", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Permission name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/permission_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the permission.", 
                    "maxLength": 1000
                }
            }, 
            "description": "Permission Input Definition. The permission consists of a name and defines the following what-operation-can-be-performed-on-which-fields-a-given-kind. The fields are defined in a list with type - allowed and disallowed.\n"
        }, 
        "permission_def_status": {
            "title": "Permission Status Definition.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the permission entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Permission name."
                }, 
                "resources": {
                    "$ref": "#/definitions/permission_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Human readable description of the permission."
                }
            }, 
            "description": "Permission Status Definition."
        }, 
        "permission_intent_input": {
            "title": "permission Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/permission"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/permission_metadata"
                }
            }, 
            "description": "An intentful representation of a permission"
        }, 
        "permission_intent_resource": {
            "title": "permission Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/permission_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/permission"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/permission_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a permission"
        }, 
        "permission_intent_response": {
            "title": "permission Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/permission_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/permission"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/permission_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a permission"
        }, 
        "permission_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/permission_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/permission_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of permissions"
        }, 
        "permission_list_metadata": {
            "title": "Metadata for permission list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "permission", 
                    "x-ntnx-enum": [
                        "permission"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "permission_list_metadata_output": {
            "title": "Metadata for permission list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "permission", 
                    "x-ntnx-enum": [
                        "permission"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "permission_metadata": {
            "title": "permission metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when permission was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "permission", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "permission"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "permission uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the permission is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when permission was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the permission"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "permission name", 
                    "maxLength": 64
                }
            }, 
            "description": "The permission kind metadata"
        }, 
        "permission_reference": {
            "title": "Reference to a permission", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "permission", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "permission"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a permission"
        }, 
        "permission_resources": {
            "title": "Permission entity resources.", 
            "required": [
                "operation", 
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "fields": {
                    "title": "The fields that can be allowed or disallowed during an operation.", 
                    "required": [
                        "field_mode", 
                        "field_name_list"
                    ], 
                    "type": "object", 
                    "properties": {
                        "field_mode": {
                            "x-ntnx-enum": [
                                "ALLOWED", 
                                "DISALLOWED", 
                                "NONE"
                            ], 
                            "type": "string", 
                            "description": "Allow or disallow the fields mentioned."
                        }, 
                        "field_name_list": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "The list of fields."
                        }
                    }, 
                    "description": "The fields that can/cannot be accessed during the specified operation. field_name_list will be a list of fields. e.g. if field_mode = disallowed, field_name_list = [\"xyz\"] then the list of allowed fields is ALL fields minus xyz\n"
                }, 
                "operation": {
                    "type": "string", 
                    "description": "The operation that is being performed on a given kind."
                }, 
                "kind": {
                    "type": "string", 
                    "description": "The kind on which the operation is being performed."
                }
            }, 
            "description": "Permission resources definition."
        }, 
        "permission_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "permission", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "permission"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "perspective": {
            "title": "Perspective Definition", 
            "type": "object", 
            "properties": {
                "result_list": {
                    "items": {
                        "$ref": "#/definitions/base_response"
                    }, 
                    "type": "array", 
                    "description": "Result list for the perspecitve."
                }, 
                "title": {
                    "type": "string", 
                    "description": "Title of the perspective."
                }, 
                "search_query": {
                    "$ref": "#/definitions/auto_completion"
                }, 
                "metadata": {
                    "$ref": "#/definitions/metadata"
                }, 
                "type": {
                    "x-ntnx-enum": [
                        "SUMMARY", 
                        "ALERTS", 
                        "ENTITIES", 
                        "TOPOLOGY", 
                        "ANOMALIES", 
                        "METRICS", 
                        "CONFIGURATION", 
                        "AMBIGUOUS", 
                        "TIMESERIES", 
                        "PAGE", 
                        "EVENTS", 
                        "ENTITY_DETAIL"
                    ], 
                    "type": "string", 
                    "description": "Name of the view that the perspective represents. The view is used\nto control the layout of widgets in this perspective.\n"
                }, 
                "summary_data_list": {
                    "items": {
                        "$ref": "#/definitions/entities_with_metrics_result"
                    }, 
                    "type": "array", 
                    "description": "List of summary data."
                }
            }, 
            "description": "Perspective object definition."
        }, 
        "perspective_link": {
            "title": "Perspecive Link Definition", 
            "type": "object", 
            "properties": {
                "search_query": {
                    "$ref": "#/definitions/auto_completion"
                }, 
                "is_selected": {
                    "type": "boolean", 
                    "description": "Flag to indicate if this perspective link is selected in the\nnavigation panel. Indicates if this is the active perspective.\n"
                }, 
                "title": {
                    "type": "string", 
                    "description": "Title of the perspective link."
                }, 
                "child_link_list": {
                    "items": {
                        "type": "object"
                    }, 
                    "type": "array", 
                    "description": "List of child perspecitve links. This is list of perspective_link objects.\n"
                }, 
                "summary_data_list": {
                    "items": {
                        "$ref": "#/definitions/entities_with_metrics_result"
                    }, 
                    "type": "array", 
                    "description": "List of summary data."
                }
            }, 
            "description": "Perspective link object definition."
        }, 
        "perspective_link_group": {
            "title": "Perspective Link Group Definition", 
            "type": "object", 
            "properties": {
                "persepective_link_list": {
                    "items": {
                        "$ref": "#/definitions/perspective_link"
                    }, 
                    "type": "array", 
                    "description": "List of all the perspectives for a query."
                }
            }, 
            "description": "Perspective link group object definition."
        }, 
        "physical_availability_zone": {
            "title": "Physical Availability Zone Configuration", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "required": [
                        "external_url", 
                        "xlb_virtual_address", 
                        "olb_virtual_address"
                    ], 
                    "type": "object", 
                    "description": "Physical Availability Zone Configuration resources.", 
                    "properties": {
                        "cell_fqdn_list": {
                            "items": {
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List of cell FQDN mapped to the cluster."
                        }, 
                        "olb_virtual_address": {
                            "description": "OLB Virtual IP address.", 
                            "$ref": "#/definitions/address"
                        }, 
                        "xlb_virtual_address": {
                            "description": "XLB Virtual IP address.", 
                            "$ref": "#/definitions/address"
                        }, 
                        "billing_domain": {
                            "type": "string", 
                            "description": "Billing Domain Address."
                        }, 
                        "idp_service_provider_name": {
                            "type": "string", 
                            "description": "IDP Service Provider name."
                        }, 
                        "pulse_configuration": {
                            "title": "Pulse Configuration", 
                            "required": [
                                "enable_pulse", 
                                "enable_default_nutanix_email"
                            ], 
                            "type": "object", 
                            "properties": {
                                "enable_default_nutanix_email": {
                                    "default": true, 
                                    "type": "boolean", 
                                    "description": "Indicates if default Nutanix email address should be configured for pulse notification.\n"
                                }, 
                                "email_contact_list": {
                                    "items": {
                                        "pattern": "(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)", 
                                        "type": "string"
                                    }, 
                                    "type": "array", 
                                    "description": "List of default email contacts."
                                }, 
                                "enable_pulse": {
                                    "default": true, 
                                    "type": "boolean", 
                                    "description": "Indicates if pulse should be enabled."
                                }
                            }, 
                            "description": "Pulse Configuration."
                        }, 
                        "ntp_server_list": {
                            "items": {
                                "type": "string", 
                                "maxLength": 255
                            }, 
                            "type": "array", 
                            "description": "List of NTP Server addresses."
                        }, 
                        "cloud_uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "Reference to the Infra Cloud this physical AZ belongs.", 
                            "format": "UUID"
                        }, 
                        "my_nutanix_domain": {
                            "type": "string", 
                            "description": "My Nutanix Domain Address used for IDP Registration."
                        }, 
                        "external_url": {
                            "type": "string", 
                            "description": "External URL for the Physical Availability Zone."
                        }
                    }
                }
            }, 
            "description": "Physical Availability Zone Configuration definition."
        }, 
        "physical_availability_zone_list_metadata": {
            "title": "Metadata for physical_availability_zone list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "physical_availability_zone", 
                    "x-ntnx-enum": [
                        "physical_availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "physical_availability_zone_list_metadata_output": {
            "title": "Metadata for physical_availability_zone list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "physical_availability_zone", 
                    "x-ntnx-enum": [
                        "physical_availability_zone"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "physical_availability_zone_metadata": {
            "title": "physical_availability_zone metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when physical_availability_zone was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "physical_availability_zone", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "physical_availability_zone"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "physical_availability_zone uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the physical_availability_zone is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when physical_availability_zone was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the physical_availability_zone"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "physical_availability_zone name", 
                    "maxLength": 64
                }
            }, 
            "description": "The physical_availability_zone kind metadata"
        }, 
        "physical_availability_zone_reference": {
            "title": "Reference to a physical_availability_zone", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "physical_availability_zone", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "physical_availability_zone"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a physical_availability_zone"
        }, 
        "physical_availability_zone_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "physical_availability_zone", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "physical_availability_zone"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "placement_detail": {
            "title": "Placement details", 
            "required": [
                "cluster_reference", 
                "cluster_ip"
            ], 
            "type": "object", 
            "properties": {
                "cluster_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "IP of the cluster."
                }, 
                "cluster_port": {
                    "type": "integer", 
                    "description": "Port of the cluster."
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster.", 
                    "$ref": "#/definitions/cluster_reference"
                }
            }, 
            "description": "Details of the cluster where the entity need to be placed."
        }, 
        "placement_spec": {
            "description": "Entity placement spec.", 
            "title": "Entity placement spec", 
            "type": "object", 
            "properties": {
                "preferred_cluster_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Uuid of the cluster which is preferred to be the replication target.\n", 
                    "format": "UUID"
                }, 
                "operation_type": {
                    "x-ntnx-enum": [
                        "REPLICATION", 
                        "MIGRATION"
                    ], 
                    "type": "string", 
                    "description": "Operation to be performed for entities."
                }, 
                "entity_spec_list": {
                    "items": {
                        "$ref": "#/definitions/entity_spec"
                    }, 
                    "type": "array", 
                    "description": "List of entity specs."
                }, 
                "hypervisor_type": {
                    "x-ntnx-enum": [
                        "ESX", 
                        "AHV", 
                        "HYPERV"
                    ], 
                    "type": "string", 
                    "description": "Preferred hypervisor type for the entities.\n"
                }, 
                "source_availability_zone_url": {
                    "type": "string", 
                    "description": "URL of the source availability zone. Based on this, the mapped load\nbalancer ip address and port of the replication target will be\nreturned.\n"
                }, 
                "tenant_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the tenant.", 
                    "format": "UUID"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "entity_spec_list", 
                        "tenant_uuid", 
                        "hypervisor_type", 
                        "operation_type", 
                        "source_availability_zone_url"
                    ]
                }, 
                {
                    "required": [
                        "preferred_cluster_uuid", 
                        "source_availability_zone_url"
                    ]
                }
            ]
        }, 
        "policies": {
            "items": {
                "type": "object", 
                "properties": {
                    "policy": {
                        "type": "object", 
                        "description": "Policy object which will be interpreted by the provider"
                    }, 
                    "type": {
                        "type": "string", 
                        "description": "The policy type"
                    }
                }
            }, 
            "type": "array", 
            "description": "Settings that modify the behavior of the entity. They will be interpreted\nby built in or the third party providers\n", 
            "title": "Policies"
        }, 
        "port_range": {
            "title": "TCP/UDP ports.", 
            "type": "object", 
            "properties": {
                "end_port": {
                    "minimum": 0, 
                    "type": "integer", 
                    "maximum": 65535, 
                    "format": "int32"
                }, 
                "start_port": {
                    "minimum": 0, 
                    "type": "integer", 
                    "maximum": 65535, 
                    "format": "int32"
                }
            }, 
            "description": "Range of TCP/UDP ports."
        }, 
        "port_range_status": {
            "title": "TCP/UDP ports.", 
            "type": "object", 
            "properties": {
                "end_port": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "start_port": {
                    "type": "integer", 
                    "format": "int32"
                }
            }, 
            "description": "Range of TCP/UDP ports."
        }, 
        "portal_software": {
            "title": "Software information", 
            "type": "object", 
            "properties": {
                "release_note_url": {
                    "type": "string", 
                    "description": "URL to point to the support portal release note of this software.\nCurrently only set and used for NOS releases\n"
                }, 
                "upgrade_notification": {
                    "$ref": "#/definitions/upgrade_notification"
                }, 
                "release_date": {
                    "type": "string", 
                    "description": "Release date of this software in RFC3339 format.\n", 
                    "format": "date-time"
                }, 
                "md5sum": {
                    "type": "string", 
                    "description": "MD5 checksum of the software file"
                }, 
                "compatible_version_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of software versions that this version can be upgraded from\n"
                }, 
                "version": {
                    "type": "string", 
                    "description": "Software version string"
                }, 
                "compatible_pe_version_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of Prism Element compatible versions"
                }, 
                "software_type": {
                    "$ref": "#/definitions/software_type"
                }, 
                "size_bytes": {
                    "type": "integer", 
                    "description": "Total size of the software file in bytes", 
                    "format": "int64"
                }
            }, 
            "description": "Software information from Nutanix Portal"
        }, 
        "postal_address": {
            "title": "Postal address", 
            "type": "object", 
            "properties": {
                "country": {
                    "type": "string", 
                    "description": "Country name", 
                    "maxLength": 100
                }, 
                "state": {
                    "type": "string", 
                    "description": "State name", 
                    "maxLength": 100
                }, 
                "street": {
                    "type": "string", 
                    "description": "Street name and number", 
                    "maxLength": 100
                }, 
                "zip_code": {
                    "type": "string", 
                    "description": "Zip code", 
                    "maxLength": 20
                }, 
                "city": {
                    "type": "string", 
                    "description": "City name", 
                    "maxLength": 100
                }
            }, 
            "description": "Postal address"
        }, 
        "prism_central": {
            "title": "Prism Central", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "required": [
                        "version", 
                        "pc_vm_list"
                    ], 
                    "type": "object", 
                    "description": "Prism central deployment resources.", 
                    "properties": {
                        "version": {
                            "type": "string", 
                            "description": "The desired version of Prism Central."
                        }, 
                        "initial_password": {
                            "type": "string", 
                            "description": "Initial boot up password for new created Prism Central.", 
                            "format": "password"
                        }, 
                        "virtual_ip": {
                            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                            "type": "string", 
                            "description": "The desired virtual IP address of Prism Central cluster.\n"
                        }, 
                        "pc_vm_list": {
                            "items": {
                                "$ref": "#/definitions/pc_vm"
                            }, 
                            "type": "array"
                        }, 
                        "should_auto_register": {
                            "default": false, 
                            "type": "boolean", 
                            "description": "Indicates if the new prism central should be automatically register to the cluster.\n"
                        }
                    }
                }
            }, 
            "description": "Prism central deployment definition."
        }, 
        "prism_central_list_metadata": {
            "title": "Metadata for prism_central list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "prism_central", 
                    "x-ntnx-enum": [
                        "prism_central"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "prism_central_list_metadata_output": {
            "title": "Metadata for prism_central list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "prism_central", 
                    "x-ntnx-enum": [
                        "prism_central"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "prism_central_metadata": {
            "title": "prism_central metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when prism_central was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "prism_central", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "prism_central"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "prism_central uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the prism_central is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when prism_central was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the prism_central"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "prism_central name", 
                    "maxLength": 64
                }
            }, 
            "description": "The prism_central kind metadata"
        }, 
        "prism_central_nodes": {
            "title": "Prism Central Nodes", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "required": [
                        "pc_vm_list"
                    ], 
                    "type": "object", 
                    "description": "Prism central nodes resources.", 
                    "properties": {
                        "pc_vm_list": {
                            "items": {
                                "$ref": "#/definitions/pc_vm"
                            }, 
                            "type": "array"
                        }
                    }
                }
            }, 
            "description": "Prism central nodes definition."
        }, 
        "prism_central_nodes_list_metadata": {
            "title": "Metadata for prism_central_nodes list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "prism_central_nodes", 
                    "x-ntnx-enum": [
                        "prism_central_nodes"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "prism_central_nodes_list_metadata_output": {
            "title": "Metadata for prism_central_nodes list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "prism_central_nodes", 
                    "x-ntnx-enum": [
                        "prism_central_nodes"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "prism_central_nodes_metadata": {
            "title": "prism_central_nodes metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when prism_central_nodes was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "prism_central_nodes", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "prism_central_nodes"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "prism_central_nodes uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the prism_central_nodes is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when prism_central_nodes was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the prism_central_nodes"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "prism_central_nodes name", 
                    "maxLength": 64
                }
            }, 
            "description": "The prism_central_nodes kind metadata"
        }, 
        "prism_central_nodes_reference": {
            "title": "Reference to a prism_central_nodes", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "prism_central_nodes", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "prism_central_nodes"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a prism_central_nodes"
        }, 
        "prism_central_nodes_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "prism_central_nodes", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "prism_central_nodes"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "prism_central_reference": {
            "title": "Reference to a prism_central", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "prism_central", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "prism_central"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a prism_central"
        }, 
        "prism_central_request_status": {
            "title": "Prism central cluster expansion status", 
            "required": [
                "task_uuid", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "task_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Task UUID.", 
                    "format": "UUID"
                }, 
                "resources": {
                    "$ref": "#/definitions/prism_central_nodes"
                }
            }, 
            "description": "Prism central cluster expansion status definition."
        }, 
        "prism_central_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "prism_central", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "prism_central"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "procedural_error_response": {
            "title": "Procedural API error response", 
            "type": "object", 
            "properties": {
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }
            }, 
            "description": "Response for invoking a procedural call.\n"
        }, 
        "procedural_response": {
            "title": "Procedural API response", 
            "required": [
                "task_uuid"
            ], 
            "type": "object", 
            "properties": {
                "task_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "Response for invoking a procedural call. Contains a task UUID.\n"
        }, 
        "project": {
            "title": "Project resource spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Project name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "resource_domain": {
                            "$ref": "#/definitions/resource_domain_spec"
                        }, 
                        "account_reference_list": {
                            "items": {
                                "$ref": "#/definitions/account_reference"
                            }, 
                            "type": "array", 
                            "description": "List of accounts associated with the project."
                        }, 
                        "environment_reference_list": {
                            "items": {
                                "$ref": "#/definitions/environment_reference"
                            }, 
                            "type": "array", 
                            "description": "List of environments associated with the project."
                        }, 
                        "subnet_reference_list": {
                            "items": {
                                "$ref": "#/definitions/subnet_reference"
                            }, 
                            "type": "array", 
                            "description": "List of subnets for the project."
                        }, 
                        "external_user_group_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_group_reference"
                            }, 
                            "type": "array", 
                            "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
                        }, 
                        "default_subnet_reference": {
                            "description": "Optional default subnet if one is specified", 
                            "$ref": "#/definitions/subnet_reference"
                        }, 
                        "user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "List of users in the project."
                        }
                    }, 
                    "title": "Project Resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Project description.", 
                    "maxLength": 1000
                }
            }, 
            "description": "A Project resource."
        }, 
        "project_def_status": {
            "title": "Project Resource Status", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the project entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Project name."
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "resource_domain": {
                            "$ref": "#/definitions/resource_domain_resources_status"
                        }, 
                        "account_reference_list": {
                            "items": {
                                "$ref": "#/definitions/account_reference"
                            }, 
                            "type": "array", 
                            "description": "List of accounts associated with the project."
                        }, 
                        "environment_reference_list": {
                            "items": {
                                "$ref": "#/definitions/environment_reference"
                            }, 
                            "type": "array", 
                            "description": "List of environments associated with the project."
                        }, 
                        "default_subnet_reference": {
                            "description": "Optional default subnet if one is specified", 
                            "$ref": "#/definitions/subnet_reference"
                        }, 
                        "user_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_reference"
                            }, 
                            "type": "array", 
                            "description": "List of users added directly to the project.\n"
                        }, 
                        "is_default": {
                            "type": "boolean", 
                            "description": "Indicates if it is the default project. A default project is\nmanaged by the system and cannot be renamed or removed.\n"
                        }, 
                        "external_user_group_reference_list": {
                            "items": {
                                "$ref": "#/definitions/user_group_reference"
                            }, 
                            "type": "array", 
                            "description": "List of directory service groups reference. These\ngroups are not managed by Nutanix.\n"
                        }, 
                        "subnet_reference_list": {
                            "items": {
                                "$ref": "#/definitions/subnet_reference"
                            }, 
                            "type": "array", 
                            "description": "List of subnets for the project."
                        }
                    }, 
                    "title": "Project Resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Project description."
                }
            }, 
            "description": "A Project resource."
        }, 
        "project_intent_input": {
            "title": "project Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/project"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/project_metadata"
                }
            }, 
            "description": "An intentful representation of a project"
        }, 
        "project_intent_resource": {
            "title": "project Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/project_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/project"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/project_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a project"
        }, 
        "project_intent_response": {
            "title": "project Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/project_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/project"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/project_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a project"
        }, 
        "project_internal": {
            "title": "Project details, combined with Users and ACPs", 
            "required": [
                "project_detail"
            ], 
            "type": "object", 
            "properties": {
                "access_control_policy_list": {
                    "items": {
                        "required": [
                            "operation", 
                            "acp", 
                            "metadata"
                        ], 
                        "type": "object", 
                        "properties": {
                            "operation": {
                                "x-ntnx-enum": [
                                    "ADD", 
                                    "DELETE", 
                                    "UPDATE"
                                ], 
                                "type": "string", 
                                "description": "Indicates the action(add, delete, update)"
                            }, 
                            "acp": {
                                "$ref": "#/definitions/access_control_policy_input"
                            }, 
                            "metadata": {
                                "type": "object", 
                                "properties": {
                                    "kind": {
                                        "readOnly": true, 
                                        "type": "string"
                                    }, 
                                    "uuid": {
                                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                        "type": "string", 
                                        "format": "UUID"
                                    }
                                }
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "The list of ACPs to be attached to the users belonging to a project.\n"
                }, 
                "project_detail": {
                    "title": "Project details", 
                    "required": [
                        "name", 
                        "resources"
                    ], 
                    "type": "object", 
                    "properties": {
                        "name": {
                            "type": "string", 
                            "description": "Project name.", 
                            "maxLength": 64
                        }, 
                        "resources": {
                            "type": "object", 
                            "properties": {
                                "resource_domain": {
                                    "$ref": "#/definitions/resource_domain_spec"
                                }, 
                                "account_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/account_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of accounts associated with the project."
                                }, 
                                "environment_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/environment_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of environments associated with the project."
                                }, 
                                "subnet_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/subnet_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of subnets for the project."
                                }, 
                                "external_user_group_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/user_group_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
                                }, 
                                "default_subnet_reference": {
                                    "description": "Optional default subnet if one is specified", 
                                    "$ref": "#/definitions/subnet_reference"
                                }, 
                                "user_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/user_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of users in the project."
                                }
                            }, 
                            "title": "Project Resources"
                        }, 
                        "description": {
                            "type": "string", 
                            "description": "Project description.", 
                            "maxLength": 1000
                        }
                    }, 
                    "description": "A Project resource."
                }, 
                "user_list": {
                    "items": {
                        "required": [
                            "operation", 
                            "user", 
                            "metadata"
                        ], 
                        "type": "object", 
                        "description": "The details of the user such as principal name and\ndirectory_service_reference. Also contains metadata.\n", 
                        "properties": {
                            "operation": {
                                "x-ntnx-enum": [
                                    "ADD"
                                ], 
                                "type": "string", 
                                "description": "Indicates the action(add, delete, update)"
                            }, 
                            "user": {
                                "$ref": "#/definitions/user"
                            }, 
                            "metadata": {
                                "type": "object", 
                                "properties": {
                                    "kind": {
                                        "readOnly": true, 
                                        "type": "string"
                                    }, 
                                    "uuid": {
                                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                        "type": "string", 
                                        "format": "UUID"
                                    }
                                }
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "The list of user specification to be associated with the project.\n"
                }, 
                "user_group_list": {
                    "items": {
                        "required": [
                            "operation", 
                            "user_group", 
                            "metadata"
                        ], 
                        "type": "object", 
                        "description": "The details of the user group\n", 
                        "properties": {
                            "operation": {
                                "x-ntnx-enum": [
                                    "ADD"
                                ], 
                                "type": "string", 
                                "description": "Indicates the action(add, delete, update)"
                            }, 
                            "user_group": {
                                "$ref": "#/definitions/user_group"
                            }, 
                            "metadata": {
                                "type": "object", 
                                "properties": {
                                    "kind": {
                                        "readOnly": true, 
                                        "type": "string"
                                    }, 
                                    "uuid": {
                                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                        "type": "string", 
                                        "format": "UUID"
                                    }
                                }
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "The list of user group specification to be associated with the project.\n"
                }
            }, 
            "description": "A Project resource, combined with Users and ACPs"
        }, 
        "project_internal_def_status": {
            "title": "Project Resource Status, combined with Users and ACPs", 
            "required": [
                "project_status"
            ], 
            "type": "object", 
            "properties": {
                "access_control_policy_list_status": {
                    "items": {
                        "type": "object", 
                        "description": "The acp status and metadata", 
                        "properties": {
                            "access_control_policy_status": {
                                "$ref": "#/definitions/access_control_policy_def_status"
                            }, 
                            "metadata": {
                                "type": "object", 
                                "properties": {
                                    "kind": {
                                        "readOnly": true, 
                                        "type": "string"
                                    }, 
                                    "uuid": {
                                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                        "type": "string", 
                                        "format": "UUID"
                                    }
                                }
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "The list of access control policies associates with users in the project.\n"
                }, 
                "project_status": {
                    "title": "Project Resource Status", 
                    "required": [
                        "name", 
                        "resources"
                    ], 
                    "type": "object", 
                    "properties": {
                        "state": {
                            "type": "string", 
                            "description": "The state of the project entity."
                        }, 
                        "name": {
                            "type": "string", 
                            "description": "Project name.", 
                            "maxLength": 64
                        }, 
                        "message": {
                            "readOnly": true, 
                            "type": "string", 
                            "description": "The reason for the state if in error."
                        }, 
                        "reason": {
                            "readOnly": true, 
                            "type": "string", 
                            "description": "One snake case word."
                        }, 
                        "resources": {
                            "type": "object", 
                            "properties": {
                                "resource_domain": {
                                    "$ref": "#/definitions/resource_domain_resources_status"
                                }, 
                                "account_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/account_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of accounts associated with the project."
                                }, 
                                "environment_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/environment_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of environments associated with the project."
                                }, 
                                "default_subnet_reference": {
                                    "description": "Optional default subnet if one is specified", 
                                    "$ref": "#/definitions/subnet_reference"
                                }, 
                                "user_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/user_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of users in the project including all the users from the\nusers group if provided.\n"
                                }, 
                                "is_default": {
                                    "type": "boolean", 
                                    "description": "Indicates if it is the default project. A default project is\nmanaged by the system and cannot be renamed or removed. If\nuser_reference_list or external_group_list is not specified,\nthen all users are given access to the default project.\n"
                                }, 
                                "external_user_group_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/user_group_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of directory service user groups. These groups are not\nmanaged by Nutanix.\n"
                                }, 
                                "subnet_reference_list": {
                                    "items": {
                                        "$ref": "#/definitions/subnet_reference"
                                    }, 
                                    "type": "array", 
                                    "description": "List of subnets for the project."
                                }
                            }, 
                            "title": "Project Resources"
                        }, 
                        "description": {
                            "type": "string", 
                            "description": "Project description.", 
                            "maxLength": 1000
                        }
                    }, 
                    "description": "A Project resource."
                }
            }, 
            "description": "A Project resource, combined with Users and ACPs."
        }, 
        "project_internal_intent_input": {
            "title": "Project Intent Entity", 
            "required": [
                "api_version", 
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/project_internal"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/project_metadata"
                }
            }, 
            "description": "An intentful representation of a Project"
        }, 
        "project_internal_intent_response": {
            "title": "Project Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/project_internal_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/project_internal"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/project_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a Project"
        }, 
        "project_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/project_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/project_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of projects"
        }, 
        "project_list_metadata": {
            "title": "Metadata for project list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "project", 
                    "x-ntnx-enum": [
                        "project"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "project_list_metadata_output": {
            "title": "Metadata for project list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "project", 
                    "x-ntnx-enum": [
                        "project"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "project_metadata": {
            "title": "project metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when project was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "project", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "project"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "project uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the project is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when project was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the project"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "project name", 
                    "maxLength": 64
                }
            }, 
            "description": "The project kind metadata"
        }, 
        "project_reference": {
            "title": "Reference to a project", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "project", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "project"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a project"
        }, 
        "project_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "project", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "project"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "protection_rule": {
            "title": "Protection Rule creation/modification spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Protection Rule name", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/protection_rule_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for the protection rule.", 
                    "maxLength": 1000
                }
            }, 
            "description": "protection Rule creation/modification spec"
        }, 
        "protection_rule_def_status": {
            "title": "Protection Rule creation/modification status", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the protection rule."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the protection rule, if in an error state.\n"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Protection Rule name"
                }, 
                "resources": {
                    "$ref": "#/definitions/protection_rule_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for the protection rule."
                }
            }, 
            "description": "Protection Rule creation/modification status"
        }, 
        "protection_rule_intent_input": {
            "title": "protection_rule Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/protection_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/protection_rule_metadata"
                }
            }, 
            "description": "An intentful representation of a protection_rule"
        }, 
        "protection_rule_intent_resource": {
            "title": "protection_rule Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/protection_rule_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/protection_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/protection_rule_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a protection_rule"
        }, 
        "protection_rule_intent_response": {
            "title": "protection_rule Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/protection_rule_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/protection_rule"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/protection_rule_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a protection_rule"
        }, 
        "protection_rule_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/protection_rule_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/protection_rule_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of protection_rules"
        }, 
        "protection_rule_list_metadata": {
            "title": "Metadata for protection_rule list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "protection_rule", 
                    "x-ntnx-enum": [
                        "protection_rule"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "protection_rule_list_metadata_output": {
            "title": "Metadata for protection_rule list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "protection_rule", 
                    "x-ntnx-enum": [
                        "protection_rule"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "protection_rule_metadata": {
            "title": "protection_rule metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when protection_rule was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "protection_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "protection_rule"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "protection_rule uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the protection_rule is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when protection_rule was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the protection_rule"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "protection_rule name", 
                    "maxLength": 64
                }
            }, 
            "description": "The protection_rule kind metadata"
        }, 
        "protection_rule_reference": {
            "title": "Reference to a protection_rule", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "protection_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "protection_rule"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a protection_rule"
        }, 
        "protection_rule_resources": {
            "title": "Protection Rule resources", 
            "required": [
                "ordered_availability_zone_list", 
                "availability_zone_connectivity_list"
            ], 
            "type": "object", 
            "properties": {
                "start_time": {
                    "type": "string", 
                    "description": "Time of the day, the policy will be started. This is in \"<x>h:<y>m\"\nformat. The values must be between 00h:00m and 23h:59m. For example\nuser specified 18h:00m and the current time is 17h:00m then the first\nsnapshot will be captured at 18h:00m. If the current time is 19h:00m\nthen the first snapshot will be captured at 18h:00m next day. If not\nset, policy will be applicable immediately.\n"
                }, 
                "availability_zone_connectivity_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "destination_availability_zone_index": {
                                "type": "integer", 
                                "description": "Index of the availability zone in\nordered_availability_zone_list. This represents the\navailability zone where the entity needs to be replicated\nto. Index starts at 0.\n", 
                                "format": "int32"
                            }, 
                            "source_availability_zone_index": {
                                "type": "integer", 
                                "description": "Index of the availability zone in\nordered_availability_zone_list. This represents the source\navailability zone where the entity is running. Index starts\nat 0.\n", 
                                "format": "int32"
                            }, 
                            "snapshot_schedule_list": {
                                "items": {
                                    "required": [
                                        "recovery_point_objective_secs"
                                    ], 
                                    "type": "object", 
                                    "properties": {
                                        "recovery_point_objective_secs": {
                                            "type": "integer", 
                                            "description": "A recovery point objective (RPO) is the maximum\nacceptable amount of data loss. RPO is measured in\ntime (in seconds) and then dictates disaster recovery\nprocedures. For example, if the RPO is set to 30\nminutes, then a backup of the entity is required to\nbe done every 30 minutes.\n", 
                                            "format": "int32"
                                        }, 
                                        "local_snapshot_retention_policy": {
                                            "description": "The following describes the local snapshot retention\npolicy corresponding to the snapshot schedule.\n", 
                                            "$ref": "#/definitions/snapshot_retention_policy"
                                        }, 
                                        "snapshot_type": {
                                            "x-ntnx-enum": [
                                                "CRASH_CONSISTENT", 
                                                "APPLICATION_CONSISTENT"
                                            ], 
                                            "type": "string", 
                                            "description": "Crash consistent or Application Consistent snapshot\n"
                                        }, 
                                        "remote_snapshot_retention_policy": {
                                            "description": "The following describes the snapshot retention policy\nfor a given replication target availability zone.\n", 
                                            "$ref": "#/definitions/snapshot_retention_policy"
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "Snapshot schedules for the pair of the availability zones.\n"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "This encodes the datapipes between various availability zones and\nthe backup policy of the pipes. For example, [1, 2, 3600],\n[2, 3, 3600], [4, 5, 15000], [2, 6, 4200]. Note 2 here means\nthe entry at index 2 in the ordered_availability_zone_list.\nAnd 3600 is the RPO (Recovery Point Objective) in seconds between\nthe two availability zones.\n"
                }, 
                "ordered_availability_zone_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "cluster_uuid": {
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                "type": "string", 
                                "description": "UUID of specific cluster to which we will be replicating.\nThis need to set only if availability zone is of type PC.\n"
                            }, 
                            "availability_zone_url": {
                                "type": "string", 
                                "description": "The FQDN or IP address of the availability zone. Every\nPrism Central deployment acts as an availability zone.\n"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "A list of availability zones, each of which, receives a replica\nof the data for the entities protected by this protection rule.\nThe order of the availability zones in the list determines the\npreference order (highest to lowest) for the entity to run in the\ncase of failure of one or more availability zones. For example,\nif this list is [A, B, C, D], then the entity will prefer to run\non A unless A has failed, in which case, the entity will run on\nthe second choice, B. Failover of the entity is not automatic but\nthis information is used by DR runbook to failover an entity to\nthe desired availability zone.\n"
                }, 
                "category_filter": {
                    "description": "Filters for entities to be included for protection.", 
                    "$ref": "#/definitions/category_filter"
                }
            }, 
            "description": "Protection rule encodes the overall topology of all the availability\nzones where the entity is replicated to. This encoding allows the system\nto figure out where the entity should be running in the case of one or\nmore availability zone failures.\n"
        }, 
        "protection_rule_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "protection_rule", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "protection_rule"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "protocol_parameters": {
            "description": "Routing policy IP protocol parameters", 
            "title": "IP protocol", 
            "type": "object", 
            "properties": {
                "udp": {
                    "description": "UDP parameters to be matched", 
                    "$ref": "#/definitions/udp"
                }, 
                "icmp": {
                    "description": "ICMP parameters to be matched", 
                    "$ref": "#/definitions/icmp"
                }, 
                "protocol_number": {
                    "minimum": 0, 
                    "type": "integer", 
                    "maximum": 255, 
                    "format": "uint8"
                }, 
                "tcp": {
                    "description": "TCP parameters to be matched", 
                    "$ref": "#/definitions/tcp"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "tcp"
                    ]
                }, 
                {
                    "required": [
                        "udp"
                    ]
                }, 
                {
                    "required": [
                        "icmp"
                    ]
                }, 
                {
                    "required": [
                        "protocol_number"
                    ]
                }
            ]
        }, 
        "protocol_parameters_status": {
            "description": "Routing policy IP protocol parameters", 
            "title": "IP protocol", 
            "type": "object", 
            "properties": {
                "udp": {
                    "description": "UDP parameters to be matched", 
                    "$ref": "#/definitions/udp_status"
                }, 
                "icmp": {
                    "description": "ICMP parameters to be matched", 
                    "$ref": "#/definitions/icmp_status"
                }, 
                "protocol_number": {
                    "type": "integer", 
                    "format": "uint8"
                }, 
                "tcp": {
                    "description": "TCP parameters to be matched", 
                    "$ref": "#/definitions/tcp_status"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "tcp"
                    ]
                }, 
                {
                    "required": [
                        "udp"
                    ]
                }, 
                {
                    "required": [
                        "icmp"
                    ]
                }, 
                {
                    "required": [
                        "protocol_number"
                    ]
                }
            ]
        }, 
        "provider_oauth_token": {
            "title": "Oauth token from Oauth2 provider", 
            "required": [
                "access_token", 
                "token_type", 
                "expires_in", 
                "refresh_token", 
                "scope"
            ], 
            "type": "object", 
            "properties": {
                "access_token": {
                    "type": "string", 
                    "description": "access_token to be used for accessing gateway"
                }, 
                "token_type": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"bearer\"."
                }, 
                "expires_in": {
                    "type": "integer", 
                    "description": "Token expiration time in seconds", 
                    "format": "int64"
                }, 
                "refresh_token": {
                    "type": "string", 
                    "description": "Refresh_token which can used to get new token"
                }, 
                "scope": {
                    "type": "string", 
                    "description": "Scope string with individual scopes separated by space"
                }
            }, 
            "description": "Oauth token from Oauth2 provider"
        }, 
        "providers": {
            "additionalProperties": {
                "type": "object"
            }, 
            "type": "object", 
            "description": "Providers should be supplied as \"<scope>:<provider>\" style keys. Values\nwill be interpreted by the provider if supplied\n", 
            "title": "Providers"
        }, 
        "public_cidr": {
            "title": "public_cidr Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for public_cidr.", 
                    "maxLength": 1000
                }, 
                "name": {
                    "type": "string", 
                    "description": "public_cidr Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/public_cidr_resources"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a public_cidr spec"
        }, 
        "public_cidr_def_status": {
            "title": "public_cidr Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the public_cidr."
                }, 
                "name": {
                    "type": "string", 
                    "description": "public_cidr Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the public_cidr, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/public_cidr_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for public_cidr."
                }
            }, 
            "description": "An intentful representation of a public_cidr status"
        }, 
        "public_cidr_intent_input": {
            "title": "public_cidr Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/public_cidr"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/public_cidr_metadata"
                }
            }, 
            "description": "An intentful representation of a public_cidr"
        }, 
        "public_cidr_intent_resource": {
            "title": "public_cidr Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/public_cidr_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/public_cidr"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/public_cidr_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a public_cidr"
        }, 
        "public_cidr_intent_response": {
            "title": "public_cidr Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/public_cidr_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/public_cidr"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/public_cidr_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a public_cidr"
        }, 
        "public_cidr_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/public_cidr_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/public_cidr_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of public_cidrs"
        }, 
        "public_cidr_list_metadata": {
            "title": "Metadata for public_cidr list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "public_cidr", 
                    "x-ntnx-enum": [
                        "public_cidr"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "public_cidr_list_metadata_output": {
            "title": "Metadata for public_cidr list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "public_cidr", 
                    "x-ntnx-enum": [
                        "public_cidr"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "public_cidr_metadata": {
            "title": "public_cidr metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when public_cidr was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "public_cidr", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "public_cidr"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "public_cidr uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the public_cidr is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when public_cidr was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the public_cidr"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "public_cidr name", 
                    "maxLength": 64
                }
            }, 
            "description": "The public_cidr kind metadata"
        }, 
        "public_cidr_reference": {
            "title": "Reference to a public_cidr", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "public_cidr", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "public_cidr"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a public_cidr"
        }, 
        "public_cidr_resources": {
            "title": "Public cidr create/modify spec", 
            "type": "object", 
            "properties": {
                "cidr_type": {
                    "x-ntnx-enum": [
                        "FLOATING_IP", 
                        "DIRECT_CONNECT", 
                        "SNAT"
                    ], 
                    "type": "string", 
                    "description": "Type of the cidr pool."
                }, 
                "region": {
                    "type": "string", 
                    "description": "Region of the location."
                }, 
                "cidr_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\/(\\d|[1-2]\\d|3[0-2]))$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of public CIDRs.\n"
                }
            }, 
            "description": "Public cidr spec"
        }, 
        "public_cidr_resources_def_status": {
            "title": "Public cidr create/modify status", 
            "description": "Public cidr create/modify status", 
            "$ref": "#/definitions/public_cidr_resources"
        }, 
        "public_cidr_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "public_cidr", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "public_cidr"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "public_key": {
            "title": "Public Key", 
            "required": [
                "name", 
                "key"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "maxLength": 64
                }, 
                "key": {
                    "type": "string"
                }
            }, 
            "description": "Public Key"
        }, 
        "query_result": {
            "title": "Query Result Definition", 
            "type": "object", 
            "properties": {
                "query_explaination": {
                    "type": "string", 
                    "description": "A description of the interpretation done by the search engine.\n"
                }, 
                "query_context": {
                    "type": "string", 
                    "description": "Common context for query which needs to be shared across client and\nsearch service. Client can pass some context which will be echoed back\nalong with the response.\n"
                }, 
                "query_term_list": {
                    "items": {
                        "$ref": "#/definitions/query_term"
                    }, 
                    "type": "array", 
                    "description": "Structured representation that infers query intent unambiguously. Client will echo this information back to the backend. Essentially, it is like a search result link. The list has an item corresponding to every query term. One user query is nothing but a collection of multiple query terms.\n"
                }, 
                "result": {
                    "$ref": "#/definitions/result"
                }, 
                "user_query": {
                    "type": "string", 
                    "description": "User query in simple text.", 
                    "maxLength": 2048
                }, 
                "plain_text_query": {
                    "type": "boolean", 
                    "description": "A boolean flag to distinguish between a plain text search_for query\nand the search_for query with query term list.\n"
                }, 
                "time_taken": {
                    "type": "integer", 
                    "description": "Time taken(ms) in executing the search query.", 
                    "format": "int64"
                }, 
                "auto_completion_list": {
                    "items": {
                        "$ref": "#/definitions/auto_completion"
                    }, 
                    "type": "array", 
                    "description": "List of all the autocompletions for a given user query.\n"
                }
            }, 
            "description": "Query result object definition. This holds the response for the search\nrequest.\n"
        }, 
        "query_term": {
            "title": "Query Term Definition", 
            "type": "object", 
            "properties": {
                "term": {
                    "type": "string", 
                    "description": "User passed string for the query term."
                }, 
                "token_list": {
                    "items": {
                        "$ref": "#/definitions/token"
                    }, 
                    "type": "array", 
                    "description": "All possible interpretations of the term."
                }
            }, 
            "description": "Query term object definition. This essentially holds the\nvarious interpretation of a single query term.\n"
        }, 
        "rack": {
            "title": "Rack Entity", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the rack", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/rack_resources"
                }
            }, 
            "description": "Rack entity definition"
        }, 
        "rack_config": {
            "title": "Rack Config", 
            "type": "object", 
            "properties": {
                "rack_name": {
                    "type": "string", 
                    "maxLength": 64
                }, 
                "host_list": {
                    "items": {
                        "$ref": "#/definitions/host_reference"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Map of rack's name to the hosts it contains. The rack may or may not exist in the cluster yet.\n"
        }, 
        "rack_def_status": {
            "title": "Rack Entity Status", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The state of the rack entity"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Rack Name"
                }, 
                "resources": {
                    "$ref": "#/definitions/rack_resources"
                }
            }, 
            "description": "Rack entity status defintion"
        }, 
        "rack_intent_input": {
            "title": "rack Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rack"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/rack_metadata"
                }
            }, 
            "description": "An intentful representation of a rack"
        }, 
        "rack_intent_resource": {
            "title": "rack Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/rack_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/rack"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/rack_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a rack"
        }, 
        "rack_intent_response": {
            "title": "rack Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/rack_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/rack"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/rack_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a rack"
        }, 
        "rack_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/rack_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/rack_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of racks"
        }, 
        "rack_list_metadata": {
            "title": "Metadata for rack list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "rack", 
                    "x-ntnx-enum": [
                        "rack"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "rack_list_metadata_output": {
            "title": "Metadata for rack list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "rack", 
                    "x-ntnx-enum": [
                        "rack"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "rack_metadata": {
            "title": "rack metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when rack was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "rack", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "rack"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "rack uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the rack is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when rack was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the rack"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "rack name", 
                    "maxLength": 64
                }
            }, 
            "description": "The rack kind metadata"
        }, 
        "rack_reference": {
            "title": "Reference to a rack", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "rack", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "rack"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a rack"
        }, 
        "rack_resources": {
            "title": "Rack Entity", 
            "type": "object", 
            "properties": {
                "cell_reference": {
                    "$ref": "#/definitions/cell_reference"
                }, 
                "location": {
                    "type": "string", 
                    "description": "The rack location"
                }
            }, 
            "description": "Rack entity definition"
        }, 
        "rack_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "rack", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "rack"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "rackable_unit": {
            "title": "Rackable Unit Entity", 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/rackable_unit_resources"
                }
            }, 
            "description": "Rackable Unit entity definition"
        }, 
        "rackable_unit_def_status": {
            "title": "Rackable Unit Entity Status", 
            "required": [
                "serial", 
                "model", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "serial": {
                    "type": "string", 
                    "description": "The rackable unit serial"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "model": {
                    "type": "string", 
                    "description": "The rackable unit model"
                }, 
                "resources": {
                    "$ref": "#/definitions/rackable_unit_resources"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The state of the rackable unit entity"
                }
            }, 
            "description": "Rackable unit entity status definition. A rackable unit is the physical chassis which contains a set of nodes. This entity is currently defined in context of a cluster only. Hence, multiple rackable unit entities may be present with same serial and same model, if they belong to different clusters (when viewed from PC).\n"
        }, 
        "rackable_unit_intent_input": {
            "title": "rackable_unit Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/rackable_unit"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/rackable_unit_metadata"
                }
            }, 
            "description": "An intentful representation of a rackable_unit"
        }, 
        "rackable_unit_intent_resource": {
            "title": "rackable_unit Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/rackable_unit_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/rackable_unit"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/rackable_unit_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a rackable_unit"
        }, 
        "rackable_unit_intent_response": {
            "title": "rackable_unit Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/rackable_unit_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/rackable_unit"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/rackable_unit_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a rackable_unit"
        }, 
        "rackable_unit_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/rackable_unit_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/rackable_unit_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of rackable_units"
        }, 
        "rackable_unit_list_metadata": {
            "title": "Metadata for rackable_unit list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "rackable_unit", 
                    "x-ntnx-enum": [
                        "rackable_unit"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "rackable_unit_list_metadata_output": {
            "title": "Metadata for rackable_unit list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "rackable_unit", 
                    "x-ntnx-enum": [
                        "rackable_unit"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "rackable_unit_metadata": {
            "title": "rackable_unit metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when rackable_unit was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "rackable_unit", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "rackable_unit"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "rackable_unit uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the rackable_unit is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when rackable_unit was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the rackable_unit"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "rackable_unit name", 
                    "maxLength": 64
                }
            }, 
            "description": "The rackable_unit kind metadata"
        }, 
        "rackable_unit_reference": {
            "title": "Reference to a rackable_unit", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "rackable_unit", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "rackable_unit"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a rackable_unit"
        }, 
        "rackable_unit_resources": {
            "title": "Rackable Unit Entity", 
            "type": "object", 
            "properties": {
                "rack_reference": {
                    "description": "The reference of rack, which this rackable unit belongs to", 
                    "$ref": "#/definitions/rack_reference"
                }
            }, 
            "description": "Rackable Unit input definition"
        }, 
        "rackable_unit_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "rackable_unit", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "rackable_unit"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "rca_metadata": {
            "title": "Root cause analysis metadata.", 
            "type": "object", 
            "properties": {
                "details": {
                    "type": "string", 
                    "description": "Alert cause detail information"
                }, 
                "title": {
                    "type": "string", 
                    "description": "RCA title"
                }, 
                "cause": {
                    "type": "string", 
                    "description": "Alert cause description"
                }, 
                "id": {
                    "type": "string", 
                    "description": "rca metadata id"
                }, 
                "actions": {
                    "type": "string", 
                    "description": "Alert possible actions"
                }, 
                "parent_cause_id": {
                    "type": "string", 
                    "description": "cause id of parent"
                }
            }, 
            "description": "Root cause analysis from alert RCA metadata."
        }, 
        "reboot_ngt_policy_parameters": {
            "title": "Reboot NGT policy parameters", 
            "required": [
                "schedule_type"
            ], 
            "type": "object", 
            "properties": {
                "apply_once": {
                    "default": false, 
                    "type": "boolean", 
                    "description": "Flag for policies to be applied only once."
                }, 
                "schedule_type": {
                    "x-ntnx-enum": [
                        "IMMEDIATE", 
                        "LATER"
                    ], 
                    "type": "string", 
                    "description": "Type of Schedule for policy enforcement."
                }, 
                "schedule": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "start_time"
                            ]
                        }, 
                        {
                            "required": [
                                "day_time"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "start_time": {
                            "type": "string", 
                            "description": "Start time of the schedule.\nThe time should be specified in this manner.\ndate-fullyear(4digit) \"-\" date-month(2digit) \"-\" date-mday(2digit)\n\"T\" time-hour(2digit) \":\" time-minute(2digit) \":\" time-second\n(2digit) [.] \"Z\"  or (\"+\" / \"-\") time-hour(2digit) \":\"\ntime-minute(2digit)\nExamples\n- 1985-04-12T23:20:50.52Z represents 20 minutes and 50.52 seconds\n  after the 23rd hour of April 12th, 1985 in UTC.\n- 1996-12-19T16:39:57-08:00 This represents 39 minutes and 57\n  seconds after the 16th hour of December 19th, 1996 with an offset\n  of -08:00 from UTC (Pacific Standard Time).\n  Note that this is equivalent to 1996-12-20T00:39:57Z in UTC.\n", 
                            "format": "date-time"
                        }, 
                        "day_time": {
                            "$ref": "#/definitions/day_time"
                        }
                    }, 
                    "description": "Schedule for policy enforcement."
                }
            }, 
            "description": "NGT reboot policy object."
        }, 
        "recipient": {
            "title": "Recipient Details.", 
            "type": "object", 
            "properties": {
                "email_address": {
                    "pattern": "(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)", 
                    "type": "string", 
                    "description": "Email address of the recipient."
                }, 
                "recipient_name": {
                    "type": "string", 
                    "description": "Name of the recipient.", 
                    "maxLength": 64
                }
            }, 
            "description": "Recipient of the report email."
        }, 
        "recover_entities": {
            "title": "Information about entities to be recovered", 
            "required": [
                "entity_info_list"
            ], 
            "type": "object", 
            "properties": {
                "entity_info_list": {
                    "items": {
                        "type": "object", 
                        "x-ntnx-one-of": [
                            {
                                "required": [
                                    "categories"
                                ]
                            }, 
                            {
                                "required": [
                                    "any_entity_reference"
                                ]
                            }
                        ], 
                        "properties": {
                            "any_entity_reference": {
                                "description": "Information about entity to be recovered.", 
                                "$ref": "#/definitions/reference"
                            }, 
                            "categories": {
                                "additionalProperties": {
                                    "type": "string"
                                }, 
                                "type": "object", 
                                "description": "Categories for filtering entities."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Information about entities to be recovered as part of this stage. For VM, entity information will include set of scripts to be executed after recovery of VM. Only one of categories or any_entity_reference has to be provided.\n"
                }
            }, 
            "description": "Information about entities to be recovered.\n"
        }, 
        "recovery_plan": {
            "title": "Recovery Plan creation/modification spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Recovery Plan name", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/recovery_plan_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the Recovery Plan.", 
                    "maxLength": 1000
                }
            }, 
            "description": "Recovery Plan creation/modification spec"
        }, 
        "recovery_plan_def_status": {
            "title": "Recovery Plan status", 
            "required": [
                "name", 
                "resources", 
                "recovery_availability_zone_order_list"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Recovery Plan name"
                }, 
                "recovery_availability_zone_order_list": {
                    "items": {
                        "required": [
                            "availability_zone_url"
                        ], 
                        "type": "object", 
                        "properties": {
                            "availability_zone_url": {
                                "type": "string", 
                                "description": "URL of the Availability Zone.\n"
                            }, 
                            "availability_zone_order_list": {
                                "items": {
                                    "properties": {
                                        "availability_zone_list": {
                                            "items": {
                                                "type": "object", 
                                                "properties": {
                                                    "availability_zone_url": {
                                                        "type": "string", 
                                                        "description": "URL of the Availability Zone.\n"
                                                    }
                                                }
                                            }, 
                                            "type": "array", 
                                            "description": "List of Availability Zones."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "List of recovery Availability Zone orders for entities in the Recovery Plan. More than one entry in this list indicates entities in Recovery Plan are protected by the Protection Rules with different recovery Availability Zone order and makes Recovery Plan invalid.\n"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of recovery Availability Zones order list per local Availability Zone. In case of public cloud, recovery Availability Zones order for each of the Availability Zones will be reported. For example, Let AZ1 and AZ2 be the two Availability Zones for a public cloud and OnPrem be the on-premise Availability Zone. If entities on OnPrem is protected by a Protection Rule with Availabilty Zone order [OnPrem, AZ1, AZ2], then recovery_availability_zone_order_list will be [{AZ1, [OnPrem, AZ1, AZ2]}, {AZ2, [OnPrem, AZ1, AZ2]}]\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "state": {
                    "type": "string", 
                    "description": "The state of the Recovery Plan entity."
                }, 
                "latest_validation_time": {
                    "type": "string", 
                    "description": "Time when latest validation was done for Recovery Plan.", 
                    "format": "date-time"
                }, 
                "latest_test_time": {
                    "type": "string", 
                    "description": "Time when latest test was done for Recovery Plan.", 
                    "format": "date-time"
                }, 
                "resources": {
                    "$ref": "#/definitions/recovery_plan_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the Recovery Plan."
                }
            }, 
            "description": "Recovery Plan status"
        }, 
        "recovery_plan_entities": {
            "title": "Entities associated with Recovery Plan", 
            "required": [
                "entities_per_availability_zone_list"
            ], 
            "type": "object", 
            "properties": {
                "entities_per_availability_zone_list": {
                    "items": {
                        "required": [
                            "availability_zone_url"
                        ], 
                        "type": "object", 
                        "properties": {
                            "availability_zone_url": {
                                "type": "string", 
                                "description": "URL of the Availability Zone.\n"
                            }, 
                            "availability_zone_order_list": {
                                "items": {
                                    "properties": {
                                        "availability_zone_list": {
                                            "items": {
                                                "type": "object", 
                                                "properties": {
                                                    "availability_zone_url": {
                                                        "type": "string", 
                                                        "description": "URL of the Availability Zone.\n"
                                                    }
                                                }
                                            }, 
                                            "type": "array", 
                                            "description": "List of Availability Zones."
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "List of recovery Availability Zone orders for entities in the Recovery Plan. More than one entry in this list indicates entities in Recovery Plan are protected by the Protection Rules with different recovery Availability Zone order and makes Recovery Plan invalid.\n"
                            }, 
                            "entity_list": {
                                "items": {
                                    "required": [
                                        "any_entity_reference", 
                                        "is_recovery_point"
                                    ], 
                                    "properties": {
                                        "is_recovery_point": {
                                            "type": "boolean", 
                                            "description": "On the Availability Zone, whether the live entity is present or the Recovery Points for the entity are present. This will be set to true, only if the Recovery Points for the entity are present on the Availability Zone and not the live entity.\n"
                                        }, 
                                        "any_entity_reference": {
                                            "description": "Reference to the entity.", 
                                            "$ref": "#/definitions/reference"
                                        }, 
                                        "recovery_availability_zone_order_index": {
                                            "type": "integer", 
                                            "description": "Index of recovery Availability Zone order for this entity in availability_zone_order_list. Index starts at 0.\n", 
                                            "format": "int32"
                                        }
                                    }
                                }, 
                                "type": "array", 
                                "description": "List of protected entities associated with Recovery Plan. This list includes the entities which are live and the entities for which Recovery Points are present on the Availability Zone.\n"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of entities and recovery Availability Zones order list per local Availability Zone. In case of public cloud, entity list and recovery Availability Zones order for each of the Availability Zones will be reported. For example, Let AZ1 and AZ2 be the two Availability Zones for a public cloud and OnPrem be the on-premise Availability Zone. If VMs VM1 and VM2 on OnPrem is protected by a Protection Rule with Availabilty Zone order [OnPrem, AZ1, AZ2], then entities_per_availability_zone_list will be [{AZ1, [[OnPrem, AZ1, AZ2]], [{VM1}, {VM2}]},\n {AZ2, [[OnPrem, AZ1, AZ2]], [{VM1}, {VM2}]}].\nAll the Availability Zones should have same Availability Zone order for a valid Recovery Plan.\n"
                }
            }, 
            "description": "Entities associated with Recovery Plan. It includes the live entities and the entites for which Recovery Points are available.\n"
        }, 
        "recovery_plan_floating_ip_config": {
            "description": "Configuration for assigning floating IP to a VM on the execution of the Recovery Plan.\n", 
            "title": "Floating IP configuration for a VM\n", 
            "type": "object", 
            "properties": {
                "ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "IP to be assigned to VM, in case of failover.\n"
                }, 
                "should_allocate_dynamically": {
                    "type": "boolean", 
                    "description": "Whether to allocate the floating IPs for the VMs dynamically.\n"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "ip"
                    ]
                }, 
                {
                    "required": [
                        "should_allocate_dynamically"
                    ]
                }
            ]
        }, 
        "recovery_plan_intent_input": {
            "title": "recovery_plan Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/recovery_plan"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/recovery_plan_metadata"
                }
            }, 
            "description": "An intentful representation of a recovery_plan"
        }, 
        "recovery_plan_intent_resource": {
            "title": "recovery_plan Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/recovery_plan_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/recovery_plan"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/recovery_plan_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a recovery_plan"
        }, 
        "recovery_plan_intent_response": {
            "title": "recovery_plan Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/recovery_plan_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/recovery_plan"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/recovery_plan_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a recovery_plan"
        }, 
        "recovery_plan_job": {
            "title": "Resources for Recovery Plan Job creation.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Recovery Plan Job name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "description": "Resources for Recovery Plan Job.", 
                    "$ref": "#/definitions/recovery_plan_job_resources"
                }
            }, 
            "description": "Resources for Recovery Plan Job creation."
        }, 
        "recovery_plan_job_def_status": {
            "title": "Recovery Plan Job status.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "validation_information": {
                    "type": "object", 
                    "description": "The errors and warnings related to the Recovery Plan validation. Validation of the Recovery Plan will be done for all the actions performed on it. If there is any validation error for action other than validation, then the Recovery Plan execution will not be done.\n", 
                    "properties": {
                        "errors_list": {
                            "items": {
                                "$ref": "#/definitions/recovery_plan_validation_message"
                            }, 
                            "type": "array", 
                            "description": "List of errors related to the Recovery Plan. These errors need to be resolved before any action can be executed on the Recovery Plan.\n"
                        }, 
                        "warnings_list": {
                            "items": {
                                "$ref": "#/definitions/recovery_plan_validation_message"
                            }, 
                            "type": "array", 
                            "description": "List of warnings related to the Recovery Plan. These warnings do not prevent actions on the Recovery Plan.\n"
                        }
                    }
                }, 
                "name": {
                    "type": "string", 
                    "description": "Recovery Plan Job name."
                }, 
                "cleanup_status": {
                    "description": "Status of cleanup performed on the Recovery Plan Job. This is applicable only for the Recovery Plan Jobs created for TEST action on the Recovery Plan.\n", 
                    "$ref": "#/definitions/recovery_plan_job_execution_phases_status"
                }, 
                "start_time": {
                    "type": "string", 
                    "description": "Time when the Recovery Plan Job was created.", 
                    "format": "date-time"
                }, 
                "execution_status": {
                    "description": "Execution status of the Recovery Plan Job.\n", 
                    "$ref": "#/definitions/recovery_plan_job_execution_phases_status"
                }, 
                "recovery_plan_specification": {
                    "required": [
                        "name", 
                        "resources"
                    ], 
                    "type": "object", 
                    "description": "Specification of the Recovery Plan on which the Recovery Plan Job is being executed.\n", 
                    "properties": {
                        "name": {
                            "type": "string", 
                            "description": "Recovery Plan name"
                        }, 
                        "resources": {
                            "$ref": "#/definitions/recovery_plan_resources"
                        }, 
                        "description": {
                            "type": "string", 
                            "description": "User provided description for the Recovery Plan."
                        }
                    }
                }, 
                "end_time": {
                    "type": "string", 
                    "description": "Time when the Recovery Plan Job execution ended.", 
                    "format": "date-time"
                }, 
                "resources": {
                    "description": "Recovery Plan Job resources.", 
                    "$ref": "#/definitions/recovery_plan_job_resources"
                }
            }, 
            "description": "Recovery Plan Job status."
        }, 
        "recovery_plan_job_execution_phases_status": {
            "title": "Execution status of phases in the Recovery Plan Job execution.", 
            "required": [
                "status", 
                "percentage_complete"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "QUEUED", 
                        "RUNNING", 
                        "COMPLETED", 
                        "FAILED", 
                        "ABORTED", 
                        "COMPLETED_WITH_WARNING", 
                        "FAILED_WITH_WARNING"
                    ], 
                    "type": "string", 
                    "description": "State of execution of the Recovery Plan Job."
                }, 
                "postprocessing_status": {
                    "description": "Status of steps performed after the recovery for the entities for the Recovery Plan Job.\n", 
                    "$ref": "#/definitions/recovery_plan_job_step_status"
                }, 
                "operation_status": {
                    "description": "Status of the steps performed for the recovery of the entities for the Recovery Plan Job.\n", 
                    "$ref": "#/definitions/recovery_plan_job_step_status"
                }, 
                "percentage_complete": {
                    "type": "integer", 
                    "description": "Percentage completed for Recovery Plan Job.", 
                    "format": "int32"
                }, 
                "preprocessing_status": {
                    "description": "Status of the steps performed before the recovery of the entities for the Recovery Plan Job.\n", 
                    "$ref": "#/definitions/recovery_plan_job_step_status"
                }
            }, 
            "description": "Execution status of three phases Preprocessing, Operation, Postprocessing in the Recovery Plan Job execution.\n"
        }, 
        "recovery_plan_job_execution_status": {
            "title": "Execution status of the Recovery Plan Job", 
            "type": "object", 
            "properties": {
                "postprocessing_status": {
                    "description": "Status of steps performed after the recovery of the entities for the Recovery Plan Job. For example, a dynamically created network on failover operation can be deleted when the VMs are migrated back to the source Availability Zone.\n", 
                    "$ref": "#/definitions/recovery_plan_job_phase_execution_status"
                }, 
                "operation_status": {
                    "description": "Status of the steps performed for the recovery of entities for the Recovery Plan Job. For example, VM will be restored from a Recovery point in case of failover.\n", 
                    "$ref": "#/definitions/recovery_plan_job_phase_execution_status"
                }, 
                "preprocessing_status": {
                    "description": "Status of the steps performed before the recovery of VMs for the Recovery Plan Job. For example, a network might be created as part of failover operation on the Recovery Plan before recovery of the VMs.\n", 
                    "$ref": "#/definitions/recovery_plan_job_phase_execution_status"
                }
            }, 
            "description": "Execution of the Recovery Plan is done in three phases Preprocessing, Operation and Postprocessing.\n"
        }, 
        "recovery_plan_job_intent_input": {
            "title": "recovery_plan_job Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/recovery_plan_job"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/recovery_plan_job_metadata"
                }
            }, 
            "description": "An intentful representation of a recovery_plan_job"
        }, 
        "recovery_plan_job_intent_resource": {
            "title": "recovery_plan_job Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/recovery_plan_job_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/recovery_plan_job"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/recovery_plan_job_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a recovery_plan_job"
        }, 
        "recovery_plan_job_intent_response": {
            "title": "recovery_plan_job Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/recovery_plan_job_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/recovery_plan_job"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/recovery_plan_job_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a recovery_plan_job"
        }, 
        "recovery_plan_job_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/recovery_plan_job_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/recovery_plan_job_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of recovery_plan_jobs"
        }, 
        "recovery_plan_job_list_metadata": {
            "title": "Metadata for recovery_plan_job list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "recovery_plan_job", 
                    "x-ntnx-enum": [
                        "recovery_plan_job"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "recovery_plan_job_list_metadata_output": {
            "title": "Metadata for recovery_plan_job list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "recovery_plan_job", 
                    "x-ntnx-enum": [
                        "recovery_plan_job"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "recovery_plan_job_metadata": {
            "title": "recovery_plan_job metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when recovery_plan_job was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "recovery_plan_job", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "recovery_plan_job"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "recovery_plan_job uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the recovery_plan_job is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when recovery_plan_job was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the recovery_plan_job"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "recovery_plan_job name", 
                    "maxLength": 64
                }
            }, 
            "description": "The recovery_plan_job kind metadata"
        }, 
        "recovery_plan_job_phase_execution_status": {
            "title": "Execution status of a phase in the Recovery Plan Job execution.", 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "QUEUED", 
                        "RUNNING", 
                        "COMPLETED", 
                        "FAILED", 
                        "ABORTED"
                    ], 
                    "type": "string", 
                    "description": "Execution state of a phase of Recovery Plan Job execution."
                }, 
                "percentage_complete": {
                    "type": "integer", 
                    "description": "Percentage completed for a phase of the Recovery Plan Job execution.\n", 
                    "format": "int32"
                }, 
                "step_execution_status_list": {
                    "items": {
                        "$ref": "#/definitions/recovery_plan_job_step_execution_status"
                    }, 
                    "type": "array", 
                    "description": "List of execution status of steps for a phase of the Recovery Plan Job execution.\n"
                }
            }, 
            "description": "Each phase of the Recovery Plan execution has an array of steps executed. A step UUID and its parent UUID can be used to form the trees for execution status of the phases in the Recovery Plan execution. A step with no parent becomes the root node of a tree. For operation phase in the Recovery Plan execution, there will be one tree for each of the stages in the Recovery Plan. UUID of a stage will be the step UUID of the root node for corresponding tree. For example, Let RP be a Recovery Plan with only one stage with UUID StageUuid and this stage has only one VM VM1. Let an action on the Recovery Plan requires two operations 'Clone VM from Snapshot' and 'Power On VM' for the VM recovery. Let a step execution staus be specified by {UUID of the step, UUID of the parent step, Execution Status}. On the execution of the Recovery Plan RP, a step with UUID StageUuid will be created. Let VM1RecoveryUuid be the UUID of the step created for handling the recovery of the VM VM1 and StepVmCloneUuid, StepVmPowerOnUuid be the uuid of the sub-steps for operations 'Clone VM from Snapshot' and 'Power On VM' for the recovery of VM1, then recovery_plan_job_stages_execution_status will be [{StageUuid, nil, Execution Status},\n {VM1RecoveryUuid, StageUuid, Execution Status},\n {StepVmCloneUuid, VM1RecoveryUuid, Execution Status},\n {StepVmPowerOnUuid, VM1RecoveryUuid, Execution Status}]\n"
        }, 
        "recovery_plan_job_reference": {
            "title": "Reference to a recovery_plan_job", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "recovery_plan_job", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "recovery_plan_job"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a recovery_plan_job"
        }, 
        "recovery_plan_job_resources": {
            "title": "Recovery Plan Job resources definition.", 
            "required": [
                "recovery_plan_reference", 
                "execution_parameters"
            ], 
            "type": "object", 
            "properties": {
                "recovery_plan_reference": {
                    "description": "Reference to the Recovery Plan for which this Recovery Plan Job is created.\n", 
                    "$ref": "#/definitions/recovery_plan_reference"
                }, 
                "execution_parameters": {
                    "required": [
                        "failed_availability_zone_list", 
                        "recovery_availability_zone_list", 
                        "action_type"
                    ], 
                    "type": "object", 
                    "description": "Parameters for execution of the Recovery Plan Job.\n", 
                    "properties": {
                        "failed_availability_zone_list": {
                            "items": {
                                "$ref": "#/definitions/availability_zone_information"
                            }, 
                            "type": "array", 
                            "description": "Availability Zones that have failed.\n"
                        }, 
                        "recovery_reference_time": {
                            "type": "string", 
                            "description": "Time with respect to which Recovery Plan Job has to be executed. This time will be used as reference time with respect to which latest snapshot will have to be restored in case of failover. For example, if failover is required to be done using snapshot created on or before yesterday '2:00' PM, then recovery_reference_time will be set to this time.\n", 
                            "format": "date-time"
                        }, 
                        "recovery_availability_zone_list": {
                            "items": {
                                "$ref": "#/definitions/availability_zone_information"
                            }, 
                            "type": "array", 
                            "description": "Availability Zones wherein entities need to be recovered.\n"
                        }, 
                        "action_type": {
                            "x-ntnx-enum": [
                                "VALIDATE", 
                                "MIGRATE", 
                                "FAILOVER", 
                                "TEST_FAILOVER"
                            ], 
                            "type": "string", 
                            "description": "Type of action performed by the Recovery Plan Job.\n"
                        }, 
                        "should_continue_on_validation_failure": {
                            "default": false, 
                            "type": "boolean", 
                            "description": "Whether to ignore the validation failures(e.g. Network mapping is missing for some networks on failed Availability Zone, Virtual network missing.) for the Recovery Plan actions MIGRATE, FAILOVER, TEST_FAILOVER and execute the Recovery Plan.\n"
                        }
                    }
                }
            }, 
            "description": "Recovery Plan Job resources definition."
        }, 
        "recovery_plan_job_response": {
            "title": "Response for a Recovery Plan Job create/update/detete request.\n", 
            "type": "object", 
            "properties": {
                "task_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the task created for handling the request.\n", 
                    "format": "UUID"
                }
            }, 
            "description": "Response for a Recovery Plan Job create/update/delete request.\n"
        }, 
        "recovery_plan_job_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "recovery_plan_job", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "recovery_plan_job"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "recovery_plan_job_step_execution_status": {
            "title": "Execution status of a step.", 
            "required": [
                "step_uuid", 
                "operation_type", 
                "status"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "QUEUED", 
                        "RUNNING", 
                        "COMPLETED", 
                        "FAILED", 
                        "ABORTED"
                    ], 
                    "type": "string", 
                    "description": "Status of this step."
                }, 
                "error_detail": {
                    "type": "string", 
                    "description": "The error detail for the step failure."
                }, 
                "any_entity_reference_list": {
                    "items": {
                        "$ref": "#/definitions/reference"
                    }, 
                    "type": "array", 
                    "description": "Reference to the list of the entities on which the step is performing action.\n"
                }, 
                "start_time": {
                    "type": "string", 
                    "description": "Time when this step started.", 
                    "format": "date-time"
                }, 
                "step_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of a step.", 
                    "format": "UUID"
                }, 
                "step_sequence_number": {
                    "type": "integer", 
                    "description": "Sequence number of the step among its siblings. This can be used for ordering the sub-steps for a step.\n", 
                    "format": "int64"
                }, 
                "end_time": {
                    "type": "string", 
                    "description": "Time when this step ended.", 
                    "format": "date-time"
                }, 
                "operation_type": {
                    "x-ntnx-enum": [
                        "DELAY", 
                        "STAGE_RECOVERY", 
                        "ENTITY_RECOVERY", 
                        "ENTITY_MIGRATION", 
                        "ENTITY_RESTORATION", 
                        "ENTITY_SNAPSHOT_SYNC", 
                        "VM_POWER_ON", 
                        "ASSIGN_FLOATING_IP", 
                        "IP_CUSTOMIZATION", 
                        "NETWORK_CREATION", 
                        "NETWORK_DELETION", 
                        "ENTITIES_CLEANUP"
                    ], 
                    "type": "string", 
                    "description": "Type of operation being performed."
                }, 
                "parent_step_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the parent step.\n", 
                    "format": "UUID"
                }, 
                "message": {
                    "type": "string", 
                    "description": "User readable message for the action being done for the step.\n"
                }, 
                "error_code": {
                    "x-ntnx-enum": [
                        "RECOVERY_POINT_CREATION_FAILED", 
                        "RECOVERY_POINT_REPLICATION_FAILED", 
                        "AZ_NOT_REACHABLE", 
                        "OPERATION_TIMED_OUT", 
                        "ENTITY_NOT_FOUND", 
                        "VNIC_ATTACHMENT_FAILED", 
                        "INTERNAL_ERROR"
                    ], 
                    "type": "string", 
                    "description": "The error code for the step failure."
                }, 
                "percentage_complete": {
                    "type": "integer", 
                    "description": "Percentage of step completed.", 
                    "format": "int32"
                }
            }, 
            "description": "A step executes an action and can have sub-steps required to perfom the action. Each step has its own UUID, parent UUID and status of the action it is/was performing.\n"
        }, 
        "recovery_plan_job_step_status": {
            "title": "Status of a step in the Recovery Plan Job execution.", 
            "required": [
                "status", 
                "percentage_complete"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "QUEUED", 
                        "RUNNING", 
                        "COMPLETED", 
                        "FAILED", 
                        "ABORTED"
                    ], 
                    "type": "string", 
                    "description": "State of a step."
                }, 
                "percentage_complete": {
                    "type": "integer", 
                    "description": "Percentage completed for a step.", 
                    "format": "int32"
                }
            }, 
            "description": "Status of a step in the Recovery Plan Job execution."
        }, 
        "recovery_plan_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/recovery_plan_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/recovery_plan_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of recovery_plans"
        }, 
        "recovery_plan_list_metadata": {
            "title": "Metadata for recovery_plan list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "recovery_plan", 
                    "x-ntnx-enum": [
                        "recovery_plan"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "recovery_plan_list_metadata_output": {
            "title": "Metadata for recovery_plan list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "recovery_plan", 
                    "x-ntnx-enum": [
                        "recovery_plan"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "recovery_plan_metadata": {
            "title": "recovery_plan metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when recovery_plan was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "recovery_plan", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "recovery_plan"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "recovery_plan uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the recovery_plan is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when recovery_plan was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the recovery_plan"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "recovery_plan name", 
                    "maxLength": 64
                }
            }, 
            "description": "The recovery_plan kind metadata"
        }, 
        "recovery_plan_network": {
            "title": "Network configuration for the Recovery Plan\n", 
            "type": "object", 
            "properties": {
                "virtual_network_reference": {
                    "description": "Reference to the Virtual Network.", 
                    "$ref": "#/definitions/virtual_network_reference"
                }, 
                "subnet_list": {
                    "items": {
                        "$ref": "#/definitions/recovery_plan_subnet_config"
                    }, 
                    "type": "array", 
                    "description": "List of subnets for the network.\n"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the network.\n", 
                    "maxLength": 64
                }
            }, 
            "description": "Network configuration to be used for performing network mapping and IP preservation/mapping on Recovery Plan execution.\n"
        }, 
        "recovery_plan_reference": {
            "title": "Reference to a recovery_plan", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "recovery_plan", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "recovery_plan"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a recovery_plan"
        }, 
        "recovery_plan_resources": {
            "title": "Recovery Plan resources", 
            "type": "object", 
            "properties": {
                "stage_list": {
                    "items": {
                        "$ref": "#/definitions/recovery_plan_stage"
                    }, 
                    "type": "array", 
                    "description": "Input for the stages of the Recovery Plan. Each stage will perform a predefined type of task. For example, a stage can perform the recovery of the entities specified in a stage.\n"
                }, 
                "parameters": {
                    "type": "object", 
                    "description": "Parameters for the Recovery Plan.\n", 
                    "properties": {
                        "floating_ip_assignment_list": {
                            "items": {
                                "required": [
                                    "availability_zone_url"
                                ], 
                                "type": "object", 
                                "properties": {
                                    "availability_zone_url": {
                                        "type": "string", 
                                        "description": "URL of the Availability Zone.\n"
                                    }, 
                                    "vm_ip_assignment_list": {
                                        "items": {
                                            "required": [
                                                "vm_reference", 
                                                "vm_nic_information"
                                            ], 
                                            "type": "object", 
                                            "properties": {
                                                "test_floating_ip_config": {
                                                    "description": "Configuration for floating IP assignment on test failover.\n", 
                                                    "$ref": "#/definitions/recovery_plan_floating_ip_config"
                                                }, 
                                                "recovery_floating_ip_config": {
                                                    "description": "Configuration for floating IP assignment on failover.\n", 
                                                    "$ref": "#/definitions/recovery_plan_floating_ip_config"
                                                }, 
                                                "vm_reference": {
                                                    "description": "Reference to the VM entity.", 
                                                    "$ref": "#/definitions/vm_reference"
                                                }, 
                                                "vm_nic_information": {
                                                    "required": [
                                                        "uuid"
                                                    ], 
                                                    "type": "object", 
                                                    "description": "Information about vnic to which floating IP has to be assigned.\n", 
                                                    "properties": {
                                                        "ip": {
                                                            "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                                                            "type": "string", 
                                                            "description": "IP address associated with vnic for which floating IP has to be assigned on failover.\n"
                                                        }, 
                                                        "uuid": {
                                                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                                            "type": "string", 
                                                            "description": "Uuid of the vnic of the VM to which floating IP has to be assigned.\n", 
                                                            "format": "UUID"
                                                        }
                                                    }
                                                }
                                            }
                                        }, 
                                        "type": "array", 
                                        "description": "IP assignment for VMs upon recovery in the specified Availability Zone.\n"
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Floating IP assignment for VMs upon recovery in an Availability Zone. This is applicable only for the public cloud Availability Zones.\n"
                        }, 
                        "network_mapping_list": {
                            "items": {
                                "type": "object", 
                                "properties": {
                                    "availability_zone_network_mapping_list": {
                                        "items": {
                                            "required": [
                                                "availability_zone_url"
                                            ], 
                                            "type": "object", 
                                            "properties": {
                                                "recovery_network": {
                                                    "description": "Network in which VMs will be recovered on migrate/ failover action on the Recovery Plan.\n", 
                                                    "$ref": "#/definitions/recovery_plan_network"
                                                }, 
                                                "availability_zone_url": {
                                                    "type": "string", 
                                                    "description": "URL of the Availability Zone.\n"
                                                }, 
                                                "test_network": {
                                                    "description": "Network in which VMs will be recovered on test failover action on the Recovery Plan.\n", 
                                                    "$ref": "#/definitions/recovery_plan_network"
                                                }
                                            }
                                        }, 
                                        "type": "array", 
                                        "description": "Mapping of networks across the Availability Zones.\n"
                                    }
                                }
                            }, 
                            "type": "array", 
                            "description": "Network mappings to be used for the Recovery Plan. This will be represented by array of network mappings across the Availability Zones. Each entry of network mapping will have Availability Zone URL, recovery and test network information. For example, Let RNx denote the recovery network information and TNx denote the test network information. As per below matrix, while performing failover action from Availability Zone AZ1 to AZ2, RN1 will be mapped to RN4 and while performing test failover from AZ1 to AZ2, RN1 will be mapped to TN4. [[(AZ1 URL, RN1, TN1), (AZ2 URL, RN4, TN4),\n  (AZ3 URL, RN7, TN7)],\n [(AZ1 URL, RN2, TN2), (AZ2 URL, RN5, TN5),\n  (AZ3 URL, RN8, TN8)],\n [(AZ1 URL, RN3, TN3), (AZ2 URL, RN6, TN6)]]\n"
                        }
                    }
                }
            }, 
            "description": "Recovery Plan resources"
        }, 
        "recovery_plan_stage": {
            "title": "Information about a stage in the Recovery Plan", 
            "required": [
                "stage_work"
            ], 
            "type": "object", 
            "properties": {
                "stage_work": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "recover_entities"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "recover_entities": {
                            "description": "Information about entities to be recovered. This can be either explicit entity list or entity filter to identify list of entities to be recovered.\n", 
                            "$ref": "#/definitions/recover_entities"
                        }
                    }, 
                    "description": "Information about work to be performed as part of this stage on execution. Only one of recover_entities or script has to be provided.\n"
                }, 
                "stage_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of stage.", 
                    "format": "UUID"
                }, 
                "delay_time_secs": {
                    "type": "integer", 
                    "description": "Amount of time in seconds to delay the execution of next stage after execution of current stage.\n", 
                    "format": "int64"
                }
            }, 
            "description": "A stage specifies the work to be performed when the Recovery Plan is executed. A stage work can be execute an user script or recover entities in case of failover. If there are multiple entities to recover in a stage, all of them will be recovered in parallel.\n"
        }, 
        "recovery_plan_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "recovery_plan", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "recovery_plan"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "recovery_plan_subnet_config": {
            "title": "Subnet configuration for the Recovery Plan\n", 
            "required": [
                "gateway_ip", 
                "prefix_length"
            ], 
            "type": "object", 
            "properties": {
                "gateway_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Gateway IP address for the subnet.\n"
                }, 
                "external_connectivity_state": {
                    "x-ntnx-enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "External connectivity state of the subnet. This is applicable only for the subnet to be created in public cloud Availability Zone.\n"
                }, 
                "prefix_length": {
                    "format": "int32", 
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Prefix length for the subnet.\n", 
                    "maximum": 32
                }
            }, 
            "description": "Subnet configuration for network mapping in the Recovery Plan.\n"
        }, 
        "recovery_plan_validation_message": {
            "title": "Validation message for Recovery Plan validation report.", 
            "required": [
                "validation_type", 
                "message"
            ], 
            "type": "object", 
            "properties": {
                "message": {
                    "type": "string", 
                    "description": "Message describing validation error or warning."
                }, 
                "validation_type": {
                    "x-ntnx-enum": [
                        "ENTITY", 
                        "NETWORK", 
                        "RECOVERY_POINT", 
                        "CATEGORY", 
                        "CONNECTIVITY", 
                        "INFRASTRUCTURE", 
                        "LICENSE"
                    ], 
                    "type": "string", 
                    "description": "Type of validation."
                }, 
                "affected_any_reference_list": {
                    "items": {
                        "$ref": "#/definitions/reference"
                    }, 
                    "type": "array", 
                    "description": "List of affected entities for this validation message."
                }, 
                "impact_message_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Impact of the validation message on the Recovery Plan actions.\n"
                }, 
                "cause_and_resolution_message_list": {
                    "items": {
                        "required": [
                            "cause"
                        ], 
                        "type": "object", 
                        "properties": {
                            "resolution_list": {
                                "items": {
                                    "type": "string"
                                }, 
                                "type": "array", 
                                "description": "Steps to resolve the warning or error."
                            }, 
                            "cause": {
                                "type": "string", 
                                "description": "Cause of the validation warning or error."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of causes and resolutions for the validation warning or error.\n"
                }
            }, 
            "description": "Validation message used to report Recovery Plan errors and warnings.\n"
        }, 
        "reference": {
            "title": "Reference", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }
            }, 
            "description": "Reference to a kind"
        }, 
        "remote_connection": {
            "title": "Remote connection information", 
            "required": [
                "name", 
                "description", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Remote connection name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/remote_connection_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Remote connection description", 
                    "maxLength": 1000
                }
            }, 
            "description": "Remote connection information."
        }, 
        "remote_connection_credential": {
            "title": "Credential to connect with remote endpoint", 
            "type": "object", 
            "properties": {
                "auth_type": {
                    "x-ntnx-enum": [
                        "BASIC", 
                        "BEARER"
                    ], 
                    "type": "string", 
                    "description": "Type of credentials to use"
                }, 
                "bearer_token": {
                    "type": "string", 
                    "description": "token to use with bearer authorization, must for BEARER auth_type\n"
                }, 
                "basic_credential": {
                    "$ref": "#/definitions/basic_credential"
                }
            }, 
            "description": "Credentials to connect with remote endpoint"
        }, 
        "remote_connection_def_status": {
            "title": "Remote connection status definition", 
            "required": [
                "name", 
                "description", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the remote connection entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Remote connection name"
                }, 
                "resources": {
                    "$ref": "#/definitions/remote_connection_resources"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Remote connection description"
                }
            }, 
            "description": "Remote connection status definition"
        }, 
        "remote_connection_info": {
            "title": "Connection info", 
            "type": "object", 
            "properties": {
                "public_key": {
                    "type": "string", 
                    "description": "public key"
                }, 
                "token": {
                    "$ref": "#/definitions/remote_connection_token"
                }, 
                "peer_remote_connection_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Connection uuid for remote Peer", 
                    "format": "UUID"
                }, 
                "node_address_list": {
                    "items": {
                        "$ref": "#/definitions/address"
                    }, 
                    "type": "array"
                }, 
                "cluster_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of cluster", 
                    "format": "UUID"
                }, 
                "cluster_function": {
                    "x-ntnx-enum": [
                        "ACCESS_GRANT_SYSTEM", 
                        "AOS", 
                        "JUMP_BOX", 
                        "PRISM_CENTRAL", 
                        "XI_PORTAL"
                    ], 
                    "type": "string", 
                    "description": "cluster function string"
                }, 
                "additional_capabilities": {
                    "items": {
                        "x-ntnx-enum": [
                            "SEED_REMOTE_AZ", 
                            "IGNORE_MISSING_REMOTE_PORT"
                        ], 
                        "type": "string", 
                        "description": "Additional capabilities to enable. Set by Initiator."
                    }, 
                    "type": "array"
                }
            }, 
            "description": "Connection information"
        }, 
        "remote_connection_intent_input": {
            "title": "remote_connection Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/remote_connection"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/remote_connection_metadata"
                }
            }, 
            "description": "An intentful representation of a remote_connection"
        }, 
        "remote_connection_intent_resource": {
            "title": "remote_connection Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/remote_connection_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/remote_connection"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/remote_connection_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a remote_connection"
        }, 
        "remote_connection_intent_response": {
            "title": "remote_connection Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/remote_connection_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/remote_connection"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/remote_connection_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a remote_connection"
        }, 
        "remote_connection_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/remote_connection_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/remote_connection_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of remote_connections"
        }, 
        "remote_connection_list_metadata": {
            "title": "Metadata for remote_connection list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "remote_connection", 
                    "x-ntnx-enum": [
                        "remote_connection"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "remote_connection_list_metadata_output": {
            "title": "Metadata for remote_connection list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "remote_connection", 
                    "x-ntnx-enum": [
                        "remote_connection"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "remote_connection_metadata": {
            "title": "remote_connection metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when remote_connection was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "remote_connection", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "remote_connection"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "remote_connection uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the remote_connection is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when remote_connection was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the remote_connection"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "remote_connection name", 
                    "maxLength": 64
                }
            }, 
            "description": "The remote_connection kind metadata"
        }, 
        "remote_connection_reference": {
            "title": "Reference to a remote_connection", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "remote_connection", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "remote_connection"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a remote_connection"
        }, 
        "remote_connection_resources": {
            "title": "Remote connection resources", 
            "type": "object", 
            "properties": {
                "local_connection_info": {
                    "$ref": "#/definitions/remote_connection_info"
                }, 
                "role": {
                    "default": "INITIATOR", 
                    "x-ntnx-enum": [
                        "INITIATOR", 
                        "ACCEPTOR"
                    ], 
                    "type": "string", 
                    "description": "Role of the cluster in remote connection"
                }, 
                "remote_address": {
                    "$ref": "#/definitions/address"
                }, 
                "remote_connection_info": {
                    "$ref": "#/definitions/remote_connection_info"
                }, 
                "remote_credential": {
                    "$ref": "#/definitions/remote_connection_credential"
                }
            }, 
            "description": "Remote connection resources"
        }, 
        "remote_connection_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "remote_connection", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "remote_connection"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "remote_connection_token": {
            "title": "Token info", 
            "type": "object", 
            "properties": {
                "access_token": {
                    "type": "string", 
                    "description": "Access token"
                }, 
                "client_secret": {
                    "type": "string", 
                    "description": "Client Secret"
                }, 
                "refresh_token_endpoint": {
                    "type": "string", 
                    "description": "Refresh token endpoint"
                }, 
                "refresh_token": {
                    "type": "string", 
                    "description": "Refresh token"
                }, 
                "client_id": {
                    "type": "string", 
                    "description": "Client Id"
                }
            }, 
            "description": "Token information for communicating with remote peer"
        }, 
        "remote_rpc_request_input": {
            "title": "Request spec for performing remote RPC execution", 
            "required": [
                "rpc_payload"
            ], 
            "properties": {
                "rpc_payload": {
                    "type": "string", 
                    "description": "Argument to be passed to the RPC in bytes.", 
                    "format": "bytes"
                }
            }, 
            "description": "Request spec for performing remote RPC execution."
        }, 
        "repetition_criteria": {
            "title": "Repetition Criteria.", 
            "required": [
                "entity_type"
            ], 
            "type": "object", 
            "properties": {
                "repetition_rule": {
                    "type": "string", 
                    "description": "Rule based on which the widget/section will be repeating."
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Type of the entity."
                }
            }, 
            "description": "Criteria for repeating a widget/section."
        }, 
        "report_config": {
            "title": "Report Config creation/modification spec", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Name of the report config.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "title": "Report Config Resources.", 
                    "required": [
                        "template"
                    ], 
                    "type": "object", 
                    "properties": {
                        "retention_policy": {
                            "$ref": "#/definitions/retention_policy"
                        }, 
                        "description": {
                            "type": "string", 
                            "description": "Description of the common report config.", 
                            "maxLength": 1000
                        }, 
                        "end_time_offset_secs": {
                            "type": "integer", 
                            "description": "End time for data collection during report generation.", 
                            "format": "int64"
                        }, 
                        "schedule": {
                            "$ref": "#/definitions/schedule"
                        }, 
                        "template_spec_version": {
                            "type": "string", 
                            "description": "Version of the template spec."
                        }, 
                        "start_time_offset_secs": {
                            "type": "integer", 
                            "description": "Start time for data collection during report generation.", 
                            "format": "int64"
                        }, 
                        "generation_format": {
                            "items": {
                                "x-ntnx-enum": [
                                    "PDF", 
                                    "CSV"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List specifying the formats in which report is to be created."
                        }, 
                        "template": {
                            "$ref": "#/definitions/report_template"
                        }, 
                        "notification_policy": {
                            "$ref": "#/definitions/notification_policy"
                        }
                    }, 
                    "description": "Report config resources definition."
                }
            }, 
            "description": "Report Config creation/modification spec."
        }, 
        "report_config_def_status": {
            "title": "Report Config creation/modification spec.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The state of the report config entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the report config."
                }, 
                "resources": {
                    "title": "Report Config Resources.", 
                    "type": "object", 
                    "properties": {
                        "retention_policy": {
                            "$ref": "#/definitions/retention_policy"
                        }, 
                        "description": {
                            "type": "string", 
                            "description": "Description of the common report config."
                        }, 
                        "end_time_offset_secs": {
                            "type": "integer", 
                            "description": "Offset for end time for data collection during report generation.", 
                            "format": "int64"
                        }, 
                        "schedule": {
                            "$ref": "#/definitions/schedule"
                        }, 
                        "template_spec_version": {
                            "type": "string", 
                            "description": "Version of the template spec."
                        }, 
                        "generation_format": {
                            "items": {
                                "x-ntnx-enum": [
                                    "PDF", 
                                    "CSV"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List specifying the formats in which report is to be created."
                        }, 
                        "start_time_offset_secs": {
                            "type": "integer", 
                            "description": "Offset for start time for data collection during report generation.", 
                            "format": "int64"
                        }, 
                        "template": {
                            "$ref": "#/definitions/report_template"
                        }, 
                        "notification_policy": {
                            "$ref": "#/definitions/notification_policy"
                        }, 
                        "out_of_box_report": {
                            "type": "boolean", 
                            "description": "Flag specifying if Report Config is a pre defined report."
                        }
                    }, 
                    "description": "Description of report config."
                }
            }, 
            "description": "Report Config creation/modification spec."
        }, 
        "report_config_intent_input": {
            "title": "report_config Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/report_config"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/report_config_metadata"
                }
            }, 
            "description": "An intentful representation of a report_config"
        }, 
        "report_config_intent_resource": {
            "title": "report_config Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/report_config_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/report_config"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/report_config_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a report_config"
        }, 
        "report_config_intent_response": {
            "title": "report_config Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/report_config_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/report_config"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/report_config_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a report_config"
        }, 
        "report_config_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/report_config_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/report_config_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of report_configs"
        }, 
        "report_config_list_metadata": {
            "title": "Metadata for report_config list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "report_config", 
                    "x-ntnx-enum": [
                        "report_config"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "report_config_list_metadata_output": {
            "title": "Metadata for report_config list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "report_config", 
                    "x-ntnx-enum": [
                        "report_config"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "report_config_metadata": {
            "title": "report_config metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when report_config was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "report_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "report_config"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "report_config uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the report_config is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when report_config was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the report_config"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "report_config name", 
                    "maxLength": 64
                }
            }, 
            "description": "The report_config kind metadata"
        }, 
        "report_config_reference": {
            "title": "Reference to a report_config", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "report_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "report_config"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a report_config"
        }, 
        "report_config_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "report_config", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "report_config"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "report_customization": {
            "title": "Report customizations.", 
            "type": "object", 
            "properties": {
                "footer_html": {
                    "type": "string", 
                    "description": "Custom footer HTML for the report."
                }, 
                "logo_image_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Custom logo for the report as selected by the user.", 
                    "format": "UUID"
                }, 
                "header_html": {
                    "type": "string", 
                    "description": "Custom header HTML for the report."
                }, 
                "css_style_sheet": {
                    "type": "string", 
                    "description": "Global cascadable style for the report."
                }, 
                "overridable_style_sheet": {
                    "type": "string", 
                    "description": "Global overridable style for the report in the form of a\nserialized JSON. This will be used for page number style in header.\n"
                }
            }, 
            "description": "Report-level customizations."
        }, 
        "report_instance": {
            "title": "Report instance definition.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Report instance name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "title": "Report Instance.", 
                    "required": [
                        "report_config_reference"
                    ], 
                    "type": "object", 
                    "properties": {
                        "description": {
                            "type": "string", 
                            "description": "Description of the report. This will be part of generated report.\n", 
                            "maxLength": 1000
                        }, 
                        "recipient_list": {
                            "items": {
                                "$ref": "#/definitions/recipient"
                            }, 
                            "type": "array", 
                            "description": "Recipients in addition to specified on the report config.", 
                            "maxItems": 100
                        }, 
                        "data_start_time": {
                            "type": "string", 
                            "description": "UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data\ncollection start point.\n", 
                            "format": "date-time"
                        }, 
                        "generation_format": {
                            "items": {
                                "x-ntnx-enum": [
                                    "PDF", 
                                    "CSV"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List specifying the formats in which report is to be created."
                        }, 
                        "recipient_format": {
                            "items": {
                                "x-ntnx-enum": [
                                    "PDF", 
                                    "CSV"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List specifying the formats in which report is to be sent."
                        }, 
                        "save_instance": {
                            "type": "boolean", 
                            "description": "Generated instance saved or not."
                        }, 
                        "data_end_time": {
                            "type": "string", 
                            "description": "UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data\ncollection end point.\n", 
                            "format": "date-time"
                        }, 
                        "runtime_key_values": {
                            "$ref": "#/definitions/generic_key_value_pair"
                        }, 
                        "report_config_reference": {
                            "$ref": "#/definitions/report_config_reference"
                        }
                    }, 
                    "description": "Report instance resources."
                }
            }, 
            "description": "Report instance creation/modification spec."
        }, 
        "report_instance_def_status": {
            "title": "Report instance definition.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The state of the cluster entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Report instance name."
                }, 
                "resources": {
                    "title": "Report Instance.", 
                    "type": "object", 
                    "properties": {
                        "description": {
                            "type": "string", 
                            "description": "Description of the report."
                        }, 
                        "recipient_list": {
                            "items": {
                                "$ref": "#/definitions/recipient"
                            }, 
                            "type": "array", 
                            "description": "Recipients in addition to specified on the report config.\n"
                        }, 
                        "error_message": {
                            "type": "string", 
                            "description": "Error message when generation failed."
                        }, 
                        "data_start_time": {
                            "type": "string", 
                            "description": "UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data\ncollection start point.\n", 
                            "format": "date-time"
                        }, 
                        "generation_format": {
                            "items": {
                                "x-ntnx-enum": [
                                    "PDF", 
                                    "CSV"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List specifying the formats in which report is to be created."
                        }, 
                        "recipient_format": {
                            "items": {
                                "x-ntnx-enum": [
                                    "PDF", 
                                    "CSV"
                                ], 
                                "type": "string"
                            }, 
                            "type": "array", 
                            "description": "List specifying the formats in which report is to be sent."
                        }, 
                        "save_instance": {
                            "type": "boolean", 
                            "description": "Generated instance saved or not."
                        }, 
                        "data_end_time": {
                            "type": "string", 
                            "description": "UTC date and time in \"%Y-%m-%d %H:%M:%S\" format for data\ncollection end point.\n", 
                            "format": "date-time"
                        }, 
                        "runtime_key_values": {
                            "$ref": "#/definitions/generic_key_value_pair"
                        }, 
                        "generation_status": {
                            "type": "string", 
                            "description": "Generation status of the report."
                        }, 
                        "report_config_reference": {
                            "$ref": "#/definitions/report_config_reference"
                        }
                    }, 
                    "description": "Report instance resources."
                }
            }, 
            "description": "Report instance creation/modification spec."
        }, 
        "report_instance_intent_input": {
            "title": "report_instance Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/report_instance"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/report_instance_metadata"
                }
            }, 
            "description": "An intentful representation of a report_instance"
        }, 
        "report_instance_intent_resource": {
            "title": "report_instance Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/report_instance_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/report_instance"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/report_instance_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a report_instance"
        }, 
        "report_instance_intent_response": {
            "title": "report_instance Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/report_instance_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/report_instance"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/report_instance_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a report_instance"
        }, 
        "report_instance_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/report_instance_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/report_instance_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of report_instances"
        }, 
        "report_instance_list_metadata": {
            "title": "Metadata for report_instance list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "report_instance", 
                    "x-ntnx-enum": [
                        "report_instance"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "report_instance_list_metadata_output": {
            "title": "Metadata for report_instance list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "report_instance", 
                    "x-ntnx-enum": [
                        "report_instance"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "report_instance_metadata": {
            "title": "report_instance metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when report_instance was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "report_instance", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "report_instance"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "report_instance uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the report_instance is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when report_instance was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the report_instance"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "report_instance name", 
                    "maxLength": 64
                }
            }, 
            "description": "The report_instance kind metadata"
        }, 
        "report_instance_reference": {
            "title": "Reference to a report_instance", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "report_instance", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "report_instance"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a report_instance"
        }, 
        "report_instance_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "report_instance", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "report_instance"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "report_notification_spec": {
            "title": "Report Instance notification spec.", 
            "required": [
                "report_config_reference"
            ], 
            "type": "object", 
            "properties": {
                "recipient_format": {
                    "items": {
                        "x-ntnx-enum": [
                            "PDF", 
                            "CSV"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List specifying the formats in which report is to be sent."
                }, 
                "instance_reference_list": {
                    "items": {
                        "$ref": "#/definitions/report_instance_reference"
                    }, 
                    "type": "array", 
                    "description": "List of the instances for which email should be sent.", 
                    "maxItems": 32
                }, 
                "recipient_list": {
                    "items": {
                        "$ref": "#/definitions/recipient"
                    }, 
                    "type": "array", 
                    "description": "Recipients in addition to those specified in report config.", 
                    "maxItems": 100
                }, 
                "email_subject": {
                    "type": "string", 
                    "description": "Subject of the email that will be sent.", 
                    "maxLength": 256
                }, 
                "email_body": {
                    "type": "string", 
                    "description": "Custom content of the email.", 
                    "maxLength": 1000
                }, 
                "report_config_reference": {
                    "$ref": "#/definitions/report_config_reference"
                }
            }, 
            "description": "Report Instance notification spec."
        }, 
        "report_template": {
            "title": "Report Template.", 
            "required": [
                "template_rows"
            ], 
            "type": "object", 
            "properties": {
                "report_customization": {
                    "description": "Report level customizations.", 
                    "$ref": "#/definitions/report_customization"
                }, 
                "template_rows": {
                    "items": {
                        "$ref": "#/definitions/template_row"
                    }, 
                    "type": "array", 
                    "description": "List of template rows."
                }, 
                "sections": {
                    "items": {
                        "$ref": "#/definitions/section"
                    }, 
                    "type": "array", 
                    "description": "List of sections."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the report template.", 
                    "maxLength": 64
                }
            }, 
            "description": "Report Template."
        }, 
        "resource_charge_list_metadata": {
            "title": "Metadata for resource_charge list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "resource_charge", 
                    "x-ntnx-enum": [
                        "resource_charge"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "resource_charge_list_metadata_output": {
            "title": "Metadata for resource_charge list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "resource_charge", 
                    "x-ntnx-enum": [
                        "resource_charge"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "resource_charge_metadata": {
            "title": "resource_charge metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when resource_charge was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "resource_charge", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "resource_charge"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "resource_charge uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the resource_charge is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when resource_charge was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the resource_charge"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "resource_charge name", 
                    "maxLength": 64
                }
            }, 
            "description": "The resource_charge kind metadata"
        }, 
        "resource_charge_reference": {
            "title": "Reference to a resource_charge", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "resource_charge", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "resource_charge"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a resource_charge"
        }, 
        "resource_charge_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "resource_charge", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "resource_charge"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "resource_domain_list_metadata": {
            "title": "Metadata for resource_domain list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "resource_domain", 
                    "x-ntnx-enum": [
                        "resource_domain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "resource_domain_list_metadata_output": {
            "title": "Metadata for resource_domain list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "resource_domain", 
                    "x-ntnx-enum": [
                        "resource_domain"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "resource_domain_metadata": {
            "title": "resource_domain metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when resource_domain was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "resource_domain", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "resource_domain"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "resource_domain uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the resource_domain is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when resource_domain was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the resource_domain"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "resource_domain name", 
                    "maxLength": 64
                }
            }, 
            "description": "The resource_domain kind metadata"
        }, 
        "resource_domain_reference": {
            "title": "Reference to a resource_domain", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "resource_domain", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "resource_domain"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a resource_domain"
        }, 
        "resource_domain_resources_status": {
            "title": "Resource Domain Status", 
            "required": [
                "resources"
            ], 
            "properties": {
                "resources": {
                    "items": {
                        "$ref": "#/definitions/resource_utilization_status"
                    }, 
                    "type": "array", 
                    "description": "The utilization/limit for resource types"
                }
            }, 
            "description": "The status for a resource domain (limits and values)"
        }, 
        "resource_domain_spec": {
            "title": "Resource Domain Spec", 
            "properties": {
                "resources": {
                    "items": {
                        "$ref": "#/definitions/resource_utilization_spec"
                    }, 
                    "type": "array", 
                    "description": "The utilization limits for resource types"
                }
            }, 
            "description": "Resource domain specification (limits)"
        }, 
        "resource_domain_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "resource_domain", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "resource_domain"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "resource_upload_response": {
            "title": "Report resources upload response.", 
            "type": "object", 
            "properties": {
                "resource_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the resource uploaded.", 
                    "format": "UUID"
                }
            }, 
            "description": "Report resources upload response."
        }, 
        "resource_utilization_spec": {
            "title": "Resource Utilization Specification", 
            "required": [
                "resource_type"
            ], 
            "properties": {
                "limit": {
                    "type": "integer", 
                    "description": "The resource consumption limit"
                }, 
                "resource_type": {
                    "x-ntnx-enum": [
                        "STORAGE", 
                        "MEMORY", 
                        "VCPUS", 
                        "VMS"
                    ], 
                    "type": "string", 
                    "description": "The type of resource (i.e. storage, CPUs)"
                }
            }, 
            "description": "specify the limits and units for a resource type"
        }, 
        "resource_utilization_status": {
            "title": "Resource Utilization Status", 
            "required": [
                "resource_type", 
                "units", 
                "value"
            ], 
            "properties": {
                "units": {
                    "type": "string", 
                    "description": "The units of the resource type"
                }, 
                "limit": {
                    "type": "integer", 
                    "description": "The resource consumption limit (unspecified is unlimited)"
                }, 
                "resource_type": {
                    "type": "string", 
                    "description": "The type of resource (for example storage, CPUs)"
                }, 
                "value": {
                    "type": "integer", 
                    "description": "The amount of resource consumed"
                }
            }, 
            "description": "stores resource utilization and limits for a domain"
        }, 
        "result": {
            "title": "Search Result Definition", 
            "type": "object", 
            "properties": {
                "disambiguated_searches": {
                    "$ref": "#/definitions/perspective"
                }, 
                "active_perspective": {
                    "$ref": "#/definitions/perspective"
                }, 
                "perspective_group_list": {
                    "items": {
                        "$ref": "#/definitions/perspective_link_group"
                    }, 
                    "type": "array", 
                    "description": "Each result contains a set of perspectives links eg. summary,\nentities, alerts, metrics, etc.. These are used to populate the left\nhand navigation panel. These perspective links can be grouped together\ninto different groups. So we send back a list of such perspective\ngroups.\n"
                }
            }, 
            "description": "Object describing the search query result."
        }, 
        "retention_policy": {
            "title": "Generated Report retention policy.", 
            "type": "object", 
            "properties": {
                "retention_time_secs": {
                    "type": "integer", 
                    "description": "Retention period in seconds for the generated reports.", 
                    "format": "int64"
                }, 
                "instance_count": {
                    "type": "integer", 
                    "description": "Number of the instances to be be retained.", 
                    "format": "int64"
                }
            }, 
            "description": "Retention policy for generated reports. Only one of retention_time_secs and instance_count\nshould be specified.\n"
        }, 
        "rewrite_rule": {
            "title": "Rewrite rule", 
            "required": [
                "regex", 
                "replacement"
            ], 
            "type": "object", 
            "properties": {
                "regex": {
                    "type": "string", 
                    "maxLength": 260
                }, 
                "replacement": {
                    "type": "string", 
                    "maxLength": 260
                }
            }, 
            "description": "Rule to rewrite api endpoints."
        }, 
        "right_hand_side": {
            "description": "The right hand side of an expression.", 
            "title": "The right hand side (RHS) of an expression.", 
            "type": "object", 
            "properties": {
                "collection": {
                    "x-ntnx-enum": [
                        "ALL", 
                        "SELF_OWNED"
                    ], 
                    "type": "string", 
                    "description": "A representative term for supported groupings of entities. ALL = All the entities of a given kind. SELF_OWNED = The entities of a given kind, that are owned by the user.\n"
                }, 
                "categories": {
                    "additionalProperties": {
                        "items": {
                            "type": "string"
                        }, 
                        "type": "array"
                    }, 
                    "type": "object", 
                    "description": "The category values represented as a dictionary of key -> list of values. e.g.{\"env\":[\"env1\", \"env2\"]}\n"
                }, 
                "uuid_list": {
                    "items": {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "type": "string", 
                        "format": "UUID"
                    }, 
                    "type": "array", 
                    "description": "The explicit list of UUIDs for the given kind."
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "collection"
                    ]
                }, 
                {
                    "required": [
                        "categories"
                    ]
                }, 
                {
                    "required": [
                        "uuid_list"
                    ]
                }
            ]
        }, 
        "role": {
            "title": "Role.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Role name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "permission_reference_list": {
                            "items": {
                                "$ref": "#/definitions/permission_reference"
                            }, 
                            "type": "array", 
                            "description": "List of permission references."
                        }
                    }, 
                    "title": "Role Resources."
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the role.", 
                    "maxLength": 1000
                }
            }, 
            "description": "Role Input Definition."
        }, 
        "role_def_status": {
            "title": "Role status definition.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the role entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Role name."
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "permission_reference_list": {
                            "items": {
                                "$ref": "#/definitions/permission_reference"
                            }, 
                            "type": "array", 
                            "description": "List of permission entities."
                        }
                    }, 
                    "title": "Role Resources."
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description or user annotation for the role."
                }
            }, 
            "description": "Role status definition."
        }, 
        "role_intent_input": {
            "title": "role Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/role"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/role_metadata"
                }
            }, 
            "description": "An intentful representation of a role"
        }, 
        "role_intent_resource": {
            "title": "role Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/role_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/role"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/role_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a role"
        }, 
        "role_intent_response": {
            "title": "role Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/role_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/role"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/role_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a role"
        }, 
        "role_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/role_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/role_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of roles"
        }, 
        "role_list_metadata": {
            "title": "Metadata for role list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "role", 
                    "x-ntnx-enum": [
                        "role"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "role_list_metadata_output": {
            "title": "Metadata for role list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "role", 
                    "x-ntnx-enum": [
                        "role"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "role_metadata": {
            "title": "role metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when role was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "role", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "role"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "role uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the role is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when role was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the role"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "role name", 
                    "maxLength": 64
                }
            }, 
            "description": "The role kind metadata"
        }, 
        "role_reference": {
            "title": "Reference to a role", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "role", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "role"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a role"
        }, 
        "role_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "role", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "role"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "routing_policy": {
            "title": "routing_policy Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for routing_policy.", 
                    "maxLength": 1000
                }, 
                "name": {
                    "type": "string", 
                    "description": "routing_policy Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/routing_policy_resources"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a routing_policy spec"
        }, 
        "routing_policy_action": {
            "title": "Action", 
            "required": [
                "action"
            ], 
            "type": "object", 
            "properties": {
                "action": {
                    "x-ntnx-enum": [
                        "PERMIT", 
                        "DENY", 
                        "REROUTE"
                    ], 
                    "type": "string"
                }, 
                "service_ip_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string", 
                        "description": "device IP address"
                    }, 
                    "minimum": 0, 
                    "type": "array", 
                    "description": "IP addresses of network services in the chain.> This field is valid only when action is REROUTE.", 
                    "maximum": 1
                }
            }, 
            "description": "Routing policy action"
        }, 
        "routing_policy_action_status": {
            "title": "Action", 
            "required": [
                "action"
            ], 
            "type": "object", 
            "properties": {
                "action": {
                    "x-ntnx-enum": [
                        "PERMIT", 
                        "DENY", 
                        "REROUTE"
                    ], 
                    "type": "string"
                }, 
                "service_ip_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string", 
                        "description": "device IP address"
                    }, 
                    "type": "array", 
                    "description": "IP addresses of network services in the chain.> This field is valid only when action is REROUTE."
                }
            }, 
            "description": "Routing policy action"
        }, 
        "routing_policy_def_status": {
            "title": "routing_policy Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the routing_policy."
                }, 
                "name": {
                    "type": "string", 
                    "description": "routing_policy Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the routing_policy, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/routing_policy_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for routing_policy."
                }
            }, 
            "description": "An intentful representation of a routing_policy status"
        }, 
        "routing_policy_intent_input": {
            "title": "routing_policy Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/routing_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/routing_policy_metadata"
                }
            }, 
            "description": "An intentful representation of a routing_policy"
        }, 
        "routing_policy_intent_resource": {
            "title": "routing_policy Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/routing_policy_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/routing_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/routing_policy_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a routing_policy"
        }, 
        "routing_policy_intent_response": {
            "title": "routing_policy Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/routing_policy_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/routing_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/routing_policy_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a routing_policy"
        }, 
        "routing_policy_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/routing_policy_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/routing_policy_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of routing_policys"
        }, 
        "routing_policy_list_metadata": {
            "title": "Metadata for routing_policy list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "routing_policy", 
                    "x-ntnx-enum": [
                        "routing_policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "routing_policy_list_metadata_output": {
            "title": "Metadata for routing_policy list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "routing_policy", 
                    "x-ntnx-enum": [
                        "routing_policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "routing_policy_metadata": {
            "title": "routing_policy metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when routing_policy was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "routing_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "routing_policy"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "routing_policy uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the routing_policy is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when routing_policy was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the routing_policy"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "routing_policy name", 
                    "maxLength": 64
                }
            }, 
            "description": "The routing_policy kind metadata"
        }, 
        "routing_policy_reference": {
            "title": "Reference to a routing_policy", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "routing_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "routing_policy"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a routing_policy"
        }, 
        "routing_policy_resources": {
            "title": "Routing Policy creation/modification spec", 
            "required": [
                "priority", 
                "source", 
                "destination", 
                "protocol_type", 
                "action"
            ], 
            "type": "object", 
            "properties": {
                "priority": {
                    "minimum": 10, 
                    "type": "integer", 
                    "maximum": 1000, 
                    "format": "int16"
                }, 
                "source": {
                    "description": "Source of traffic that is entering the router.\n", 
                    "$ref": "#/definitions/network_address"
                }, 
                "protocol_parameters": {
                    "description": "The IP protocol type of traffic that is entering the router.\n", 
                    "$ref": "#/definitions/protocol_parameters"
                }, 
                "virtual_network_reference": {
                    "description": "The virtual network this routing policy belongs to.\n", 
                    "$ref": "#/definitions/virtual_network_reference"
                }, 
                "action": {
                    "description": "The IP protocol type of traffic that is entering the router.\n", 
                    "$ref": "#/definitions/routing_policy_action"
                }, 
                "destination": {
                    "description": "Destination of traffic that is entering the router.\n", 
                    "$ref": "#/definitions/network_address"
                }, 
                "protocol_type": {
                    "x-ntnx-enum": [
                        "ALL", 
                        "TCP", 
                        "UDP", 
                        "ICMP", 
                        "PROTOCOL_NUMBER"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "Routing Policy creation/modification spec. The routing policy matches incoming traffic on the router based on the following fields: 'source', 'destination', 'protocol_type', 'protocol_parameters'. Once traffic matches the parameters defined in the policy 'action' field defines the action that needs to be performed on the traffic. 'action' could be permit/deny/reroute."
        }, 
        "routing_policy_resources_def_status": {
            "title": "Routing policy creation/modification status", 
            "type": "object", 
            "properties": {
                "priority": {
                    "type": "integer", 
                    "format": "int16"
                }, 
                "source": {
                    "description": "The source IP address of traffic that is entering the router.\n", 
                    "$ref": "#/definitions/network_address_status"
                }, 
                "protocol_parameters": {
                    "description": "IP protocol parameters of traffic entering the router.\n", 
                    "$ref": "#/definitions/protocol_parameters_status"
                }, 
                "virtual_network_reference": {
                    "description": "The virtual network this routing policy belongs to.\n", 
                    "$ref": "#/definitions/virtual_network_reference"
                }, 
                "action": {
                    "description": "The action to be taken on traffic entering the router.\n", 
                    "$ref": "#/definitions/routing_policy_action_status"
                }, 
                "destination": {
                    "description": "The destination IP address of traffic that is entering the router.\n", 
                    "$ref": "#/definitions/network_address_status"
                }, 
                "protocol_type": {
                    "x-ntnx-enum": [
                        "TCP", 
                        "UDP", 
                        "ICMP", 
                        "PROTOCOL_NUMBER"
                    ], 
                    "type": "string", 
                    "description": "The IP protocol type of traffic that is entering the router.\n"
                }
            }, 
            "description": "Routing policy creation/modification status."
        }, 
        "routing_policy_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "routing_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "routing_policy"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "row_element": {
            "description": "Row Element Details. Each row element consists of either a widget config or a\nsection Id.\n", 
            "title": "Row Element Details.", 
            "type": "object", 
            "properties": {
                "widget_config": {
                    "$ref": "#/definitions/widget_config"
                }, 
                "section_id": {
                    "type": "string", 
                    "description": "Identifier for the section."
                }, 
                "widget_id": {
                    "type": "string", 
                    "description": "Identifier for a predefined widget."
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "section_id"
                    ]
                }, 
                {
                    "required": [
                        "widget_id"
                    ]
                }, 
                {
                    "required": [
                        "widget_config"
                    ]
                }
            ]
        }, 
        "schedule": {
            "title": "Schedule definition.", 
            "required": [
                "interval_type", 
                "interval_multiple"
            ], 
            "type": "object", 
            "properties": {
                "interval_multiple": {
                    "type": "integer", 
                    "description": "Multiple of interval_type.", 
                    "format": "int32"
                }, 
                "duration_secs": {
                    "type": "integer", 
                    "description": "Duration of the event. If set, an event of duration duration_usecs\nwill repeat as per the recurrence defined in interval_type.\n", 
                    "format": "int64"
                }, 
                "end_time": {
                    "type": "string", 
                    "description": "End time of the schedule.\nThe time should be specified in this manner.\ndate-fullyear(4digit) \"-\" date-month(2digit) \"-\" date-mday(2digit) \"T\" time-hour(2digit)\n\":\" time-minute(2digit) \":\" time-second(2digit) [.] \"Z\"  or\n(\"+\" / \"-\") time-hour(2digit) \":\" time-minute(2digit)\nExamples\n- 1985-04-12T23:20:50.52Z represents 20 minutes and 50.52 seconds after the 23rd hour of\n  April 12th, 1985 in UTC.\n- 1996-12-19T16:39:57-08:00 This represents 39 minutes and 57 seconds after the 16th hour\n  of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time).\n  Note that this is equivalent to 1996-12-20T00:39:57Z in UTC.\n", 
                    "format": "date-time"
                }, 
                "start_time": {
                    "type": "string", 
                    "description": "Start time of the schedule.\nThe time should be specified in this manner.\ndate-fullyear(4digit) \"-\" date-month(2digit) \"-\" date-mday(2digit) \"T\" time-hour(2digit)\n\":\" time-minute(2digit) \":\" time-second(2digit) [.] \"Z\"  or\n(\"+\" / \"-\") time-hour(2digit) \":\" time-minute(2digit)\nExamples\n- 1985-04-12T23:20:50.52Z represents 20 minutes and 50.52 seconds after the 23rd hour of\n  April 12th, 1985 in UTC.\n- 1996-12-19T16:39:57-08:00 This represents 39 minutes and 57 seconds after the 16th hour\n  of December 19th, 1996 with an offset of -08:00 from UTC (Pacific Standard Time).\n  Note that this is equivalent to 1996-12-20T00:39:57Z in UTC.\n", 
                    "format": "date-time"
                }, 
                "interval_type": {
                    "x-ntnx-enum": [
                        "ONCE", 
                        "MINUTELY", 
                        "HOURLY", 
                        "DAILY", 
                        "WEEKLY", 
                        "MONTHLY", 
                        "YEARLY"
                    ], 
                    "type": "string", 
                    "description": "Type of schedule interval. For schedule once, the interval_type is set\nto Once. ONCE is for aperiodic schedules.\n"
                }, 
                "is_suspended": {
                    "type": "boolean", 
                    "description": "Whether the schedule is suspended."
                }, 
                "day_of_week": {
                    "items": {
                        "x-ntnx-enum": [
                            "MONDAY", 
                            "TUESDAY", 
                            "WEDNESDAY", 
                            "THURSDAY", 
                            "FRIDAY", 
                            "SATURDAY", 
                            "SUNDAY"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "For schedule on weekly basis,like every Monday and Friday 10:00. To use this field, it is\nrequired that start_time (datetime) is set, and the interval_type is set to weekly or\nNONE.  If interval_type is set to NONE, then, only schedule for Monday and Friday once, in\nthis example.\n"
                }
            }, 
            "description": "Defines the schedule parameters."
        }, 
        "scope_filter_expression": {
            "title": "Scope Filter Expression.", 
            "required": [
                "left_hand_side", 
                "operator", 
                "right_hand_side"
            ], 
            "type": "object", 
            "properties": {
                "operator": {
                    "x-ntnx-enum": [
                        "IN", 
                        "IN_ALL", 
                        "NOT_IN"
                    ], 
                    "type": "string", 
                    "description": "The operator of the filter expression."
                }, 
                "left_hand_side": {
                    "x-ntnx-enum": [
                        "CATEGORY", 
                        "PROJECT", 
                        "SECRET_DIRECTORY"
                    ], 
                    "type": "string", 
                    "description": "The LHS of the filter expression - the scope type."
                }, 
                "right_hand_side": {
                    "description": "The Right hand side(RHS) of the scope filter expression.", 
                    "$ref": "#/definitions/right_hand_side"
                }
            }, 
            "description": "The Scope filter expression is a combination of LHS-Operator-RHS. This type of filter expression helps express the \"Context\" part of a Filter. Example1 - To express a context = Belonging to Project P1 or Project P2\n  left_hand_side = PROJECT\n  operator = IN\n  right_hand_side = [\"P1\", \"P2\"]\nExample2 - To express Belonging to 2 categories\n  left_hand_side = CATEGORY\n  operator = IN_ALL\n  right_hand_side = [\"location:nyc\", \"env:prod\"]\n"
        }, 
        "search_request": {
            "title": "Search Query Definition", 
            "type": "object", 
            "properties": {
                "generate_autocompletions_only": {
                    "type": "boolean", 
                    "description": "Flag to specify  if user is interested only in autocompletions.\n"
                }, 
                "query_term_list": {
                    "items": {
                        "$ref": "#/definitions/query_term"
                    }, 
                    "type": "array", 
                    "description": "Structured representation that infers query intent unambiguously. Client will echo this information back to the backend. Essentially, it is like a search result link. The list has an item corresponding to every query term. One user query is nothing but a collection of multiple query terms.\n"
                }, 
                "query_context": {
                    "type": "string", 
                    "description": "Common context for query which needs to be shared across client and\nsearch service. Client can pass some context which will be echoed back\nalong with the response.\n", 
                    "maxLength": 1024
                }, 
                "timezone": {
                    "type": "string", 
                    "description": "Timezone in which the query is getting excecuted.\n", 
                    "maxLength": 1024
                }, 
                "is_autocomplete_selection": {
                    "type": "boolean", 
                    "description": "Flag to indicate the user selected an autocomplete.\nHelpful for tracking concrete autocomplete selections.\n"
                }, 
                "user_query": {
                    "type": "string", 
                    "description": "User query in simple text.", 
                    "maxLength": 2048
                }, 
                "explicit_query": {
                    "type": "boolean", 
                    "description": "Flag to indicate the user explicitly made this query (e.g by pressing\nenter) and is not still typing. Helpful for tracking concrete queries\nfired by the user.\n"
                }
            }, 
            "description": "Search Query Object definitions."
        }, 
        "section": {
            "title": "Section Details.", 
            "required": [
                "section_id"
            ], 
            "type": "object", 
            "properties": {
                "repetition_criteria": {
                    "$ref": "#/definitions/repetition_criteria"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the section.", 
                    "maxLength": 1000
                }, 
                "template_rows": {
                    "items": {
                        "$ref": "#/definitions/template_row"
                    }, 
                    "type": "array", 
                    "description": "List of template rows."
                }, 
                "section_id": {
                    "type": "string", 
                    "description": "Identifier for a section. This should be unique in a report config.", 
                    "maxLength": 64
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the section.", 
                    "maxLength": 64
                }
            }, 
            "description": "Section Details. Section is a group of widgets."
        }, 
        "serial_port": {
            "title": "VM serial port connection.", 
            "type": "object", 
            "properties": {
                "index": {
                    "type": "integer", 
                    "description": "Index of the serial port."
                }, 
                "is_connected": {
                    "type": "boolean", 
                    "description": "Indicates whether the serial port connection is connected or not.\n"
                }
            }, 
            "description": "Indicates the configuration of serial ports of the VM.\n"
        }, 
        "service_account": {
            "title": "Directory service service-account", 
            "required": [
                "username", 
                "password"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "The username to connect to the directory service."
                }, 
                "password": {
                    "type": "string", 
                    "description": "The password to authenticate the request."
                }
            }, 
            "description": "Credentials to connect to the directory service."
        }, 
        "service_capability": {
            "title": "The capability of the service.", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "boolean", 
                    "description": "The current state of the capability. For example, if a service can be enabled or not.\n"
                }, 
                "validation_message_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "error_detail": {
                                "type": "string", 
                                "description": "The error detail for the validation failure.\n"
                            }, 
                            "validation_type": {
                                "x-ntnx-enum": [
                                    "PC_REGISTERED_TO_HOST_PE", 
                                    "MEMORY_CHECK_ON_HOST_PE", 
                                    "DATA_SERVICE_IP_CHECK_ON_PE"
                                ], 
                                "type": "string", 
                                "description": "The type of validation performed.\n"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of messages explaining the current state of the capability. For example, if a service cannot be enabled, this list will contain the reasons for the same.\n"
                }
            }, 
            "description": "The capability of a service for a desired state. If not capable, reasons for the same should be populated.\n"
        }, 
        "service_config_status": {
            "title": "Service configuration state.", 
            "type": "object", 
            "properties": {
                "validation_result_list": {
                    "items": {
                        "$ref": "#/definitions/validation_result"
                    }, 
                    "type": "array", 
                    "description": "Validation results of the service enablement. Will only be populated when user does validation_only operation.\n"
                }, 
                "task_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Enablement task uuid for the submitted request. This will not be populated when validation only is done.\n", 
                    "format": "UUID"
                }, 
                "configuration_info": {
                    "$ref": "#/definitions/configuration_info"
                }
            }, 
            "description": "Service configuration state."
        }, 
        "service_enablement_status": {
            "title": "The enablement status of a service.", 
            "type": "object", 
            "properties": {
                "service_capabilities": {
                    "type": "object", 
                    "description": "Capabilities of this service. For example if the service can be enabled/disabled.\n", 
                    "properties": {
                        "can_disable": {
                            "description": "Whether the service can be disabled.", 
                            "$ref": "#/definitions/service_capability"
                        }, 
                        "can_enable": {
                            "description": "Whether the service can be enabled.", 
                            "$ref": "#/definitions/service_capability"
                        }
                    }
                }, 
                "service_enablement_timestamp": {
                    "type": "string", 
                    "description": "Date and time at which the service was enabled.  Currently this is used only for Microsegmentation.\n", 
                    "format": "date-time"
                }, 
                "service_enablement_status": {
                    "x-ntnx-enum": [
                        "DISABLED", 
                        "ENABLING", 
                        "ENABLED"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "The status of the service - whether it is disabled by default, if an\n enablement is in progress, what is the current status.\n"
        }, 
        "service_response": {
            "title": "Response for service enablement/disablement request.\n", 
            "type": "object", 
            "properties": {
                "task_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the task created for handling the request.\n", 
                    "format": "UUID"
                }
            }, 
            "description": "Response for service enablement/disablement request.\n"
        }, 
        "severity": {
            "x-ntnx-enum": [
                "critical", 
                "warning", 
                "info"
            ], 
            "type": "string", 
            "description": "Alert severity", 
            "title": "Alert severity"
        }, 
        "single_response": {
            "description": "Single response object defintion.", 
            "title": "Single Response Defintion", 
            "type": "object", 
            "properties": {
                "generic_response": {
                    "$ref": "#/definitions/generic_response"
                }, 
                "help_result": {
                    "$ref": "#/definitions/help_result"
                }, 
                "link": {
                    "$ref": "#/definitions/link"
                }, 
                "entitybrowser_response": {
                    "$ref": "#/definitions/entitybrowser_response"
                }, 
                "page": {
                    "$ref": "#/definitions/page"
                }, 
                "timeseries_response": {
                    "$ref": "#/definitions/timeseries_response"
                }
            }, 
            "x-ntnx-one-of": [
                "generic_response", 
                "help_result", 
                "link", 
                "timeseries_response", 
                "page", 
                "entitybrowser_response"
            ]
        }, 
        "smtp_server": {
            "title": "SMTP server", 
            "required": [
                "email_address", 
                "server"
            ], 
            "type": "object", 
            "properties": {
                "email_address": {
                    "type": "string"
                }, 
                "type": {
                    "default": "PLAIN", 
                    "x-ntnx-enum": [
                        "PLAIN", 
                        "STARTTLS", 
                        "SSL"
                    ], 
                    "type": "string"
                }, 
                "server": {
                    "$ref": "#/definitions/cluster_network_entity"
                }
            }, 
            "description": "SMTP Server."
        }, 
        "snapshot_retention_policy": {
            "description": "This describes the snapshot retention policy for this\navailability zone. This translates into how many snapshots\ntaken as part of this protection rule need to be retained\non this availability zone.\n", 
            "title": "Snapshot Retention Policy", 
            "type": "object", 
            "properties": {
                "num_snapshots": {
                    "type": "integer", 
                    "description": "Number of snapshots need to be retained. This will be set in case of\nlinear snapshot retention.\n", 
                    "format": "int32"
                }, 
                "rollup_retention_policy": {
                    "title": "Snapshot Retention Policy for rollup schedules", 
                    "type": "object", 
                    "properties": {
                        "multiple": {
                            "type": "integer", 
                            "description": "Multiplier to 'snapshot_interval_type'. For example if\n'snapshot_interval_type' is \"YEARLY\" and 'multiple' is 5, then 5\nyears worth of rollup snapshots will be retained.\n", 
                            "format": "int32"
                        }, 
                        "snapshot_interval_type": {
                            "x-ntnx-enum": [
                                "HOURLY", 
                                "DAILY", 
                                "WEEKLY", 
                                "MONTHLY", 
                                "YEARLY"
                            ], 
                            "type": "string", 
                            "description": "Snapshot interval period.\n"
                        }
                    }, 
                    "description": "Maximum snapshot retention time with rollup schedules.\n"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "num_snapshots"
                    ]
                }, 
                {
                    "required": [
                        "rollup_retention_policy"
                    ]
                }
            ]
        }, 
        "software_list_intent_response": {
            "title": "List of software", 
            "required": [
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/portal_software"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/software_list_metadata_output"
                }
            }, 
            "description": "Available software on Nutanix portal"
        }, 
        "software_list_metadata": {
            "title": "Metadata for software list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "software", 
                    "x-ntnx-enum": [
                        "software"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "software_list_metadata_output": {
            "title": "Metadata for software list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "software", 
                    "x-ntnx-enum": [
                        "software"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "software_metadata": {
            "title": "software metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when software was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "software", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "software"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "software uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the software is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when software was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the software"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "software name", 
                    "maxLength": 64
                }
            }, 
            "description": "The software kind metadata"
        }, 
        "software_reference": {
            "title": "Reference to a software", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "software", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "software"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a software"
        }, 
        "software_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "software", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "software"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "software_type": {
            "x-ntnx-enum": [
                "NOS", 
                "NCC", 
                "PRISM_CENTRAL"
            ], 
            "type": "string", 
            "description": "Software type", 
            "title": "Software type"
        }, 
        "sort_order": {
            "x-ntnx-enum": [
                "ASCENDING", 
                "DESCENDING"
            ], 
            "type": "string", 
            "description": "The sort order in which results are returned", 
            "title": "Sort order"
        }, 
        "source_auth": {
            "title": "File item source authentication object.", 
            "type": "object", 
            "properties": {
                "aws_auth": {
                    "description": "Access credentials for Amazon AWS (access key and secret key).\n", 
                    "$ref": "#/definitions/aws_credentials"
                }, 
                "basic_auth": {
                    "description": "Basic authentication credentials used to access the source for the file item.", 
                    "$ref": "#/definitions/credentials"
                }
            }, 
            "description": "File item source authentication object."
        }, 
        "source_options": {
            "title": "Source options", 
            "type": "object", 
            "properties": {
                "allow_insecure_connection": {
                    "type": "boolean", 
                    "description": "allow_insecure_connection is an option for the user to ignore the server certificate verification while accessing source_uri (image location). If it has value = true, it ignores server certificate verification. If it has value = false, it does regular server certificate verification.\n"
                }
            }, 
            "description": "Options while accessing image source.\n"
        }, 
        "ssh_user": {
            "title": "SSH User Entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/ssh_user_request_details"
                }
            }, 
            "description": "SSH User Entity"
        }, 
        "ssh_user_def_status": {
            "title": "SSH User Entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/ssh_user_details"
                }
            }, 
            "description": "SSH User Entity"
        }, 
        "ssh_user_details": {
            "title": "SSH User details", 
            "required": [
                "username", 
                "user_uuid", 
                "entity_list", 
                "access_request_uuid"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "SSH User name"
                }, 
                "user_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "SSH User UUID", 
                    "format": "UUID"
                }, 
                "access_request_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the access request requesting SSH access", 
                    "format": "UUID"
                }, 
                "entity_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "entity_ip": {
                                "type": "string", 
                                "description": "Entity IP Address"
                            }, 
                            "entity_uuid": {
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                "type": "string", 
                                "description": "Entity UUID"
                            }, 
                            "entity_type": {
                                "x-ntnx-enum": [
                                    "CVM", 
                                    "PRISM_CENTRAL", 
                                    "HYPERVISOR"
                                ], 
                                "type": "string", 
                                "description": "Entity IP Address"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List of IP addresses to the entity which the user requested access to"
                }
            }, 
            "description": "SSH User details"
        }, 
        "ssh_user_intent_input": {
            "title": "ssh_user Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/ssh_user"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ssh_user_metadata"
                }
            }, 
            "description": "An intentful representation of a ssh_user"
        }, 
        "ssh_user_intent_resource": {
            "title": "ssh_user Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/ssh_user_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/ssh_user"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ssh_user_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a ssh_user"
        }, 
        "ssh_user_intent_response": {
            "title": "ssh_user Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/ssh_user_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/ssh_user"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ssh_user_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a ssh_user"
        }, 
        "ssh_user_list": {
            "title": "SSH User list", 
            "required": [
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/ssh_user_details"
                    }, 
                    "type": "array"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ssh_user_list_metadata"
                }
            }, 
            "description": "SSH User list"
        }, 
        "ssh_user_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/ssh_user_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/ssh_user_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of ssh_users"
        }, 
        "ssh_user_list_metadata": {
            "title": "Metadata for ssh_user list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "ssh_user", 
                    "x-ntnx-enum": [
                        "ssh_user"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "ssh_user_list_metadata_output": {
            "title": "Metadata for ssh_user list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "ssh_user", 
                    "x-ntnx-enum": [
                        "ssh_user"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "ssh_user_metadata": {
            "title": "ssh_user metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when ssh_user was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "ssh_user", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "ssh_user"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "ssh_user uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the ssh_user is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when ssh_user was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the ssh_user"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "ssh_user name", 
                    "maxLength": 64
                }
            }, 
            "description": "The ssh_user kind metadata"
        }, 
        "ssh_user_reference": {
            "title": "Reference to a ssh_user", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "ssh_user", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "ssh_user"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a ssh_user"
        }, 
        "ssh_user_request_details": {
            "title": "SSH User Request details", 
            "required": [
                "username", 
                "user_uuid", 
                "user_key", 
                "user_key_name", 
                "entity_list", 
                "access_request_uuid"
            ], 
            "type": "object", 
            "properties": {
                "username": {
                    "type": "string", 
                    "description": "SSH User name"
                }, 
                "access_request_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the access request requesting SSH access", 
                    "format": "UUID"
                }, 
                "entity_list": {
                    "items": {
                        "required": [
                            "entity_ip", 
                            "entity_type"
                        ], 
                        "type": "object", 
                        "properties": {
                            "entity_ip": {
                                "type": "string", 
                                "description": "Entity IP Address"
                            }, 
                            "entity_uuid": {
                                "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                                "type": "string", 
                                "description": "Entity UUID"
                            }, 
                            "entity_type": {
                                "x-ntnx-enum": [
                                    "CVM", 
                                    "PRISM_CENTRAL", 
                                    "HYPERVISOR"
                                ], 
                                "type": "string", 
                                "description": "Entity type"
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "List containing entity IP and entity type for each entity"
                }, 
                "user_key_name": {
                    "type": "string", 
                    "description": "Name for the user key to add"
                }, 
                "user_key": {
                    "type": "string", 
                    "description": "key to add for the user"
                }, 
                "user_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "SSH User UUID", 
                    "format": "UUID"
                }, 
                "user_unix_id": {
                    "type": "integer", 
                    "description": "Linux UID for user"
                }
            }, 
            "description": "SSH User Request details"
        }, 
        "ssh_user_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "ssh_user", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "ssh_user"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "ssl_key": {
            "title": "SSL certificate", 
            "required": [
                "key_type"
            ], 
            "type": "object", 
            "properties": {
                "key_type": {
                    "$ref": "#/definitions/ssl_key_type"
                }, 
                "key_name": {
                    "type": "string"
                }, 
                "signing_info": {
                    "$ref": "#/definitions/certification_signing_info"
                }, 
                "expire_datetime": {
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when the key expires", 
                    "format": "date-time"
                }
            }, 
            "description": "SSL certificate."
        }, 
        "ssl_key_type": {
            "x-ntnx-enum": [
                "RSA_2048", 
                "ECDSA_256", 
                "ECDSA_384", 
                "ECDSA_521", 
                "JKS", 
                "PKCS12", 
                "RSA_PUBLIC", 
                "KRB_KEYTAB", 
                "NONE"
            ], 
            "type": "string", 
            "description": "SSL key type. Key types with RSA_2048, ECDSA_256, ECDSA_384 and ECDSA_521\nare supported for key generation and importing.\n", 
            "title": "SSL key type"
        }, 
        "ssp_config_input": {
            "title": "Extra information for ssp configuration migration.", 
            "type": "object", 
            "properties": {
                "directory_service_service_account": {
                    "$ref": "#/definitions/credentials"
                }, 
                "should_skip_migration": {
                    "type": "boolean", 
                    "description": "Migration can be skipped or not. If this flag is set to True, migration will be skipped and the Prism Element will be directly marked as migration completed. Default is False.\n"
                }
            }, 
            "description": "Extra information for ssp configuration migration."
        }, 
        "ssp_migration_status": {
            "title": "SSP configuration migration state.", 
            "type": "object", 
            "properties": {
                "task_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Resultant task uuid for the submitted request.", 
                    "format": "UUID"
                }
            }, 
            "description": "SSP configuration migration state."
        }, 
        "status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "status": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Only value possible is \"failure\"."
                }, 
                "kind": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The entitys kind. i.e. \"status\"."
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "details": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "readOnly": true, 
                    "type": "object", 
                    "description": "Custom key-value details relevant to the status."
                }, 
                "message": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "A sentence explaining the reason for the status."
                }, 
                "reason": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "One snake case word."
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "streaming_policy": {
            "title": "Streaming Policy Entity", 
            "required": [
                "name", 
                "description", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "Policy name", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/streaming_policy_request_details"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Policy description", 
                    "maxLength": 1000
                }
            }, 
            "description": "Streaming Policy Entity"
        }, 
        "streaming_policy_def_status": {
            "title": "Streaming Policy Entity", 
            "required": [
                "name", 
                "description", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the streaming policy."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the streaming policy, if in an error state.\n"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Policy name"
                }, 
                "resources": {
                    "$ref": "#/definitions/streaming_policy_details"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Policy description"
                }
            }, 
            "description": "Streaming Policy Entity"
        }, 
        "streaming_policy_details": {
            "title": "Streaming Policy details", 
            "required": [
                "sql_query"
            ], 
            "type": "object", 
            "properties": {
                "is_enabled": {
                    "default": true, 
                    "type": "boolean", 
                    "description": "If policy is enabled"
                }, 
                "sql_query": {
                    "type": "string", 
                    "description": "Policy as SQL string"
                }, 
                "execution_frequency": {
                    "default": "FIVE_MINUTES", 
                    "x-ntnx-enum": [
                        "THIRTY_SECONDS", 
                        "ONE_MINUTE", 
                        "FIVE_MINUTES", 
                        "TEN_MINUTES", 
                        "THIRTY_MINUTES", 
                        "ONE_HOUR", 
                        "TWO_HOURS"
                    ], 
                    "type": "string", 
                    "description": "How often policy needs to be evaluated"
                }, 
                "window_duration": {
                    "default": "FIVE_MINUTES", 
                    "x-ntnx-enum": [
                        "THIRTY_SECONDS", 
                        "ONE_MINUTE", 
                        "FIVE_MINUTES", 
                        "TEN_MINUTES", 
                        "THIRTY_MINUTES", 
                        "ONE_HOUR", 
                        "TWO_HOURS"
                    ], 
                    "type": "string", 
                    "description": "Time window on which policy needs to be applied"
                }
            }, 
            "description": "Streaming Policy details"
        }, 
        "streaming_policy_intent_input": {
            "title": "streaming_policy Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/streaming_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/streaming_policy_metadata"
                }
            }, 
            "description": "An intentful representation of a streaming_policy"
        }, 
        "streaming_policy_intent_resource": {
            "title": "streaming_policy Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/streaming_policy_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/streaming_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/streaming_policy_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a streaming_policy"
        }, 
        "streaming_policy_intent_response": {
            "title": "streaming_policy Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/streaming_policy_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/streaming_policy"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/streaming_policy_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a streaming_policy"
        }, 
        "streaming_policy_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/streaming_policy_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/streaming_policy_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of streaming_policys"
        }, 
        "streaming_policy_list_metadata": {
            "title": "Metadata for streaming_policy list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "streaming_policy", 
                    "x-ntnx-enum": [
                        "streaming_policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "streaming_policy_list_metadata_output": {
            "title": "Metadata for streaming_policy list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "streaming_policy", 
                    "x-ntnx-enum": [
                        "streaming_policy"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "streaming_policy_metadata": {
            "title": "streaming_policy metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when streaming_policy was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "streaming_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "streaming_policy"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "streaming_policy uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the streaming_policy is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when streaming_policy was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the streaming_policy"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "streaming_policy name", 
                    "maxLength": 64
                }
            }, 
            "description": "The streaming_policy kind metadata"
        }, 
        "streaming_policy_reference": {
            "title": "Reference to a streaming_policy", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "streaming_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "streaming_policy"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a streaming_policy"
        }, 
        "streaming_policy_request_details": {
            "title": "Streaming policy request details", 
            "required": [
                "sql_query"
            ], 
            "type": "object", 
            "properties": {
                "is_enabled": {
                    "default": true, 
                    "type": "boolean", 
                    "description": "If policy is enabled"
                }, 
                "sql_query": {
                    "type": "string", 
                    "description": "Policy as SQL string", 
                    "maxLength": 2000
                }, 
                "execution_frequency": {
                    "default": "FIVE_MINUTES", 
                    "x-ntnx-enum": [
                        "THIRTY_SECONDS", 
                        "ONE_MINUTE", 
                        "FIVE_MINUTES", 
                        "TEN_MINUTES", 
                        "THIRTY_MINUTES", 
                        "ONE_HOUR", 
                        "TWO_HOURS"
                    ], 
                    "type": "string", 
                    "description": "How often policy needs to be evaluated"
                }, 
                "window_duration": {
                    "default": "FIVE_MINUTES", 
                    "x-ntnx-enum": [
                        "THIRTY_SECONDS", 
                        "ONE_MINUTE", 
                        "FIVE_MINUTES", 
                        "TEN_MINUTES", 
                        "THIRTY_MINUTES", 
                        "ONE_HOUR", 
                        "TWO_HOURS"
                    ], 
                    "type": "string", 
                    "description": "Time window on which policy needs to be applied"
                }
            }, 
            "description": "Streaming policy request details"
        }, 
        "streaming_policy_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "streaming_policy", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "streaming_policy"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "subnet": {
            "title": "subnet Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for subnet.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/subnet_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "subnet Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a subnet spec"
        }, 
        "subnet_def_status": {
            "title": "subnet Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the subnet."
                }, 
                "name": {
                    "type": "string", 
                    "description": "subnet Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the subnet, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/subnet_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for subnet."
                }
            }, 
            "description": "An intentful representation of a subnet status"
        }, 
        "subnet_intent_input": {
            "title": "subnet Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/subnet"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/subnet_metadata"
                }
            }, 
            "description": "An intentful representation of a subnet"
        }, 
        "subnet_intent_resource": {
            "title": "subnet Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/subnet_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/subnet"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/subnet_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a subnet"
        }, 
        "subnet_intent_response": {
            "title": "subnet Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/subnet_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/subnet"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/subnet_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a subnet"
        }, 
        "subnet_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/subnet_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/subnet_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of subnets"
        }, 
        "subnet_list_metadata": {
            "title": "Metadata for subnet list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "subnet", 
                    "x-ntnx-enum": [
                        "subnet"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "subnet_list_metadata_output": {
            "title": "Metadata for subnet list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "subnet", 
                    "x-ntnx-enum": [
                        "subnet"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "subnet_metadata": {
            "title": "subnet metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when subnet was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "subnet", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "subnet"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "subnet uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the subnet is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when subnet was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the subnet"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "subnet name", 
                    "maxLength": 64
                }
            }, 
            "description": "The subnet kind metadata"
        }, 
        "subnet_reference": {
            "title": "Reference to a subnet", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "subnet", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "subnet"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a subnet"
        }, 
        "subnet_resources": {
            "title": "Subnet creation/modification spec", 
            "required": [
                "subnet_type"
            ], 
            "type": "object", 
            "properties": {
                "subnet_type": {
                    "x-ntnx-enum": [
                        "VLAN", 
                        "OVERLAY"
                    ], 
                    "type": "string"
                }, 
                "vswitch_name": {
                    "type": "string", 
                    "maxLength": 64
                }, 
                "network_function_chain_reference": {
                    "$ref": "#/definitions/network_function_chain_reference"
                }, 
                "availability_zone_reference_list": {
                    "items": {
                        "$ref": "#/definitions/availability_zone_reference"
                    }, 
                    "type": "array", 
                    "description": "List of availability zones from which resources are derived (Only supported on Xi).\n"
                }, 
                "virtual_network_reference": {
                    "description": "The virtual network this subnet belongs to (Only supported on Xi).\n", 
                    "$ref": "#/definitions/virtual_network_reference"
                }, 
                "external_connectivity_state": {
                    "x-ntnx-enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "External connectivity state (Only supported on Xi)"
                }, 
                "vlan_id": {
                    "minimum": 0, 
                    "type": "integer", 
                    "format": "int32"
                }, 
                "ip_config": {
                    "$ref": "#/definitions/ip_config"
                }
            }, 
            "description": "Subnet creation/modification spec."
        }, 
        "subnet_resources_def_status": {
            "title": "Subnet creation/modification status", 
            "type": "object", 
            "properties": {
                "subnet_type": {
                    "x-ntnx-enum": [
                        "VLAN", 
                        "OVERLAY"
                    ], 
                    "type": "string"
                }, 
                "vswitch_name": {
                    "type": "string"
                }, 
                "network_function_chain_reference": {
                    "$ref": "#/definitions/network_function_chain_reference"
                }, 
                "availability_zone_reference_list": {
                    "items": {
                        "$ref": "#/definitions/availability_zone_reference"
                    }, 
                    "type": "array", 
                    "description": "List of availability zones from which resources are derived (Only supported on Xi).\n"
                }, 
                "virtual_network_reference": {
                    "description": "The virtual network this subnet belongs to (Only supported on Xi).\n", 
                    "$ref": "#/definitions/virtual_network_reference"
                }, 
                "external_connectivity_state": {
                    "x-ntnx-enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "External connectivity state (Only supported on Xi)"
                }, 
                "vlan_id": {
                    "type": "integer", 
                    "format": "int32"
                }, 
                "ip_config": {
                    "$ref": "#/definitions/ip_config"
                }
            }, 
            "description": "Subnet creation/modification status."
        }, 
        "subnet_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "subnet", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "subnet"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "support_case": {
            "title": "Support Case creation/modification spec.", 
            "required": [
                "resources", 
                "subject"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Description of the support case.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/support_case_resources"
                }, 
                "subject": {
                    "type": "string", 
                    "description": "Subject of the support case.", 
                    "maxLength": 140
                }
            }, 
            "description": "Support Case creation/modification spec."
        }, 
        "support_case_def_status": {
            "title": "Support Case creation/modification spec.", 
            "required": [
                "resources", 
                "subject"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The state of the support case entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Description of the support case."
                }, 
                "resources": {
                    "$ref": "#/definitions/support_case_response"
                }, 
                "subject": {
                    "type": "string", 
                    "description": "Subject of the support case."
                }
            }, 
            "description": "Support Case creation/modification spec."
        }, 
        "support_case_intent_input": {
            "title": "support_case Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/support_case"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/support_case_metadata"
                }
            }, 
            "description": "An intentful representation of a support_case"
        }, 
        "support_case_intent_resource": {
            "title": "support_case Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/support_case_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/support_case"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/support_case_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a support_case"
        }, 
        "support_case_intent_response": {
            "title": "support_case Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/support_case_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/support_case"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/support_case_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a support_case"
        }, 
        "support_case_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/support_case_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/support_case_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of support_cases"
        }, 
        "support_case_list_metadata": {
            "title": "Metadata for support_case list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "support_case", 
                    "x-ntnx-enum": [
                        "support_case"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "support_case_list_metadata_output": {
            "title": "Metadata for support_case list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "support_case", 
                    "x-ntnx-enum": [
                        "support_case"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "support_case_metadata": {
            "title": "support_case metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when support_case was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "support_case", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "support_case"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "support_case uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the support_case is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when support_case was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the support_case"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "support_case name", 
                    "maxLength": 64
                }
            }, 
            "description": "The support_case kind metadata"
        }, 
        "support_case_reference": {
            "title": "Reference to a support_case", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "support_case", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "support_case"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a support_case"
        }, 
        "support_case_resources": {
            "title": "Support Case Resources.", 
            "required": [
                "contact_details"
            ], 
            "type": "object", 
            "properties": {
                "contact_details": {
                    "$ref": "#/definitions/contact_information"
                }, 
                "ncc_checks_pc": {
                    "$ref": "#/definitions/ncc_checks_support_case_upload"
                }, 
                "log_collector_pc": {
                    "$ref": "#/definitions/log_collector_support_case_upload"
                }, 
                "case_type": {
                    "type": "string", 
                    "description": "Type of the support case being opened."
                }, 
                "priority": {
                    "x-ntnx-enum": [
                        "P1", 
                        "P2", 
                        "P3", 
                        "P4", 
                        "RFE"
                    ], 
                    "type": "string", 
                    "description": "Priority of the support case being created Example P4-Low, P3-Normal, P2-Critical, P1-Emergency.\n"
                }, 
                "nos_version": {
                    "type": "string", 
                    "description": "Nos version of the block for which support case is opened."
                }, 
                "hypervisor_version": {
                    "type": "string", 
                    "description": "Hypervisor version for which support case is opened."
                }, 
                "serial_number": {
                    "type": "string", 
                    "description": "Serial Number of the block for which help is needed."
                }, 
                "additional_notification_list": {
                    "items": {
                        "$ref": "#/definitions/contact_information"
                    }, 
                    "type": "array", 
                    "description": "List of email addresses of the extra recipients who need to be notified for case management.\n", 
                    "maxItems": 3
                }, 
                "log_collector": {
                    "$ref": "#/definitions/log_collector_support_case_upload"
                }, 
                "cluster_reference": {
                    "description": "Reference of the cluster for which logs and health checks need to be uploaded.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "ncc_checks": {
                    "$ref": "#/definitions/ncc_checks_support_case_upload"
                }
            }, 
            "description": "Support case resources definition."
        }, 
        "support_case_response": {
            "title": "Support Case Resources.", 
            "type": "object", 
            "properties": {
                "status": {
                    "type": "string", 
                    "description": "Status of the case."
                }, 
                "contact_details": {
                    "$ref": "#/definitions/contact_information"
                }, 
                "case_number": {
                    "type": "string", 
                    "description": "Support Case Number. This is the pretty version of case as visible to the user. Example \"00151752\"\n"
                }, 
                "creation_date": {
                    "type": "string", 
                    "description": "Date on which the case was created.", 
                    "format": "date-time"
                }, 
                "owner": {
                    "type": "string", 
                    "description": "Owner of the case."
                }, 
                "custom_key_values": {
                    "$ref": "#/definitions/generic_key_value_pair"
                }, 
                "hypervisor_version": {
                    "type": "string", 
                    "description": "Hypervisor version for which support case is opened."
                }, 
                "ncc_checks": {
                    "$ref": "#/definitions/ncc_checks_support_case_upload"
                }, 
                "ncc_checks_pc": {
                    "$ref": "#/definitions/ncc_checks_support_case_upload"
                }, 
                "creator_name": {
                    "type": "string", 
                    "description": "Name of the person who created the case."
                }, 
                "case_type": {
                    "type": "string", 
                    "description": "Type of the support case being opened."
                }, 
                "priority": {
                    "x-ntnx-enum": [
                        "P1", 
                        "P2", 
                        "P3", 
                        "P4", 
                        "RFE"
                    ], 
                    "type": "string", 
                    "description": "Priority of the support case being created Example P4-Low, P3-Normal, P2-Critical, P1-Emergency.\n"
                }, 
                "log_collector_pc": {
                    "$ref": "#/definitions/log_collector_support_case_upload"
                }, 
                "nos_version": {
                    "type": "string", 
                    "description": "Nos version of the block for which support case is opened."
                }, 
                "case_id": {
                    "type": "string", 
                    "description": "Support Case Id. This is the id to be used to query support details. Example \"500W0000003w3FEIAY\"\n"
                }, 
                "serial_number": {
                    "type": "string", 
                    "description": "Serial Number of the block for which help is needed."
                }, 
                "additional_notification_list": {
                    "items": {
                        "$ref": "#/definitions/contact_information"
                    }, 
                    "type": "array", 
                    "description": "List of email addresses of the extra recipients who need to be notified for case management.\n", 
                    "maxItems": 3
                }, 
                "log_collector": {
                    "$ref": "#/definitions/log_collector_support_case_upload"
                }, 
                "cluster_reference": {
                    "description": "Reference of the cluster for which logs and health checks need to be uploaded.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }
            }, 
            "description": "Support case Resources definition."
        }, 
        "support_case_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "support_case", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "support_case"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "support_case_template_response": {
            "title": "Support case template.", 
            "type": "object", 
            "properties": {
                "template": {
                    "type": "string", 
                    "description": "Requested Template."
                }
            }, 
            "description": "Support Case template."
        }, 
        "support_case_upload": {
            "title": "Support Case Upload Spec.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "title": "Support Case Upload Resources.", 
                    "type": "object", 
                    "properties": {
                        "portal_request_params": {
                            "$ref": "#/definitions/generic_key_value_pair"
                        }, 
                        "log_collector": {
                            "$ref": "#/definitions/log_collector_support_case_upload"
                        }, 
                        "ncc_checks": {
                            "$ref": "#/definitions/ncc_checks_support_case_upload"
                        }, 
                        "case_number": {
                            "type": "string", 
                            "description": "Support Case Number. This is the pretty version of case as visible to the user. Example \"00151752\"\n"
                        }
                    }, 
                    "description": "Support Case upload resource definition."
                }
            }, 
            "description": "Support Case upload spec."
        }, 
        "support_case_upload_def_status": {
            "title": "Support Case Upload Status.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "title": "Support Case Upload.", 
                    "type": "object", 
                    "properties": {
                        "portal_request_params": {
                            "$ref": "#/definitions/generic_key_value_pair"
                        }, 
                        "log_collector": {
                            "$ref": "#/definitions/log_collector_support_case_upload"
                        }, 
                        "ncc_checks": {
                            "$ref": "#/definitions/ncc_checks_support_case_upload"
                        }, 
                        "case_number": {
                            "type": "string", 
                            "description": "Support Case Number. This is the pretty version of case as visible to the user. Example \"00151752\"\n"
                        }
                    }, 
                    "description": "Definition of support case."
                }
            }, 
            "description": "Support Case upload status."
        }, 
        "support_case_upload_intent_input": {
            "title": "support_case_upload Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/support_case_upload"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/support_case_upload_metadata"
                }
            }, 
            "description": "An intentful representation of a support_case_upload"
        }, 
        "support_case_upload_intent_response": {
            "title": "support_case_upload Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/support_case_upload_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/support_case_upload"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/support_case_upload_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a support_case_upload"
        }, 
        "support_case_upload_list_metadata": {
            "title": "Metadata for support_case_upload list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "support_case_upload", 
                    "x-ntnx-enum": [
                        "support_case_upload"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "support_case_upload_list_metadata_output": {
            "title": "Metadata for support_case_upload list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "support_case_upload", 
                    "x-ntnx-enum": [
                        "support_case_upload"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "support_case_upload_metadata": {
            "title": "support_case_upload metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when support_case_upload was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "support_case_upload", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "support_case_upload"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "support_case_upload uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the support_case_upload is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when support_case_upload was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the support_case_upload"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "support_case_upload name", 
                    "maxLength": 64
                }
            }, 
            "description": "The support_case_upload kind metadata"
        }, 
        "support_case_upload_reference": {
            "title": "Reference to a support_case_upload", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "support_case_upload", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "support_case_upload"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a support_case_upload"
        }, 
        "support_case_upload_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "support_case_upload", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "support_case_upload"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "target_group": {
            "title": "Target group", 
            "type": "object", 
            "properties": {
                "filter": {
                    "description": "The set of categories that matching VMs need to have.", 
                    "$ref": "#/definitions/category_filter"
                }, 
                "default_internal_policy": {
                    "x-ntnx-enum": [
                        "ALLOW_ALL", 
                        "DENY_ALL"
                    ], 
                    "type": "string", 
                    "description": "Default policy for communication within target group."
                }, 
                "peer_specification_type": {
                    "x-ntnx-enum": [
                        "FILTER"
                    ], 
                    "type": "string", 
                    "description": "Way to identify the object for which rule is applied."
                }
            }, 
            "description": "Target group"
        }, 
        "task": {
            "title": "Task resources", 
            "type": "object", 
            "properties": {
                "status": {
                    "x-ntnx-enum": [
                        "QUEUED", 
                        "RUNNING", 
                        "SUCCEEDED", 
                        "ABORTED", 
                        "SUSPENDED", 
                        "FAILED"
                    ], 
                    "type": "string", 
                    "description": "Current state of the task."
                }, 
                "last_update_time": {
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when task was last updated.\n", 
                    "format": "date-time"
                }, 
                "logical_timestamp": {
                    "type": "integer", 
                    "description": "Number of times the task has been updated. The value increases sequentially with each update of the task and can be used to verify if there have been changes to the task.\n", 
                    "format": "int64"
                }, 
                "start_time": {
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when Task execution started.\n", 
                    "format": "date-time"
                }, 
                "creation_time": {
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when task was created.\n", 
                    "format": "date-time"
                }, 
                "completion_time": {
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when Task execution completed.\n", 
                    "format": "date-time"
                }, 
                "percentage_complete": {
                    "type": "integer", 
                    "description": "The completion percentage for the task.", 
                    "format": "int32"
                }, 
                "parent_task_reference": {
                    "description": "Reference to the parent task.", 
                    "$ref": "#/definitions/task_reference"
                }, 
                "error_detail": {
                    "type": "string", 
                    "description": "In case of task failure this field will provide the error description.\n"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the task.", 
                    "x-example": "0e09cf83-ac68-4f28-af70-6df9a43df4f0", 
                    "format": "UUID"
                }, 
                "entity_reference_list": {
                    "items": {
                        "$ref": "#/definitions/reference"
                    }, 
                    "type": "array"
                }, 
                "start_time_usecs": {
                    "type": "integer", 
                    "description": "Time in microseconds from epoch when the task execution started.\n", 
                    "format": "int64"
                }, 
                "subtask_reference_list": {
                    "items": {
                        "$ref": "#/definitions/task_reference"
                    }, 
                    "type": "array", 
                    "description": "Reference to the sub-tasks."
                }, 
                "progress_message": {
                    "type": "string", 
                    "description": "Description of what currently the task is doing."
                }, 
                "creation_time_usecs": {
                    "type": "integer", 
                    "description": "Time in microseconds from epoch when task was created.\n", 
                    "format": "int64"
                }, 
                "operation_type": {
                    "type": "string", 
                    "description": "Type of the operation tracked by the task."
                }, 
                "completion_time_usecs": {
                    "type": "integer", 
                    "description": "Time in microseconds from epoch when task execution completed.\n", 
                    "format": "int64"
                }, 
                "error_code": {
                    "type": "string", 
                    "description": "In case of task failure this field will provide the error code.\n"
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster the task is being executed on.", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "Task details."
        }, 
        "task_list_intent_response": {
            "title": "Task entity list", 
            "required": [
                "api_version", 
                "metadata", 
                "entities"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/task"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/task_list_metadata_output"
                }
            }, 
            "description": "Task entity list."
        }, 
        "task_list_metadata": {
            "title": "Metadata for task list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "task", 
                    "x-ntnx-enum": [
                        "task"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "task_list_metadata_output": {
            "title": "Metadata for task list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "task", 
                    "x-ntnx-enum": [
                        "task"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "task_metadata": {
            "title": "task metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when task was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "task", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "task"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "task uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the task is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when task was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the task"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "task name", 
                    "maxLength": 64
                }
            }, 
            "description": "The task kind metadata"
        }, 
        "task_poll_input": {
            "title": "Input for the task poll", 
            "required": [
                "poll_timeout_seconds", 
                "task_uuid_list"
            ], 
            "type": "object", 
            "properties": {
                "poll_timeout_seconds": {
                    "format": "int32", 
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Poll timeout in seconds", 
                    "maximum": 30
                }, 
                "task_uuid_list": {
                    "items": {
                        "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                        "type": "string", 
                        "format": "UUID"
                    }, 
                    "type": "array", 
                    "description": "List of task UUIDs to poll on", 
                    "title": "List of task UUIDs to poll on"
                }
            }, 
            "description": "Input for a task poll"
        }, 
        "task_poll_response": {
            "title": "Response from a task poll request", 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/task"
                    }, 
                    "type": "array"
                }, 
                "has_poll_timed_out": {
                    "type": "boolean", 
                    "description": "Did the poll timeout before all polled tasks completed"
                }
            }, 
            "description": "Response from a task poll request"
        }, 
        "task_reference": {
            "title": "Reference to a task", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "task", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "task"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a task"
        }, 
        "task_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "task", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "task"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "tcp": {
            "title": "TCP parameters", 
            "type": "object", 
            "properties": {
                "source_port_range": {
                    "description": "Range of TCP source ports", 
                    "$ref": "#/definitions/port_range"
                }, 
                "destination_port_range": {
                    "description": "Range of TCP destination ports", 
                    "$ref": "#/definitions/port_range"
                }
            }, 
            "description": "TCP parameters to be matched in routing policy."
        }, 
        "tcp_status": {
            "title": "TCP parameters", 
            "type": "object", 
            "properties": {
                "source_port_range": {
                    "description": "Range of TCP source ports", 
                    "$ref": "#/definitions/port_range_status"
                }, 
                "destination_port_range": {
                    "description": "Range of TCP destination ports", 
                    "$ref": "#/definitions/port_range_status"
                }
            }, 
            "description": "TCP parameters to be matched in routing policy."
        }, 
        "template_row": {
            "title": "Template Row Details.", 
            "type": "object", 
            "properties": {
                "row_element_list": {
                    "items": {
                        "$ref": "#/definitions/row_element"
                    }, 
                    "type": "array", 
                    "description": "List of row elements."
                }
            }, 
            "description": "Template Row Details."
        }, 
        "tenant": {
            "title": "Tenant definition.", 
            "required": [
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the tenant."
                }, 
                "name": {
                    "type": "string", 
                    "description": "name of the tenant.", 
                    "maxLength": 64
                }, 
                "idp_tenant_identifier": {
                    "type": "string", 
                    "description": "IDP Tenant Identifier.", 
                    "maxLength": 64
                }
            }, 
            "description": "Tenant definition."
        }, 
        "tenant_list_metadata": {
            "title": "Metadata for tenant list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "tenant", 
                    "x-ntnx-enum": [
                        "tenant"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "tenant_list_metadata_output": {
            "title": "Metadata for tenant list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "tenant", 
                    "x-ntnx-enum": [
                        "tenant"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "tenant_metadata": {
            "title": "tenant metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when tenant was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "tenant", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "tenant"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "tenant uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the tenant is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when tenant was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the tenant"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "tenant name", 
                    "maxLength": 64
                }
            }, 
            "description": "The tenant kind metadata"
        }, 
        "tenant_reference": {
            "title": "Reference to a tenant", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "tenant", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "tenant"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a tenant"
        }, 
        "tenant_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "tenant", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "tenant"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "timeseries_response": {
            "title": "Timeseries  Response Definition", 
            "type": "object", 
            "properties": {
                "type": {
                    "type": "string", 
                    "description": "Type of the timeseries response."
                }, 
                "result": {
                    "$ref": "#/definitions/group_query"
                }
            }, 
            "description": "Timeseries response object defintion."
        }, 
        "token": {
            "title": "Token Defintion", 
            "type": "object", 
            "properties": {
                "display_context": {
                    "description": "Underlying representation of the token.", 
                    "$ref": "#/definitions/expression"
                }, 
                "identifier": {
                    "description": "Identifier corresponding to the token.", 
                    "$ref": "#/definitions/expression"
                }, 
                "match_type": {
                    "type": "string", 
                    "description": "Match type of the query term (e.g. exact, prefix)."
                }, 
                "is_child_entity_type": {
                    "type": "boolean", 
                    "description": "An indication whether the token is a child entity type."
                }, 
                "additional_context": {
                    "items": {
                        "$ref": "#/definitions/expression"
                    }, 
                    "type": "array", 
                    "description": "Any additional information we have about the token."
                }
            }, 
            "description": "Token object definition. This holds the Interpretation of a query term.\n"
        }, 
        "trigger_info": {
            "title": "Trigger information.", 
            "required": [
                "trigger_time", 
                "action_trigger_type_reference"
            ], 
            "type": "object", 
            "properties": {
                "action_trigger_type_reference": {
                    "description": "The trigger type that triggered this rule execution.\nFor example, an alert or an event.  For manual trigger,  it will\nbe the user entity.\n", 
                    "$ref": "#/definitions/action_trigger_type_reference"
                }, 
                "trigger_type_display_name": {
                    "type": "string", 
                    "description": "The trigger display name.  Default to trigger type display name.\n"
                }, 
                "trigger_time": {
                    "type": "string", 
                    "description": "The time that this trigger happened", 
                    "format": "date-time"
                }, 
                "input_parameter_values": {
                    "description": "The ordered action input parameters.", 
                    "$ref": "#/definitions/component_instance_parameters"
                }, 
                "output_parameter_values": {
                    "description": "Trigger output parameters.", 
                    "$ref": "#/definitions/component_instance_parameters"
                }
            }, 
            "description": "The information about the triggering."
        }, 
        "trigger_instance_object": {
            "title": "Trigger instance", 
            "required": [
                "action_trigger_type_reference"
            ], 
            "type": "object", 
            "properties": {
                "instance_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Id to uniquely identify trigger in instance list.", 
                    "format": "UUID"
                }, 
                "action_trigger_type_reference": {
                    "$ref": "#/definitions/action_trigger_type_reference"
                }, 
                "input_parameter_values": {
                    "description": "The trigger user entered input parameters.", 
                    "$ref": "#/definitions/component_instance_parameters"
                }, 
                "display_name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "Trigger display name.  This is for display name, hence ready-only.\n"
                }, 
                "output_parameters": {
                    "additionalProperties": {
                        "$ref": "#/definitions/param_descriptor"
                    }, 
                    "readOnly": true, 
                    "description": "The trigger output parameter descriptors.  Came from trigger type.\n"
                }
            }, 
            "description": "Trigger instance object."
        }, 
        "udp": {
            "title": "UDP parameters", 
            "type": "object", 
            "properties": {
                "source_port_range": {
                    "description": "Range of UDP source ports", 
                    "$ref": "#/definitions/port_range"
                }, 
                "destination_port_range": {
                    "description": "Range of UDP destination ports", 
                    "$ref": "#/definitions/port_range"
                }
            }, 
            "description": "UDP parameters to be matched in routing policy"
        }, 
        "udp_status": {
            "title": "UDP parameters", 
            "type": "object", 
            "properties": {
                "source_port_range": {
                    "description": "Range of UDP source ports", 
                    "$ref": "#/definitions/port_range_status"
                }, 
                "destination_port_range": {
                    "description": "Range of UDP destination ports", 
                    "$ref": "#/definitions/port_range_status"
                }
            }, 
            "description": "UDP parameters to be matched in routing policy"
        }, 
        "unbilled_invoice": {
            "title": "Unbilled usages summary.", 
            "type": "object", 
            "properties": {
                "unpaid_balance": {
                    "description": "Amount that is due for non payment or partial payment of last invoice.\n", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "unbilled_balance": {
                    "description": "Amount that is due for the usage in current bill cycle till date.\n", 
                    "$ref": "#/definitions/monetary_value"
                }, 
                "invoice_item_list": {
                    "items": {
                        "$ref": "#/definitions/billing_invoice_item"
                    }, 
                    "type": "array", 
                    "description": "Summary of usage of individual billable items.", 
                    "title": "Summary of usage of billable items."
                }, 
                "outstanding_balance": {
                    "description": "Total amount that is due till date.", 
                    "$ref": "#/definitions/monetary_value"
                }
            }, 
            "description": "Summary of usages not yet invoiced to the user."
        }, 
        "underlay_subnet": {
            "title": "Underlay subnet Entity", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The underlay subnet name", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/underlay_subnet_resources"
                }
            }, 
            "description": "Underlay subnet entity definition. It is for hardware device subnets, used by\ndatacenter management software to persist/configure devices.\n"
        }, 
        "underlay_subnet_def_status": {
            "title": "Underlay subnet Entity Status", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The underlay subnet name", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/underlay_subnet_resources"
                }
            }, 
            "description": "underlay subnet entity status definition"
        }, 
        "underlay_subnet_intent_input": {
            "title": "underlay_subnet Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/underlay_subnet"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/underlay_subnet_metadata"
                }
            }, 
            "description": "An intentful representation of a underlay_subnet"
        }, 
        "underlay_subnet_intent_resource": {
            "title": "underlay_subnet Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/underlay_subnet_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/underlay_subnet"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/underlay_subnet_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a underlay_subnet"
        }, 
        "underlay_subnet_intent_response": {
            "title": "underlay_subnet Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/underlay_subnet_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/underlay_subnet"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/underlay_subnet_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a underlay_subnet"
        }, 
        "underlay_subnet_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/underlay_subnet_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/underlay_subnet_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of underlay_subnets"
        }, 
        "underlay_subnet_list_metadata": {
            "title": "Metadata for underlay_subnet list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "underlay_subnet", 
                    "x-ntnx-enum": [
                        "underlay_subnet"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "underlay_subnet_list_metadata_output": {
            "title": "Metadata for underlay_subnet list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "underlay_subnet", 
                    "x-ntnx-enum": [
                        "underlay_subnet"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "underlay_subnet_metadata": {
            "title": "underlay_subnet metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when underlay_subnet was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "underlay_subnet", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "underlay_subnet"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "underlay_subnet uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the underlay_subnet is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when underlay_subnet was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the underlay_subnet"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "underlay_subnet name", 
                    "maxLength": 64
                }
            }, 
            "description": "The underlay_subnet kind metadata"
        }, 
        "underlay_subnet_reference": {
            "title": "Reference to a underlay_subnet", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "underlay_subnet", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "underlay_subnet"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a underlay_subnet"
        }, 
        "underlay_subnet_resources": {
            "title": "Underlay subnet entity", 
            "required": [
                "gateway", 
                "netmask"
            ], 
            "type": "object", 
            "properties": {
                "datacenter_reference": {
                    "$ref": "#/definitions/datacenter_reference"
                }, 
                "netmask": {
                    "type": "string", 
                    "description": "Netmask (could be in CIDR or IP format)", 
                    "maxLength": 50
                }, 
                "gateway": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Gateway IP address"
                }
            }, 
            "description": "Underlay subnet entity definition"
        }, 
        "underlay_subnet_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "underlay_subnet", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "underlay_subnet"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "upgrade_notification": {
            "title": "Pre upgrade notification", 
            "type": "object", 
            "properties": {
                "proceed_message": {
                    "type": "string"
                }, 
                "cancel_message": {
                    "type": "string"
                }, 
                "description_item_list": {
                    "items": {
                        "$ref": "#/definitions/description_item"
                    }, 
                    "type": "array", 
                    "description": "Description items of the notification"
                }, 
                "title": {
                    "type": "string", 
                    "description": "Title of the notification"
                }
            }, 
            "description": "Pre upgrade notification"
        }, 
        "user": {
            "title": "User.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/user_input_resource"
                }
            }, 
            "description": "User Input Definition."
        }, 
        "user_def_status": {
            "title": "User status definition.", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the User."
                }, 
                "resources": {
                    "$ref": "#/definitions/user_status_resource"
                }
            }, 
            "description": "User status definition."
        }, 
        "user_group": {
            "title": "user group.", 
            "type": "object", 
            "properties": {
                "resources": {
                    "$ref": "#/definitions/user_group_input_resource"
                }
            }, 
            "description": "User Group Input Definition."
        }, 
        "user_group_def_status": {
            "title": "user group status definition.", 
            "required": [
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the entity."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "resources": {
                    "$ref": "#/definitions/user_group_output_resource"
                }
            }, 
            "description": "User group status definition."
        }, 
        "user_group_input_resource": {
            "description": "User Group Resource Definition", 
            "title": "user group resource definition.", 
            "type": "object", 
            "properties": {
                "directory_service_user_group": {
                    "$ref": "#/definitions/directory_service_user_group_input"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "directory_service_user_group"
                    ]
                }
            ]
        }, 
        "user_group_intent_input": {
            "title": "user_group Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/user_group"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_group_metadata"
                }
            }, 
            "description": "An intentful representation of a user_group"
        }, 
        "user_group_intent_resource": {
            "title": "user_group Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/user_group_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/user_group"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_group_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a user_group"
        }, 
        "user_group_intent_response": {
            "title": "user_group Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/user_group_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/user_group"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_group_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a user_group"
        }, 
        "user_group_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/user_group_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_group_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of user_groups"
        }, 
        "user_group_list_metadata": {
            "title": "Metadata for user_group list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "user_group", 
                    "x-ntnx-enum": [
                        "user_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "user_group_list_metadata_output": {
            "title": "Metadata for user_group list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "user_group", 
                    "x-ntnx-enum": [
                        "user_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "user_group_metadata": {
            "title": "user_group metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when user_group was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "user_group", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "user_group"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "user_group uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the user_group is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when user_group was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the user_group"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "user_group name", 
                    "maxLength": 64
                }
            }, 
            "description": "The user_group kind metadata"
        }, 
        "user_group_output_resource": {
            "title": "user group resource definition.", 
            "required": [
                "display_name"
            ], 
            "type": "object", 
            "properties": {
                "projects_reference_list": {
                    "items": {
                        "$ref": "#/definitions/project_reference"
                    }, 
                    "type": "array", 
                    "description": "A list of projects the user group is part of."
                }, 
                "directory_service_user_group": {
                    "$ref": "#/definitions/directory_service_user_group_status"
                }, 
                "access_control_policy_reference_list": {
                    "items": {
                        "$ref": "#/definitions/access_control_policy_reference"
                    }, 
                    "type": "array", 
                    "description": "List of ACP references."
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "The display name for the user group."
                }, 
                "user_group_type": {
                    "x-ntnx-enum": [
                        "DIRECTORY_SERVICE"
                    ], 
                    "type": "string"
                }
            }, 
            "description": "User Group Resource Definition."
        }, 
        "user_group_reference": {
            "title": "Reference to a user_group", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "user_group", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "user_group"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a user_group"
        }, 
        "user_group_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "user_group", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "user_group"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "user_info": {
            "title": "Access Control Policy and User status definition.", 
            "type": "object", 
            "properties": {
                "access_control_policy_list": {
                    "items": {
                        "$ref": "#/definitions/access_control_policy_detail"
                    }, 
                    "type": "array", 
                    "description": "The list of Access Control Policies"
                }, 
                "user_legacy_name": {
                    "type": "string", 
                    "description": "The legacy name of the logged in user"
                }
            }, 
            "description": "Access Control Policy and User status definition."
        }, 
        "user_input_resource": {
            "description": "User Resource Definition.", 
            "title": "User Resource Definition.", 
            "type": "object", 
            "properties": {
                "directory_service_user": {
                    "$ref": "#/definitions/directory_service_user"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "directory_service_user"
                    ]
                }
            ]
        }, 
        "user_intent_input": {
            "title": "user Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/user"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_metadata"
                }
            }, 
            "description": "An intentful representation of a user"
        }, 
        "user_intent_resource": {
            "title": "user Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/user_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/user"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a user"
        }, 
        "user_intent_response": {
            "title": "user Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/user_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/user"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a user"
        }, 
        "user_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/user_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/user_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of users"
        }, 
        "user_list_metadata": {
            "title": "Metadata for user list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "user", 
                    "x-ntnx-enum": [
                        "user"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "user_list_metadata_output": {
            "title": "Metadata for user list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "user", 
                    "x-ntnx-enum": [
                        "user"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "user_metadata": {
            "title": "user metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when user was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "user", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "user"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "user uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the user is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when user was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the user"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "user name", 
                    "maxLength": 64
                }
            }, 
            "description": "The user kind metadata"
        }, 
        "user_reference": {
            "title": "Reference to a user", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "user", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "user"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a user"
        }, 
        "user_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "user", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "user"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "user_status_resource": {
            "title": "User Resource Definition.", 
            "type": "object", 
            "properties": {
                "access_control_policy_reference_list": {
                    "items": {
                        "$ref": "#/definitions/access_control_policy_reference"
                    }, 
                    "type": "array", 
                    "description": "List of ACP references."
                }, 
                "resource_usage_summary": {
                    "type": "object", 
                    "properties": {
                        "resource_domain": {
                            "$ref": "#/definitions/resource_domain_resources_status"
                        }
                    }
                }, 
                "display_name": {
                    "type": "string", 
                    "description": "The display name of the user (common name) provided by the directory service.\n"
                }, 
                "projects_reference_list": {
                    "items": {
                        "$ref": "#/definitions/project_reference"
                    }, 
                    "type": "array", 
                    "description": "A list of projects the user is part of."
                }, 
                "user_type": {
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "DIRECTORY_SERVICE"
                    ], 
                    "type": "string"
                }, 
                "directory_service_user": {
                    "$ref": "#/definitions/directory_service_user_status"
                }
            }, 
            "description": "User Resource Definition."
        }, 
        "user_usage_in_projects": {
            "title": "User usage in project definition.", 
            "required": [
                "api_version"
            ], 
            "type": "object", 
            "properties": {
                "project_resource_domain_list": {
                    "items": {
                        "required": [
                            "project_reference", 
                            "resource_domain"
                        ], 
                        "type": "object", 
                        "properties": {
                            "project_reference": {
                                "$ref": "#/definitions/project_reference"
                            }, 
                            "resource_domain": {
                                "description": "Usage information for the user in the project.", 
                                "$ref": "#/definitions/resource_domain_resources_status"
                            }
                        }
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "User usage in project definition."
        }, 
        "validate_rack_config_input": {
            "title": "Validate Rack Configuration Input", 
            "type": "object", 
            "properties": {
                "rack_list": {
                    "items": {
                        "$ref": "#/definitions/rack_config"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "List of rack_config objects, which represent a group of racks.\n"
        }, 
        "validate_rack_config_output": {
            "title": "Rack Config Validation output", 
            "type": "object", 
            "properties": {
                "suggestion_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of suggestions describing how the failure in validation can be resolved. Each suggestion describes a specific change in configuration, which can independently resolve the validation failure.\n"
                }, 
                "cause_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of observations in a configuration that contradict each other which causes failure in validation. Fixing one or more items in this list to eliminate the contradiction will result in success in validation.\n"
                }
            }, 
            "description": "Rack Config Validation output."
        }, 
        "validation_result": {
            "title": "Service enablement validation item.", 
            "type": "object", 
            "properties": {
                "has_passed": {
                    "type": "boolean", 
                    "description": "Whether the validation passed."
                }, 
                "reason": {
                    "type": "string", 
                    "description": "Reason of failed validation. Will only be populated when validation fails.\n"
                }, 
                "name": {
                    "type": "string"
                }
            }, 
            "description": "Service enablement validation item."
        }, 
        "value_info": {
            "title": "Parameter value range.", 
            "type": "object", 
            "properties": {
                "pattern": {
                    "type": "string", 
                    "description": "A valid regex expression.", 
                    "maxLength": 256
                }, 
                "minimum": {
                    "type": "integer", 
                    "description": "The minimum value (or the length, if the value data type is string).\n", 
                    "format": "int32"
                }, 
                "maximum": {
                    "type": "integer", 
                    "description": "The maximum value (or the length, if the value data type is string).\n", 
                    "format": "int64"
                }, 
                "unit": {
                    "type": "string", 
                    "description": "The unit of measurement.", 
                    "maxLength": 256
                }
            }, 
            "description": "Describes a parameter's value range."
        }, 
        "vendor_config": {
            "title": "Vendor device and its versions.", 
            "type": "object", 
            "properties": {
                "version_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Vendor device version list."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Vendor device name."
                }
            }, 
            "description": "Vendor device and its versions."
        }, 
        "vendor_config_list_response": {
            "title": "List of vendor devices for which configuration can be downloaded.", 
            "type": "object", 
            "properties": {
                "vendor_config_list": {
                    "items": {
                        "$ref": "#/definitions/vendor_config"
                    }, 
                    "type": "array"
                }
            }, 
            "description": "List of vendor devices for which configuration steps can be downloaded.\n"
        }, 
        "versions": {
            "title": "Versions", 
            "required": [
                "major_version", 
                "minor_version"
            ], 
            "type": "object", 
            "properties": {
                "major_version": {
                    "type": "string", 
                    "description": "The major number of the API", 
                    "format": "integer"
                }, 
                "minor_version": {
                    "type": "string", 
                    "description": "The minor number of the API", 
                    "format": "integer"
                }
            }, 
            "description": "Supported API Versions"
        }, 
        "virtual_network": {
            "title": "Virtual network spec", 
            "required": [
                "name"
            ], 
            "properties": {
                "name": {
                    "type": "string", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/virtual_network_resources"
                }, 
                "description": {
                    "type": "string", 
                    "maxLength": 1000
                }
            }, 
            "description": "Virtual network input spec"
        }, 
        "virtual_network_def_status": {
            "title": "Virtual network status", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the virtual network."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the virtual network, if in an error state.\n"
                }, 
                "name": {
                    "type": "string"
                }, 
                "resources": {
                    "$ref": "#/definitions/virtual_network_resources_def_status"
                }, 
                "description": {
                    "type": "string"
                }
            }, 
            "description": "Virtual network output status"
        }, 
        "virtual_network_intent_input": {
            "title": "virtual_network Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/virtual_network"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/virtual_network_metadata"
                }
            }, 
            "description": "An intentful representation of a virtual_network"
        }, 
        "virtual_network_intent_resource": {
            "title": "virtual_network Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/virtual_network_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/virtual_network"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/virtual_network_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a virtual_network"
        }, 
        "virtual_network_intent_response": {
            "title": "virtual_network Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/virtual_network_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/virtual_network"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/virtual_network_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a virtual_network"
        }, 
        "virtual_network_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/virtual_network_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/virtual_network_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of virtual_networks"
        }, 
        "virtual_network_list_metadata": {
            "title": "Metadata for virtual_network list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "virtual_network", 
                    "x-ntnx-enum": [
                        "virtual_network"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "virtual_network_list_metadata_output": {
            "title": "Metadata for virtual_network list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "virtual_network", 
                    "x-ntnx-enum": [
                        "virtual_network"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "virtual_network_metadata": {
            "title": "virtual_network metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when virtual_network was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "virtual_network", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "virtual_network"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "virtual_network uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the virtual_network is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when virtual_network was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the virtual_network"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "virtual_network name", 
                    "maxLength": 64
                }
            }, 
            "description": "The virtual_network kind metadata"
        }, 
        "virtual_network_reference": {
            "title": "Reference to a virtual_network", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "virtual_network", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "virtual_network"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a virtual_network"
        }, 
        "virtual_network_resources": {
            "title": "Virtual network resources", 
            "type": "object", 
            "properties": {
                "common_domain_name_server_ip_list": {
                    "items": {
                        "$ref": "#/definitions/address"
                    }, 
                    "type": "array", 
                    "description": "List of domain name server IPs."
                }, 
                "vpn_config": {
                    "x-ntnx-enum": [
                        "CONNECTED", 
                        "DISCONNECTED"
                    ], 
                    "type": "string", 
                    "description": "Per region providing secure connection from on-prem to Xi (Only supported on Xi)\n"
                }, 
                "availability_zone_reference_list": {
                    "items": {
                        "$ref": "#/definitions/availability_zone_reference"
                    }, 
                    "type": "array", 
                    "description": "List of availability zones in Xi from which resources are derived (Only supported on Xi)\n"
                }
            }, 
            "description": "Virtual network resources"
        }, 
        "virtual_network_resources_def_status": {
            "title": "Virtual network resources status", 
            "type": "object", 
            "properties": {
                "common_domain_name_server_ip_list": {
                    "items": {
                        "$ref": "#/definitions/address"
                    }, 
                    "type": "array", 
                    "description": "List of domain name server IPs."
                }, 
                "nat_ip_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of IP addresses used for SNAT."
                }, 
                "vpn_config": {
                    "x-ntnx-enum": [
                        "CONNECTED", 
                        "DISCONNECTED"
                    ], 
                    "type": "string", 
                    "description": "Per region providing secure connection from on-prem to Xi (Only supported on Xi)\n"
                }, 
                "availability_zone_reference_list": {
                    "items": {
                        "$ref": "#/definitions/availability_zone_reference"
                    }, 
                    "type": "array", 
                    "description": "List of availability zones in Xi from which resources are derived (Only supported on Xi)\n"
                }
            }, 
            "description": "Virtual network resources status"
        }, 
        "virtual_network_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "virtual_network", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "virtual_network"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm": {
            "title": "vm Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for vm.", 
                    "maxLength": 1000
                }, 
                "resources": {
                    "$ref": "#/definitions/vm_resources"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "name": {
                    "type": "string", 
                    "description": "vm Name.", 
                    "maxLength": 64
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a vm spec"
        }, 
        "vm_boot_config": {
            "title": "VM Boot configuration", 
            "type": "object", 
            "properties": {
                "boot_device_order_list": {
                    "items": {
                        "x-ntnx-enum": [
                            "CDROM", 
                            "DISK", 
                            "NETWORK"
                        ], 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Indicates the order of device types in which VM should try to boot from. If boot device order is not provided the system will decide appropriate boot device order.\n"
                }, 
                "boot_device": {
                    "description": "Indicates which device a VM should boot from. Boot device takes precdence over boot device order. If both are given then specified boot device will be primary boot device and remaining devices will be assigned boot order according to boot device order field.\n", 
                    "$ref": "#/definitions/vm_boot_device"
                }
            }, 
            "description": "Indicates which device a VM should boot from.\n"
        }, 
        "vm_boot_device": {
            "description": "Indicates which device a VM should boot from. One of disk_address or mac_address should be provided.\n", 
            "title": "VM Boot device", 
            "type": "object", 
            "properties": {
                "disk_address": {
                    "description": "Address of disk to boot from.", 
                    "$ref": "#/definitions/disk_address"
                }, 
                "mac_address": {
                    "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", 
                    "type": "string", 
                    "description": "MAC address of nic to boot from.", 
                    "x-example": "50:6b:8d:ee:de:2b"
                }
            }, 
            "x-ntnx-one-of": [
                {
                    "required": [
                        "disk_address"
                    ]
                }, 
                {
                    "required": [
                        "mac_address"
                    ]
                }
            ]
        }, 
        "vm_clone_input": {
            "title": "Clone API input", 
            "type": "object", 
            "properties": {
                "metadata": {
                    "type": "object", 
                    "properties": {
                        "uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "format": "UUID"
                        }
                    }, 
                    "title": "Metadata of the cloned vm."
                }
            }, 
            "description": "Input object for the clone API. User can provide the optional UUID of the vm that will be created as a result of this operation.\n"
        }, 
        "vm_def_status": {
            "title": "vm Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the vm."
                }, 
                "name": {
                    "type": "string", 
                    "description": "vm Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the vm, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/vm_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for vm."
                }
            }, 
            "description": "An intentful representation of a vm status"
        }, 
        "vm_disk": {
            "title": "VirtualMachine Disk (VM Disk)", 
            "type": "object", 
            "properties": {
                "volume_group_reference": {
                    "$ref": "#/definitions/reference"
                }, 
                "device_properties": {
                    "type": "object", 
                    "properties": {
                        "disk_address": {
                            "$ref": "#/definitions/disk_address"
                        }, 
                        "device_type": {
                            "default": "DISK", 
                            "x-ntnx-enum": [
                                "DISK", 
                                "CDROM", 
                                "VOLUME_GROUP"
                            ], 
                            "type": "string"
                        }
                    }
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The device ID which is used to uniquely identify this particular disk.\n", 
                    "format": "UUID"
                }, 
                "data_source_reference": {
                    "$ref": "#/definitions/reference"
                }, 
                "disk_size_mib": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Size of the disk in MiB. Must match the size specified in 'disk_size_bytes' - rounded up to the nearest MiB -  when that field is present.\n", 
                    "format": "int32"
                }, 
                "disk_size_bytes": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Size of the disk in Bytes.", 
                    "format": "int64"
                }
            }, 
            "description": "VirtualMachine Disk (VM Disk)."
        }, 
        "vm_disk_list_metadata": {
            "title": "Metadata for vm_disk list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "vm_disk", 
                    "x-ntnx-enum": [
                        "vm_disk"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "vm_disk_list_metadata_output": {
            "title": "Metadata for vm_disk list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm_disk", 
                    "x-ntnx-enum": [
                        "vm_disk"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_disk_metadata": {
            "title": "vm_disk metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_disk was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "vm_disk", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_disk"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "vm_disk uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the vm_disk is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_disk was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vm_disk"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "vm_disk name", 
                    "maxLength": 64
                }
            }, 
            "description": "The vm_disk kind metadata"
        }, 
        "vm_disk_reference": {
            "title": "Reference to a vm_disk", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_disk", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_disk"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a vm_disk"
        }, 
        "vm_disk_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_disk", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_disk"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_gpu": {
            "title": "VirtualMachine GPU", 
            "type": "object", 
            "properties": {
                "vendor": {
                    "x-ntnx-enum": [
                        "NVIDIA", 
                        "INTEL", 
                        "AMD"
                    ], 
                    "type": "string", 
                    "description": "The vendor of the GPU."
                }, 
                "mode": {
                    "x-ntnx-enum": [
                        "PASSTHROUGH_GRAPHICS", 
                        "PASSTHROUGH_COMPUTE", 
                        "VIRTUAL"
                    ], 
                    "type": "string", 
                    "description": "The mode of this GPU."
                }, 
                "device_id": {
                    "type": "integer", 
                    "description": "The device ID of the GPU.", 
                    "format": "int32"
                }
            }, 
            "description": "Graphics resource information for the Virtual Machine."
        }, 
        "vm_gpu_list_metadata": {
            "title": "Metadata for vm_gpu list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "vm_gpu", 
                    "x-ntnx-enum": [
                        "vm_gpu"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "vm_gpu_list_metadata_output": {
            "title": "Metadata for vm_gpu list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm_gpu", 
                    "x-ntnx-enum": [
                        "vm_gpu"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_gpu_metadata": {
            "title": "vm_gpu metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_gpu was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "vm_gpu", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_gpu"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "vm_gpu uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the vm_gpu is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_gpu was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vm_gpu"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "vm_gpu name", 
                    "maxLength": 64
                }
            }, 
            "description": "The vm_gpu kind metadata"
        }, 
        "vm_gpu_output_status": {
            "title": "Virtual Machine GPU status", 
            "type": "object", 
            "properties": {
                "frame_buffer_size_mib": {
                    "type": "integer", 
                    "description": "GPU frame buffer size in MiB.", 
                    "format": "int64"
                }, 
                "vendor": {
                    "x-ntnx-enum": [
                        "NVIDIA", 
                        "INTEL", 
                        "AMD"
                    ], 
                    "type": "string", 
                    "description": "The vendor of the GPU."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the GPU.", 
                    "format": "UUID"
                }, 
                "num_virtual_display_heads": {
                    "type": "integer", 
                    "description": "Number of supported virtual display heads.", 
                    "format": "int32"
                }, 
                "pci_address": {
                    "type": "string", 
                    "description": "GPU {segment:bus:device:function} (sbdf) address if assigned.\n"
                }, 
                "mode": {
                    "x-ntnx-enum": [
                        "PASSTHROUGH_GRAPHICS", 
                        "PASSTHROUGH_COMPUTE", 
                        "VIRTUAL"
                    ], 
                    "type": "string", 
                    "description": "The mode of this GPU"
                }, 
                "fraction": {
                    "type": "integer", 
                    "description": "Fraction of the physical GPU assigned.", 
                    "format": "int32"
                }, 
                "guest_driver_version": {
                    "type": "string", 
                    "description": "Last determined guest driver version."
                }, 
                "device_id": {
                    "type": "integer", 
                    "description": "The device ID of the GPU.", 
                    "format": "int32"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the GPU resource."
                }
            }, 
            "description": "Graphics resource status information for the Virtual Machine."
        }, 
        "vm_gpu_reference": {
            "title": "Reference to a vm_gpu", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_gpu", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_gpu"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a vm_gpu"
        }, 
        "vm_gpu_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_gpu", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_gpu"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_guest_power_state_transition_config": {
            "title": "Power State Transition Config", 
            "type": "object", 
            "properties": {
                "should_fail_on_script_failure": {
                    "type": "boolean", 
                    "description": "Indicates whether to abort ngt shutdown/reboot if script fails."
                }, 
                "enable_script_exec": {
                    "type": "boolean", 
                    "description": "Indicates whether to execute set script before ngt shutdown/reboot."
                }
            }, 
            "description": "Extra configs related to power state transition."
        }, 
        "vm_intent_input": {
            "title": "vm Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vm"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_metadata"
                }
            }, 
            "description": "An intentful representation of a vm"
        }, 
        "vm_intent_resource": {
            "title": "vm Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm"
        }, 
        "vm_intent_response": {
            "title": "vm Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm"
        }, 
        "vm_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vm_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of vms"
        }, 
        "vm_list_metadata": {
            "title": "Metadata for vm list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "vm", 
                    "x-ntnx-enum": [
                        "vm"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "vm_list_metadata_output": {
            "title": "Metadata for vm list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm", 
                    "x-ntnx-enum": [
                        "vm"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_metadata": {
            "title": "vm metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "vm", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "vm uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the vm is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vm"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "vm name", 
                    "maxLength": 64
                }
            }, 
            "description": "The vm kind metadata"
        }, 
        "vm_nic": {
            "title": "Virtual Machine NIC", 
            "type": "object", 
            "properties": {
                "nic_type": {
                    "x-ntnx-enum": [
                        "NORMAL_NIC", 
                        "DIRECT_NIC", 
                        "NETWORK_FUNCTION_NIC"
                    ], 
                    "type": "string", 
                    "description": "The type of this NIC. Defaults to NORMAL_NIC."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.\n", 
                    "format": "UUID"
                }, 
                "ip_endpoint_list": {
                    "items": {
                        "$ref": "#/definitions/ip_address"
                    }, 
                    "type": "array", 
                    "description": "IP endpoints for the adapter. Currently, IPv4 addresses are\nsupported.\n"
                }, 
                "network_function_chain_reference": {
                    "$ref": "#/definitions/network_function_chain_reference"
                }, 
                "network_function_nic_type": {
                    "x-ntnx-enum": [
                        "INGRESS", 
                        "EGRESS", 
                        "TAP"
                    ], 
                    "type": "string", 
                    "description": "The type of this Network function NIC. Defaults to INGRESS.\n"
                }, 
                "mac_address": {
                    "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", 
                    "type": "string", 
                    "description": "The MAC address for the adapter.", 
                    "x-example": "50:6b:8d:ee:de:2b"
                }, 
                "subnet_reference": {
                    "$ref": "#/definitions/subnet_reference"
                }, 
                "model": {
                    "x-ntnx-enum": [
                        "VIRTIO", 
                        "E1000"
                    ], 
                    "type": "string", 
                    "description": "The model of this NIC."
                }, 
                "is_connected": {
                    "type": "boolean", 
                    "description": "Whether or not the NIC is connected. True by default."
                }
            }, 
            "description": "Virtual Machine NIC."
        }, 
        "vm_nic_list_metadata": {
            "title": "Metadata for vm_nic list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "vm_nic", 
                    "x-ntnx-enum": [
                        "vm_nic"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "vm_nic_list_metadata_output": {
            "title": "Metadata for vm_nic list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm_nic", 
                    "x-ntnx-enum": [
                        "vm_nic"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_nic_metadata": {
            "title": "vm_nic metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_nic was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "vm_nic", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_nic"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "vm_nic uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the vm_nic is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_nic was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vm_nic"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "vm_nic name", 
                    "maxLength": 64
                }
            }, 
            "description": "The vm_nic kind metadata"
        }, 
        "vm_nic_output_status": {
            "title": "Virtual Machine NIC Status", 
            "type": "object", 
            "properties": {
                "dns_ip_addresses_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "List of DNS IP addresses."
                }, 
                "nic_type": {
                    "x-ntnx-enum": [
                        "NORMAL_NIC", 
                        "DIRECT_NIC", 
                        "NETWORK_FUNCTION_NIC"
                    ], 
                    "type": "string", 
                    "description": "The type of this NIC. Defaults to NORMAL_NIC."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The NIC's UUID, which is used to uniquely identify this particular NIC. This UUID may be used to refer to the NIC outside the context of the particular VM it is attached to.\n", 
                    "format": "UUID"
                }, 
                "ip_endpoint_list": {
                    "items": {
                        "$ref": "#/definitions/ip_address"
                    }, 
                    "type": "array", 
                    "description": "IP endpoints for the adapter. Currently, IPv4 addresses are supported.\n"
                }, 
                "network_function_chain_reference": {
                    "$ref": "#/definitions/network_function_chain_reference"
                }, 
                "floating_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The Floating IP associated with the vnic."
                }, 
                "network_function_nic_type": {
                    "x-ntnx-enum": [
                        "INGRESS", 
                        "EGRESS", 
                        "TAP"
                    ], 
                    "type": "string", 
                    "description": "The type of this Network function NIC. Defaults to INGRESS.\n"
                }, 
                "mac_address": {
                    "pattern": "^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", 
                    "type": "string", 
                    "description": "The MAC address for the adapter.", 
                    "x-example": "50:6b:8d:ee:de:2b"
                }, 
                "default_gateway_address_list": {
                    "items": {
                        "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "Default gateway IP addresses."
                }, 
                "subnet_reference": {
                    "$ref": "#/definitions/subnet_reference"
                }, 
                "model": {
                    "x-ntnx-enum": [
                        "VIRTIO", 
                        "E1000"
                    ], 
                    "type": "string", 
                    "description": "The model of this NIC."
                }, 
                "is_connected": {
                    "type": "boolean", 
                    "description": "Whether or not the NIC is connected. True by default."
                }, 
                "dhcp_server_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "IP address of the DHCP server."
                }
            }, 
            "description": "Virtual Machine NIC Status."
        }, 
        "vm_nic_reference": {
            "title": "Reference to a vm_nic", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_nic", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_nic"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a vm_nic"
        }, 
        "vm_nic_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_nic", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_nic"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_power_state_mechanism": {
            "title": "VM Power State Mechanism", 
            "type": "object", 
            "properties": {
                "guest_transition_config": {
                    "$ref": "#/definitions/vm_guest_power_state_transition_config"
                }, 
                "mechanism": {
                    "x-ntnx-enum": [
                        "ACPI", 
                        "GUEST", 
                        "HARD"
                    ], 
                    "type": "string", 
                    "description": "Power state mechanism (ACPI/GUEST/HARD)."
                }
            }, 
            "description": "Indicates the mechanism guiding the VM power state transition. Currently used for the transition to \"OFF\" state.\n"
        }, 
        "vm_recovery_point": {
            "title": "vm recovery point input definitions", 
            "type": "object", 
            "properties": {
                "availability_zone_reference": {
                    "description": "Reference to the availability zone where this recovery point is\nlocated\n", 
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster in the availability zone where this recovery\npoint is located.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "vm_recovery_point_location_agnostic_uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "Location agnostic UUID of the recovery point. If a recovery\npoint is replicated to a different clusters, then all the\ninstances of same recovery point will share this UUID.\n"
                        }, 
                        "source_cluster_reference": {
                            "description": "Reference to the cluster in the source availability zone.\n", 
                            "$ref": "#/definitions/cluster_reference"
                        }, 
                        "source_availability_zone_reference": {
                            "description": "Reference to the availability zone where the source recovery\npoint exists. This need to be set to copy a recovery from some\nother location.\n", 
                            "$ref": "#/definitions/availability_zone_reference"
                        }, 
                        "parent_vm_reference": {
                            "description": "Reference to vm that this recovery point is a snapshot of.\n", 
                            "$ref": "#/definitions/vm_reference"
                        }, 
                        "recovery_point_type": {
                            "x-ntnx-enum": [
                                "CRASH_CONSISTENT", 
                                "APPLICATION_CONSISTENT"
                            ], 
                            "type": "string", 
                            "description": "Crash consistent or Application Consistent recovery point"
                        }, 
                        "creation_time": {
                            "type": "string", 
                            "description": "The time when the the recovery point is created. This is in internet\ndate/time format (RFC 3339). For example, 1985-04-12T23:20:50.52Z,\nthis represents 20 minutes and 50.52 seconds after the 23rd hour of\nApril 12th, 1985 in UTC.\n", 
                            "format": "date-time"
                        }, 
                        "expiration_time": {
                            "type": "string", 
                            "description": "The time when this recovery point expires and will be garbage\ncollected. This is in internet date/time format (RFC 3339). For\nexample, 1985-04-12T23:20:50.52Z, this represents 20 minutes and\n50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. If not\nset, then the recovery point never expires.\n", 
                            "format": "date-time"
                        }
                    }, 
                    "title": "Recovery point resources"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the recovery point.", 
                    "maxLength": 64
                }
            }, 
            "description": "The input object that defines a vm recovery point."
        }, 
        "vm_recovery_point_def_status": {
            "title": "vm recovery point output definitions", 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the vm recovery point."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the recovery point."
                }, 
                "availability_zone_reference": {
                    "description": "Reference to the availability zone where this recovery point is\nlocated.\n", 
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the vm, if in an error state."
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster in the availability zone where this recovery\npoint is located.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "consistency_group_uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "This field is same for all the entities (irrespective of kind) that\nwere snapshotted together.\n"
                        }, 
                        "source_cluster_reference": {
                            "description": "Reference to the cluster in the source availability zone. This\nneed to be set to copy a recovery from some other location.\n", 
                            "$ref": "#/definitions/cluster_reference"
                        }, 
                        "source_availability_zone_reference": {
                            "description": "Reference to the availability zone where the source recovery\npoint exists. This need to be set to copy a recovery from some\nother location.\n", 
                            "$ref": "#/definitions/availability_zone_reference"
                        }, 
                        "parent_vm_reference": {
                            "description": "Reference to vm that this recovery point is a snapshot of.\n", 
                            "$ref": "#/definitions/vm_reference"
                        }, 
                        "recovery_point_type": {
                            "x-ntnx-enum": [
                                "CRASH_CONSISTENT", 
                                "APPLICATION_CONSISTENT"
                            ], 
                            "type": "string", 
                            "description": "Crash consistent or Application Consistent recovery point"
                        }, 
                        "vm_spec": {
                            "description": "Spec of the vm at the time of snapshot.\n", 
                            "$ref": "#/definitions/vm"
                        }, 
                        "vm_recovery_point_location_agnostic_uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "Location agnostic UUID of the recovery point. If a recovery\npoint is replicated to a different clusters, then all the\ninstances of same recovery point will share this UUID.\n", 
                            "format": "UUID"
                        }, 
                        "creation_time": {
                            "type": "string", 
                            "description": "The time when the the recovery point is created. This is in internet\ndate/time format (RFC 3339). For example, 1985-04-12T23:20:50.52Z,\nthis represents 20 minutes and 50.52 seconds after the 23rd hour of\nApril 12th, 1985 in UTC.\n"
                        }, 
                        "vm_metadata": {
                            "description": "Metadata of the vm at the time of snapshot.\n", 
                            "$ref": "#/definitions/vm_metadata"
                        }, 
                        "expiration_time": {
                            "type": "string", 
                            "description": "The time when this recovery point expires and will be garbage\ncollected. This is in internet date/time format (RFC 3339). For\nexample, 1985-04-12T23:20:50.52Z, this represents 20 minutes and\n50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. If not\nset, then the recovery point never expires.\n", 
                            "format": "date-time"
                        }
                    }, 
                    "title": "Recovery point resources"
                }
            }, 
            "description": "The output object that defines a vm recovery point"
        }, 
        "vm_recovery_point_intent_input": {
            "title": "vm_recovery_point Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vm_recovery_point"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_recovery_point_metadata"
                }
            }, 
            "description": "An intentful representation of a vm_recovery_point"
        }, 
        "vm_recovery_point_intent_resource": {
            "title": "vm_recovery_point Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_recovery_point_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_recovery_point"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_recovery_point_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm_recovery_point"
        }, 
        "vm_recovery_point_intent_response": {
            "title": "vm_recovery_point Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_recovery_point_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_recovery_point"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_recovery_point_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm_recovery_point"
        }, 
        "vm_recovery_point_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vm_recovery_point_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_recovery_point_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of vm_recovery_points"
        }, 
        "vm_recovery_point_list_metadata": {
            "title": "Metadata for vm_recovery_point list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "vm_recovery_point", 
                    "x-ntnx-enum": [
                        "vm_recovery_point"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "vm_recovery_point_list_metadata_output": {
            "title": "Metadata for vm_recovery_point list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm_recovery_point", 
                    "x-ntnx-enum": [
                        "vm_recovery_point"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_recovery_point_metadata": {
            "title": "vm_recovery_point metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_recovery_point was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "vm_recovery_point", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_recovery_point"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "vm_recovery_point uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the vm_recovery_point is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_recovery_point was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vm_recovery_point"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "vm_recovery_point name", 
                    "maxLength": 64
                }
            }, 
            "description": "The vm_recovery_point kind metadata"
        }, 
        "vm_recovery_point_reference": {
            "title": "Reference to a vm_recovery_point", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_recovery_point", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_recovery_point"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a vm_recovery_point"
        }, 
        "vm_recovery_point_restore_input": {
            "title": "Restore API input", 
            "type": "object", 
            "properties": {
                "vm_override_spec": {
                    "title": "vm override spec", 
                    "type": "object", 
                    "properties": {
                        "name": {
                            "type": "string", 
                            "description": "vm Name.", 
                            "maxLength": 64
                        }, 
                        "resources": {
                            "title": "vm Resources", 
                            "type": "object", 
                            "properties": {
                                "nic_list": {
                                    "items": {
                                        "$ref": "#/definitions/vm_nic"
                                    }, 
                                    "type": "array", 
                                    "description": "NICs attached to the VM."
                                }
                            }, 
                            "description": "vm Resources Definition."
                        }
                    }, 
                    "description": "Properties of the vm that can be overriden.\n"
                }, 
                "metadata": {
                    "type": "object", 
                    "properties": {
                        "categories_mapping": {
                            "additionalProperties": {
                                "items": {
                                    "type": "string"
                                }, 
                                "type": "array"
                            }, 
                            "type": "object", 
                            "description": "Categories for the vm. This allows setting up multiple\nvalues from a single key.\n"
                        }, 
                        "uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "format": "UUID"
                        }
                    }, 
                    "title": "Metadata of the restored vm."
                }
            }, 
            "description": "Input object for the restore API of the recovery points. User can provide optional UUID of the vm that will be created as a result of this operation.\n"
        }, 
        "vm_recovery_point_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_recovery_point", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_recovery_point"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_recovery_points_clone_input": {
            "title": "API input for vm_recovery_points_clone", 
            "required": [
                "availability_zone_reference"
            ], 
            "type": "object", 
            "properties": {
                "availability_zone_reference": {
                    "description": "Reference to the availability zone where the new\nvm_recovery_point will be replicated.\n", 
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "vm_recovery_point_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "UUID of the new vm_recovery_point that will be created.\n", 
                    "format": "UUID"
                }, 
                "cluster_reference": {
                    "description": "Reference to the cluster where the new vm_recovery_point will\nbe replicated.\n", 
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "override_spec": {
                    "description": "Properties that will be overridden in new vm_recovery_point.\n", 
                    "$ref": "#/definitions/vm_recovery_points_override_spec"
                }
            }, 
            "description": "Input object for the clone API for vm recovery point. User can provide the optional UUID of the vm_recovery_point that will be created as a result of this operation on target site.\n"
        }, 
        "vm_recovery_points_override_spec": {
            "title": "Recovery point override spec.", 
            "required": [
                "expiration_time"
            ], 
            "type": "object", 
            "properties": {
                "expiration_time": {
                    "type": "string", 
                    "description": "The time when this recovery point expires and will be garbage\ncollected. This is in internet date/time format (RFC 3339). For\nexample, 1985-04-12T23:20:50.52Z, this represents 20 minutes and\n50.52 seconds after the 23rd hour of April 12th, 1985 in UTC. If not\nset, then the recovery point never expires.\n", 
                    "format": "date-time"
                }
            }, 
            "description": "Properties that can can be overriden during cloning of recovery point.\n"
        }, 
        "vm_reference": {
            "title": "Reference to a vm", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a vm"
        }, 
        "vm_reference_with_customization": {
            "title": "Reference to a VM along with customization spec", 
            "required": [
                "vm_reference", 
                "vm_customization"
            ], 
            "type": "object", 
            "properties": {
                "vm_customization": {
                    "$ref": "#/definitions/guest_customization"
                }, 
                "vm_reference": {
                    "$ref": "#/definitions/vm_reference"
                }
            }, 
            "description": "Spec that describes a VM reference along with its customization config.\n"
        }, 
        "vm_resources": {
            "title": "VM Resources", 
            "type": "object", 
            "properties": {
                "num_threads_per_core": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Number of logical threads per core.", 
                    "format": "int32"
                }, 
                "power_state": {
                    "x-ntnx-enum": [
                        "ON", 
                        "OFF"
                    ], 
                    "type": "string", 
                    "description": "The current or desired power state of the VM."
                }, 
                "num_vcpus_per_socket": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Number of vCPUs per socket.", 
                    "format": "int32"
                }, 
                "num_sockets": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Number of vCPU sockets.", 
                    "format": "int32"
                }, 
                "gpu_list": {
                    "items": {
                        "$ref": "#/definitions/vm_gpu"
                    }, 
                    "type": "array", 
                    "description": "GPUs attached to the VM."
                }, 
                "memory_size_mib": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Memory size in MiB.", 
                    "format": "int32"
                }, 
                "boot_config": {
                    "description": "Indicates which device the VM should boot from.", 
                    "$ref": "#/definitions/vm_boot_config"
                }, 
                "hardware_clock_timezone": {
                    "type": "string", 
                    "description": "VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n", 
                    "maxLength": 64
                }, 
                "guest_customization": {
                    "$ref": "#/definitions/guest_customization"
                }, 
                "power_state_mechanism": {
                    "$ref": "#/definitions/vm_power_state_mechanism"
                }, 
                "vga_console_enabled": {
                    "type": "boolean", 
                    "description": "Indicates whether VGA console should be enabled or not."
                }, 
                "disk_list": {
                    "items": {
                        "$ref": "#/definitions/vm_disk"
                    }, 
                    "type": "array", 
                    "description": "Disks attached to the VM."
                }, 
                "vnuma_config": {
                    "description": "Information regarding vNUMA configuration.", 
                    "$ref": "#/definitions/vm_vnuma_config"
                }, 
                "nic_list": {
                    "items": {
                        "$ref": "#/definitions/vm_nic"
                    }, 
                    "type": "array", 
                    "description": "NICs attached to the VM."
                }, 
                "guest_os_id": {
                    "type": "string", 
                    "description": "String that identifies the OS running inside of the guest. Reserved for use by the system. Do not set or modify.", 
                    "maxLength": 64
                }, 
                "serial_port_list": {
                    "items": {
                        "$ref": "#/definitions/serial_port"
                    }, 
                    "type": "array", 
                    "description": "Serial ports configured on the VM."
                }, 
                "guest_tools": {
                    "description": "Information regarding guest tools.", 
                    "$ref": "#/definitions/guest_tools_spec"
                }, 
                "is_vcpu_hard_pinned": {
                    "type": "boolean", 
                    "description": "Indicates whether the vCPUs should be hard pinned to specific pCPUs."
                }, 
                "parent_reference": {
                    "description": "Reference to an entity that the VM should be cloned from.\n", 
                    "$ref": "#/definitions/reference"
                }
            }, 
            "description": "VM Resources Definition."
        }, 
        "vm_resources_def_status": {
            "title": "VM Resources Status Definition", 
            "type": "object", 
            "properties": {
                "num_threads_per_core": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "Number of logical threads per core.", 
                    "format": "int32"
                }, 
                "parent_reference": {
                    "description": "Reference to an entity that the VM cloned from.\n", 
                    "$ref": "#/definitions/reference"
                }, 
                "num_vcpus_per_socket": {
                    "type": "integer", 
                    "description": "Number of vCPUs per socket.", 
                    "format": "int32"
                }, 
                "num_sockets": {
                    "type": "integer", 
                    "description": "Number of vCPU sockets.", 
                    "format": "int32"
                }, 
                "gpu_list": {
                    "items": {
                        "$ref": "#/definitions/vm_gpu_output_status"
                    }, 
                    "type": "array", 
                    "description": "GPUs attached to the VM."
                }, 
                "protection_type": {
                    "x-ntnx-enum": [
                        "UNPROTECTED", 
                        "PD_PROTECTED", 
                        "RULE_PROTECTED"
                    ], 
                    "type": "string", 
                    "description": "The type of protection applied on a VM. PD_PROTECTED indicates a VM protected using Prism Element. RULE_PROTECTED indicates a VM protected using Prism Central.\n"
                }, 
                "memory_size_mib": {
                    "type": "integer", 
                    "description": "Memory size in MiB.", 
                    "format": "int32"
                }, 
                "boot_config": {
                    "description": "Indicates which device the VM should boot from.", 
                    "$ref": "#/definitions/vm_boot_config"
                }, 
                "hardware_clock_timezone": {
                    "type": "string", 
                    "description": "VM's hardware clock timezone in IANA TZDB format (America/Los_Angeles).\n"
                }, 
                "guest_customization": {
                    "$ref": "#/definitions/guest_customization_status"
                }, 
                "power_state_mechanism": {
                    "$ref": "#/definitions/vm_power_state_mechanism"
                }, 
                "is_vcpu_hard_pinned": {
                    "type": "boolean", 
                    "description": "Indicates whether the vCPUs should be hard pinned to specific pCPUs."
                }, 
                "disk_list": {
                    "items": {
                        "$ref": "#/definitions/vm_disk"
                    }, 
                    "type": "array", 
                    "description": "Disks attached to the VM."
                }, 
                "vnuma_config": {
                    "description": "Information regarding vNUMA configuration.", 
                    "$ref": "#/definitions/vm_vnuma_config"
                }, 
                "nic_list": {
                    "items": {
                        "$ref": "#/definitions/vm_nic_output_status"
                    }, 
                    "type": "array", 
                    "description": "NICs attached to the VM."
                }, 
                "host_reference": {
                    "$ref": "#/definitions/reference"
                }, 
                "guest_os_id": {
                    "type": "string", 
                    "description": "String that identifies the OS running inside of the guest. Reserved for use by the system. Do not set or modify."
                }, 
                "serial_port_list": {
                    "items": {
                        "$ref": "#/definitions/serial_port"
                    }, 
                    "type": "array", 
                    "description": "Serial ports configured on the VM."
                }, 
                "guest_tools": {
                    "description": "Information regarding guest tools.", 
                    "$ref": "#/definitions/guest_tools_status"
                }, 
                "hypervisor_type": {
                    "x-ntnx-enum": [
                        "ESX", 
                        "HyperV", 
                        "AHV"
                    ], 
                    "type": "string", 
                    "description": "The hypervisor type for the hypervisor the VM is hosted on.\n"
                }, 
                "vga_console_enabled": {
                    "type": "boolean", 
                    "description": "Indicates whether VGA console has been enabled or not."
                }, 
                "power_state": {
                    "x-ntnx-enum": [
                        "ON", 
                        "OFF", 
                        "PAUSED", 
                        "UNKNOWN"
                    ], 
                    "type": "string", 
                    "description": "Current power state of the VM."
                }
            }, 
            "description": "VM Resources Status Definition."
        }, 
        "vm_snapshot": {
            "title": "VM snapshot input definitions", 
            "type": "object", 
            "properties": {
                "expiration_time_msecs": {
                    "type": "integer", 
                    "description": "The time when this snapshot expires and will be garbage collected.\nIf not set, then the snapshot never expires.\n"
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "entity_uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "UUID of the base entity for which snapshot need to be taken\n", 
                            "format": "UUID"
                        }
                    }, 
                    "title": "Snapshot Resources"
                }, 
                "snapshot_type": {
                    "x-ntnx-enum": [
                        "CRASH_CONSISTENT", 
                        "APPLICATION_CONSISTENT"
                    ], 
                    "type": "string", 
                    "description": "Crash consistent or Application Consistent snapshot"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the snapshot", 
                    "maxLength": 64
                }
            }, 
            "description": "The input object that defines a VM snapshot"
        }, 
        "vm_snapshot_def_status": {
            "title": "VM snapshot output definitions", 
            "required": [
                "snapshot_file_list"
            ], 
            "type": "object", 
            "properties": {
                "consistency_group_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "This field is same for all the entities (irrespective of kind) that\nwere snapshotted together.\n"
                }, 
                "location_agnostic_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "If a snapshot is replicated to a different clusters, then all the\ninstances of same snapshot will share this UUID.\n"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the snapshot"
                }, 
                "state": {
                    "type": "string", 
                    "description": "The state of the VM snapshot."
                }, 
                "snapshot_type": {
                    "x-ntnx-enum": [
                        "CRASH_CONSISTENT", 
                        "APPLICATION_CONSISTENT"
                    ], 
                    "type": "string", 
                    "description": "Crash consistent or Application Consistent snapshot"
                }, 
                "snapshot_file_list": {
                    "items": {
                        "type": "object", 
                        "properties": {
                            "file_path": {
                                "type": "string", 
                                "description": "Pathname of the file that participated in the snapshot.\n"
                            }, 
                            "snapshot_file_path": {
                                "type": "string", 
                                "description": "Pathname of the snapshot of the file."
                            }
                        }
                    }, 
                    "type": "array", 
                    "description": "Describes the files that are included in the snapshot.\n"
                }, 
                "expiration_time_msecs": {
                    "type": "integer", 
                    "description": "The time when this snapshot expires and will be garbage collected.\nIf not set, then the snapshot never expires.\n"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the {kind}}, if in an error state."
                }, 
                "resources": {
                    "type": "object", 
                    "properties": {
                        "entity_uuid": {
                            "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                            "type": "string", 
                            "description": "UUID of the base entity for which snapshot need to be taken\n", 
                            "format": "UUID"
                        }
                    }, 
                    "title": "Snapshot Resources"
                }
            }, 
            "description": "The output object that defines a VM snapshot"
        }, 
        "vm_snapshot_input": {
            "title": "Snapshot API input", 
            "type": "object", 
            "properties": {
                "expiration_time": {
                    "type": "string", 
                    "description": "The time when this recovery point expires and will be garbage\ncollected. This is in internet date/time format (RFC 3339). If not\nset, then the recovery point never expires.\n", 
                    "format": "date-time"
                }, 
                "vm_recovery_point_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Name of the recovery point.", 
                    "maxLength": 64
                }, 
                "recovery_point_type": {
                    "x-ntnx-enum": [
                        "CRASH_CONSISTENT", 
                        "APPLICATION_CONSISTENT"
                    ], 
                    "type": "string", 
                    "description": "Crash consistent or Application Consistent recovery point"
                }
            }, 
            "description": "Input object for the snapshot API. User can provide optional UUID of the vm_recovery_point that will be created as a result of this operation.\n"
        }, 
        "vm_snapshot_intent_input": {
            "title": "vm_snapshot Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vm_snapshot"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_snapshot_metadata"
                }
            }, 
            "description": "An intentful representation of a vm_snapshot"
        }, 
        "vm_snapshot_intent_resource": {
            "title": "vm_snapshot Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_snapshot_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_snapshot"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_snapshot_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm_snapshot"
        }, 
        "vm_snapshot_intent_response": {
            "title": "vm_snapshot Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vm_snapshot_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vm_snapshot"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_snapshot_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vm_snapshot"
        }, 
        "vm_snapshot_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vm_snapshot_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vm_snapshot_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of vm_snapshots"
        }, 
        "vm_snapshot_list_metadata": {
            "title": "Metadata for vm_snapshot list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "vm_snapshot", 
                    "x-ntnx-enum": [
                        "vm_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "vm_snapshot_list_metadata_output": {
            "title": "Metadata for vm_snapshot list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vm_snapshot", 
                    "x-ntnx-enum": [
                        "vm_snapshot"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vm_snapshot_metadata": {
            "title": "vm_snapshot metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_snapshot was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "vm_snapshot", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_snapshot"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "vm_snapshot uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the vm_snapshot is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vm_snapshot was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vm_snapshot"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "vm_snapshot name", 
                    "maxLength": 64
                }
            }, 
            "description": "The vm_snapshot kind metadata"
        }, 
        "vm_snapshot_reference": {
            "title": "Reference to a vm_snapshot", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_snapshot", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_snapshot"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a vm_snapshot"
        }, 
        "vm_snapshot_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm_snapshot", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm_snapshot"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_spec": {
            "title": "VM specification", 
            "required": [
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "memory_bytes": {
                    "type": "integer", 
                    "description": "Amount of memory needed in bytes."
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The UUID which is used to uniquely identify this VM.\n", 
                    "format": "UUID"
                }, 
                "num_cores_per_vcpu": {
                    "type": "integer", 
                    "description": "Number of cores per vCPU."
                }, 
                "vm_disk_list": {
                    "items": {
                        "$ref": "#/definitions/disk_spec"
                    }, 
                    "type": "array", 
                    "description": "List of associated VM virtual disks."
                }, 
                "virtual_hardware_version": {
                    "type": "integer", 
                    "description": "Virtual hardware version of the VM."
                }, 
                "source_vm_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Source VM UUID of which this VM is clone of.\n", 
                    "format": "UUID"
                }, 
                "num_vcpus": {
                    "type": "integer", 
                    "description": "Number of vCPUs needed."
                }
            }, 
            "description": "Details of the VM."
        }, 
        "vm_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vm", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vm"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vm_validate_migration_input": {
            "title": "Validate migration input definition.", 
            "required": [
                "migration_target"
            ], 
            "type": "object", 
            "properties": {
                "migration_target": {
                    "$ref": "#/definitions/migration_target"
                }
            }, 
            "description": "Contains reference to migration target to which the migrate validation\nneeds to be checked upon.\n"
        }, 
        "vm_validate_migration_output": {
            "items": {
                "type": "object", 
                "x-ntnx-one-of": [
                    {
                        "required": [
                            "error_code"
                        ]
                    }, 
                    {
                        "required": [
                            "warning_code"
                        ]
                    }
                ], 
                "properties": {
                    "error_code": {
                        "x-ntnx-enum": [
                            "VIRTUAL_HARDWARE_VERSION_MISMATCH", 
                            "LEGACY_PROTECTION_NOT_SUPPORTED", 
                            "LOCAL_CLUSTER_IN_READ_ONLY_MODE", 
                            "TARGET_NOT_REGISTERED_TO_MANAGEMENT_SERVER", 
                            "UNKNOWN_ERROR", 
                            "UNSUPPORTED_DISK_TYPE", 
                            "UNSUPPORTED_RECOVERY_FROM_ESX_TO_AHV", 
                            "UNSUPPORTED_RECOVERY_FROM_AHV_TO_ESX", 
                            "UNSUPPORTED_HYPERVISOR_TYPE", 
                            "UNSUPPORTED_VOLUME_GROUP_ATTACHMENT", 
                            "VM_WITH_DELTA_DISKS", 
                            "VM_WITH_SHARED_VDISKS", 
                            "VM_WITH_UEFI_FIRMWARE"
                        ], 
                        "type": "string", 
                        "description": "Error due to which VM will be unrecoverable at migration target.\n"
                    }, 
                    "unrecoverability_detail": {
                        "type": "string", 
                        "description": "Detailed message which describes unrecoverability warning or error.\n"
                    }, 
                    "warning_code": {
                        "x-ntnx-enum": [
                            "UNKNOWN_WARNING", 
                            "VM_NGT_MULTIPATHING_ENABLED", 
                            "VM_NGT_NOT_INSTALLED"
                        ], 
                        "type": "string", 
                        "description": "Warning due to which VM may not be fully recoverable at migration\ntarget.\n"
                    }, 
                    "resolution": {
                        "type": "string", 
                        "description": "Detailed message which describes the resolution for warning or\nerror.\n"
                    }
                }
            }, 
            "type": "array", 
            "description": "If VM migration is not feasible, it contains detailed list of the\ncorresponding errors and warnings. Otherwise none.\n", 
            "title": "Validate migration output definition."
        }, 
        "vm_validate_restore_output": {
            "items": {
                "type": "object", 
                "x-ntnx-one-of": [
                    {
                        "required": [
                            "error_code"
                        ]
                    }, 
                    {
                        "required": [
                            "warning_code"
                        ]
                    }
                ], 
                "properties": {
                    "error_code": {
                        "x-ntnx-enum": [
                            "VM_RESTORE_NOT_SUPPORTED", 
                            "VIRTUAL_HARDWARE_VERSION_MISMATCH", 
                            "LEGACY_SNAPSHOT_NOT_SUPPORTED", 
                            "TARGET_NOT_REGISTERED_TO_MANAGEMENT_SERVER", 
                            "UNKNOWN_ERROR", 
                            "UNSUPPORTED_DISK_TYPE", 
                            "UNSUPPORTED_RECOVERY_FROM_ESX_TO_AHV", 
                            "UNSUPPORTED_RECOVERY_FROM_AHV_TO_ESX", 
                            "UNSUPPORTED_HYPERVISOR_TYPE", 
                            "UNSUPPORTED_VOLUME_GROUP_ATTACHMENT", 
                            "VM_WITH_DELTA_DISKS", 
                            "VM_WITH_SHARED_VDISKS", 
                            "VM_WITH_UEFI_FIRMWARE", 
                            "VSS_SNAPSHOT_NOT_SUPPORTED"
                        ], 
                        "type": "string", 
                        "description": "Error due to which vm will not be unrecoverable from the\nvm recovery point.\n"
                    }, 
                    "unrecoverability_detail": {
                        "type": "string", 
                        "description": "Detailed message which describes unrecoverability warning or error.\n"
                    }, 
                    "warning_code": {
                        "x-ntnx-enum": [
                            "UNKNOWN_WARNING", 
                            "VM_NGT_MULTIPATHING_ENABLED", 
                            "VM_NGT_NOT_INSTALLED"
                        ], 
                        "type": "string", 
                        "description": "Warning due to which vm may not be fully recoverable from\nthe vm recovery point.\n"
                    }, 
                    "resolution": {
                        "type": "string", 
                        "description": "Detailed message which describes the resolution for warning or\nerror.\n"
                    }
                }
            }, 
            "type": "array", 
            "description": "If vm restoration is not feasible, it contains detailed list of the\ncorresponding errors and warnings. Otherwise none.\n", 
            "title": "vm validate restore output definition."
        }, 
        "vm_vnuma_config": {
            "title": "VM vNUMA configuration", 
            "type": "object", 
            "properties": {
                "num_vnuma_nodes": {
                    "type": "integer", 
                    "description": "Number of vNUMA nodes. 0 means vNUMA is disabled.", 
                    "format": "int64"
                }
            }, 
            "description": "Indicates how VM vNUMA should be configured\n"
        }, 
        "vmware_list_metadata": {
            "title": "Metadata for vmware meta apis", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }
            }, 
            "description": "All vmware meta api calls  will have this metadata block as input\n"
        }, 
        "volume_disk_resource_input": {
            "title": "Volume disk configuration", 
            "type": "object", 
            "properties": {
                "index": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Index of the volume disk in the group.", 
                    "maximum": 16383
                }, 
                "data_source_reference": {
                    "description": "An existing disk or image to clone for the contents of this disk.\n", 
                    "$ref": "#/definitions/reference"
                }, 
                "disk_size_mib": {
                    "type": "integer", 
                    "description": "Size of the disk in MiB.", 
                    "format": "int64"
                }, 
                "disk_size_bytes": {
                    "type": "integer", 
                    "description": "Size of the disk in Bytes.", 
                    "format": "int64"
                }, 
                "storage_container_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Storage container UUID on which to create the disk.", 
                    "format": "UUID"
                }
            }, 
            "description": "Volume disk configuration."
        }, 
        "volume_disk_resource_output": {
            "title": "Volume disk configuration", 
            "type": "object", 
            "properties": {
                "index": {
                    "type": "integer", 
                    "description": "Index of the volume disk in the group."
                }, 
                "disk_size_mib": {
                    "type": "integer", 
                    "description": "Size of the disk in MiB.", 
                    "format": "int64"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "The device ID which is used to uniquely identify this particular disk.\n", 
                    "format": "UUID"
                }, 
                "disk_size_bytes": {
                    "type": "integer", 
                    "description": "Size of the disk in Bytes.", 
                    "format": "int64"
                }, 
                "storage_container_uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "Storage container UUID on which the disk has been created.", 
                    "format": "UUID"
                }
            }, 
            "description": "Volume disk configuration."
        }, 
        "volume_group": {
            "title": "Volume group object", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "Volume group description.", 
                    "maxLength": 1000
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/volume_group_resources_input"
                }, 
                "name": {
                    "type": "string", 
                    "description": "Volume group name.", 
                    "maxLength": 64
                }
            }, 
            "description": "Volume group input spec."
        }, 
        "volume_group_def_status": {
            "title": "Volume group configuration", 
            "required": [
                "resources", 
                "name"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the volume group entity."
                }, 
                "name": {
                    "type": "string", 
                    "description": "Volume group name."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array"
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/volume_group_resources_output"
                }, 
                "description": {
                    "type": "string", 
                    "description": "Volume group description."
                }
            }, 
            "description": "Volume group configuration."
        }, 
        "volume_group_intent_input": {
            "title": "volume_group Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/volume_group"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_metadata"
                }
            }, 
            "description": "An intentful representation of a volume_group"
        }, 
        "volume_group_intent_resource": {
            "title": "volume_group Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/volume_group_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/volume_group"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a volume_group"
        }, 
        "volume_group_intent_response": {
            "title": "volume_group Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/volume_group_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/volume_group"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a volume_group"
        }, 
        "volume_group_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/volume_group_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/volume_group_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of volume_groups"
        }, 
        "volume_group_list_metadata": {
            "title": "Metadata for volume_group list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "volume_group", 
                    "x-ntnx-enum": [
                        "volume_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "volume_group_list_metadata_output": {
            "title": "Metadata for volume_group list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "volume_group", 
                    "x-ntnx-enum": [
                        "volume_group"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "volume_group_metadata": {
            "title": "volume_group metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when volume_group was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "volume_group", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "volume_group"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "volume_group uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the volume_group is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when volume_group was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the volume_group"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "volume_group name", 
                    "maxLength": 64
                }
            }, 
            "description": "The volume_group kind metadata"
        }, 
        "volume_group_reference": {
            "title": "Reference to a volume_group", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "volume_group"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a volume_group"
        }, 
        "volume_group_resources_input": {
            "title": "Volume group resources", 
            "type": "object", 
            "properties": {
                "flash_mode": {
                    "x-ntnx-enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "Flash Mode, if enabled all volume disks of the VG will be pinned to SSD tier.\n"
                }, 
                "target_secret": {
                    "type": "string", 
                    "description": "Target Secret in case of CHAP authentication."
                }, 
                "parent_reference": {
                    "description": "Reference to an entity to clone from.", 
                    "$ref": "#/definitions/reference"
                }, 
                "sharing_status": {
                    "x-ntnx-enum": [
                        "SHARED", 
                        "NOT_SHARED"
                    ], 
                    "type": "string", 
                    "description": "Whether the volume group can be shared across multiple iSCSI initiators.\n"
                }, 
                "disk_list": {
                    "items": {
                        "$ref": "#/definitions/volume_disk_resource_input"
                    }, 
                    "type": "array", 
                    "description": "Volume group disk specification."
                }, 
                "attachment_list": {
                    "items": {
                        "$ref": "#/definitions/attachment_reference_input"
                    }, 
                    "type": "array", 
                    "description": "VMs attached to volume group."
                }, 
                "load_balance_vm_attachments": {
                    "type": "boolean", 
                    "description": "Whether to enable volume group load balancing."
                }, 
                "iscsi_target_prefix": {
                    "type": "string", 
                    "description": "iSCSI target prefix-name.", 
                    "maxLength": 512
                }
            }, 
            "description": "Volume group resources."
        }, 
        "volume_group_resources_output": {
            "title": "Volume group resources", 
            "type": "object", 
            "properties": {
                "flash_mode": {
                    "x-ntnx-enum": [
                        "ENABLED", 
                        "DISABLED"
                    ], 
                    "type": "string", 
                    "description": "Flash Mode, if enabled all volume disks of the VG will be pinned to SSD tier.\n"
                }, 
                "iscsi_target_name": {
                    "type": "string", 
                    "description": "iSCSI target full name"
                }, 
                "enabled_authentications": {
                    "x-ntnx-enum": [
                        "CHAP", 
                        "NONE"
                    ], 
                    "type": "string", 
                    "description": "Which authentication is enabled for VG."
                }, 
                "iscsi_target_prefix": {
                    "type": "string", 
                    "description": "iSCSI target prefix-name."
                }, 
                "size_bytes": {
                    "type": "integer", 
                    "description": "The total size of the Volume Group in bytes", 
                    "format": "int64"
                }, 
                "sharing_status": {
                    "x-ntnx-enum": [
                        "SHARED", 
                        "NOT_SHARED"
                    ], 
                    "type": "string", 
                    "description": "Whether the volume group can be shared across multiple iSCSI initiators.\n"
                }, 
                "attachment_list": {
                    "items": {
                        "$ref": "#/definitions/attachment_reference_output"
                    }, 
                    "type": "array", 
                    "description": "VMs attached to volume group."
                }, 
                "load_balance_vm_attachments": {
                    "type": "boolean", 
                    "description": "Whether volume group load balancing is enabled."
                }, 
                "size_mib": {
                    "type": "integer", 
                    "description": "The total size of the Volume Group in mib", 
                    "format": "int64"
                }, 
                "disk_list": {
                    "items": {
                        "$ref": "#/definitions/volume_disk_resource_output"
                    }, 
                    "type": "array", 
                    "description": "Volume group disk specification."
                }
            }, 
            "description": "Volume group resources."
        }, 
        "volume_group_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "volume_group", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "volume_group"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vpn_component_status": {
            "title": "Object to capture status of various aspects of the VPN connection.", 
            "type": "object", 
            "properties": {
                "state": {
                    "x-ntnx-enum": [
                        "UP", 
                        "DOWN"
                    ], 
                    "type": "string"
                }, 
                "detail": {
                    "type": "string", 
                    "description": "Detailed informational/error string in human-readable form."
                }
            }, 
            "description": "Object to capture status of various aspects of the VPN connection.\n"
        }, 
        "vpn_connection": {
            "title": "vpn_connection Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for vpn_connection.", 
                    "maxLength": 1000
                }, 
                "name": {
                    "type": "string", 
                    "description": "vpn_connection Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/vpn_connection_resources"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a vpn_connection spec"
        }, 
        "vpn_connection_def_status": {
            "title": "vpn_connection Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the vpn_connection."
                }, 
                "name": {
                    "type": "string", 
                    "description": "vpn_connection Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the vpn_connection, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/vpn_connection_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for vpn_connection."
                }
            }, 
            "description": "An intentful representation of a vpn_connection status"
        }, 
        "vpn_connection_intent_input": {
            "title": "vpn_connection Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vpn_connection"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vpn_connection_metadata"
                }
            }, 
            "description": "An intentful representation of a vpn_connection"
        }, 
        "vpn_connection_intent_resource": {
            "title": "vpn_connection Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vpn_connection_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vpn_connection"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vpn_connection_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vpn_connection"
        }, 
        "vpn_connection_intent_response": {
            "title": "vpn_connection Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vpn_connection_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vpn_connection"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vpn_connection_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vpn_connection"
        }, 
        "vpn_connection_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vpn_connection_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vpn_connection_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of vpn_connections"
        }, 
        "vpn_connection_list_metadata": {
            "title": "Metadata for vpn_connection list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "vpn_connection", 
                    "x-ntnx-enum": [
                        "vpn_connection"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "vpn_connection_list_metadata_output": {
            "title": "Metadata for vpn_connection list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vpn_connection", 
                    "x-ntnx-enum": [
                        "vpn_connection"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vpn_connection_metadata": {
            "title": "vpn_connection metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vpn_connection was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "vpn_connection", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vpn_connection"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "vpn_connection uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the vpn_connection is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vpn_connection was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vpn_connection"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "vpn_connection name", 
                    "maxLength": 64
                }
            }, 
            "description": "The vpn_connection kind metadata"
        }, 
        "vpn_connection_reference": {
            "title": "Reference to a vpn_connection", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vpn_connection", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vpn_connection"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a vpn_connection"
        }, 
        "vpn_connection_resources": {
            "title": "VPN connection creation/modification spec", 
            "required": [
                "local_gateway_reference", 
                "remote_gateway_reference", 
                "ipsec_config", 
                "local_gateway_role"
            ], 
            "type": "object", 
            "properties": {
                "local_gateway_role": {
                    "x-ntnx-enum": [
                        "INITIATOR", 
                        "ACCEPTOR"
                    ], 
                    "type": "string", 
                    "description": "Local gateway role (acceptor or initiator) in the connection.\n"
                }, 
                "remote_gateway_reference": {
                    "description": "The remote VPN gateway reference.", 
                    "$ref": "#/definitions/vpn_gateway_reference"
                }, 
                "local_gateway_reference": {
                    "description": "The local VPN gateway reference.", 
                    "$ref": "#/definitions/vpn_gateway_reference"
                }, 
                "ipsec_config": {
                    "$ref": "#/definitions/ipsec_config"
                }
            }, 
            "description": "VPN connection creation/modification spec."
        }, 
        "vpn_connection_resources_def_status": {
            "title": "VPN connection creation/modification status", 
            "type": "object", 
            "properties": {
                "ebgp_status": {
                    "description": "eBGP status of this connection.", 
                    "$ref": "#/definitions/vpn_component_status"
                }, 
                "ipsec_tunnel_status": {
                    "description": "IPSec tunnel status of this connection.", 
                    "$ref": "#/definitions/vpn_component_status"
                }, 
                "remote_gateway_reference": {
                    "description": "The remote VPN gateway reference.", 
                    "$ref": "#/definitions/vpn_gateway_reference"
                }, 
                "peer_route_prefix_list": {
                    "items": {
                        "$ref": "#/definitions/ip_subnet_status"
                    }, 
                    "type": "array", 
                    "description": "IP prefixes learned from the remote gateway over eBGP."
                }, 
                "local_gateway_role": {
                    "x-ntnx-enum": [
                        "INITIATOR", 
                        "ACCEPTOR"
                    ], 
                    "type": "string", 
                    "description": "Local gateway role (acceptor or initiator) in the connection.\n"
                }, 
                "ipsec_config": {
                    "$ref": "#/definitions/ipsec_config_status"
                }, 
                "local_gateway_reference": {
                    "description": "The local VPN gateway reference.", 
                    "$ref": "#/definitions/vpn_gateway_reference"
                }, 
                "local_route_prefix_list": {
                    "items": {
                        "$ref": "#/definitions/ip_subnet_status"
                    }, 
                    "type": "array", 
                    "description": "IP prefixes advertised to the remote gateway over eBGP."
                }
            }, 
            "description": "VPN connection creation/modification status."
        }, 
        "vpn_connection_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vpn_connection", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vpn_connection"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "vpn_gateway": {
            "title": "vpn_gateway Intent Spec with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "description": {
                    "type": "string", 
                    "description": "A description for vpn_gateway.", 
                    "maxLength": 1000
                }, 
                "name": {
                    "type": "string", 
                    "description": "vpn_gateway Name.", 
                    "maxLength": 64
                }, 
                "resources": {
                    "$ref": "#/definitions/vpn_gateway_resources"
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }
            }, 
            "description": "An intentful representation of a vpn_gateway spec"
        }, 
        "vpn_gateway_def_status": {
            "title": "vpn_gateway Intent Status with placement specified", 
            "required": [
                "name", 
                "resources"
            ], 
            "type": "object", 
            "properties": {
                "state": {
                    "type": "string", 
                    "description": "The state of the vpn_gateway."
                }, 
                "name": {
                    "type": "string", 
                    "description": "vpn_gateway Name."
                }, 
                "availability_zone_reference": {
                    "$ref": "#/definitions/availability_zone_reference"
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "type": "array", 
                    "description": "Any error messages for the vpn_gateway, if in an error state."
                }, 
                "cluster_reference": {
                    "$ref": "#/definitions/cluster_reference"
                }, 
                "resources": {
                    "$ref": "#/definitions/vpn_gateway_resources_def_status"
                }, 
                "description": {
                    "type": "string", 
                    "description": "A description for vpn_gateway."
                }
            }, 
            "description": "An intentful representation of a vpn_gateway status"
        }, 
        "vpn_gateway_intent_input": {
            "title": "vpn_gateway Intent Entity", 
            "required": [
                "metadata", 
                "spec"
            ], 
            "type": "object", 
            "properties": {
                "spec": {
                    "$ref": "#/definitions/vpn_gateway"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vpn_gateway_metadata"
                }
            }, 
            "description": "An intentful representation of a vpn_gateway"
        }, 
        "vpn_gateway_intent_resource": {
            "title": "vpn_gateway Intent Response", 
            "required": [
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vpn_gateway_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vpn_gateway"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vpn_gateway_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vpn_gateway"
        }, 
        "vpn_gateway_intent_response": {
            "title": "vpn_gateway Intent Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "status": {
                    "$ref": "#/definitions/vpn_gateway_def_status"
                }, 
                "spec": {
                    "$ref": "#/definitions/vpn_gateway"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vpn_gateway_metadata"
                }
            }, 
            "description": "Response object for intentful operations on a vpn_gateway"
        }, 
        "vpn_gateway_list_intent_response": {
            "title": "Entity Intent List Response", 
            "required": [
                "api_version", 
                "metadata"
            ], 
            "type": "object", 
            "properties": {
                "entities": {
                    "items": {
                        "$ref": "#/definitions/vpn_gateway_intent_resource"
                    }, 
                    "type": "array"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }, 
                "metadata": {
                    "$ref": "#/definitions/vpn_gateway_list_metadata_output"
                }
            }, 
            "description": "Response object for intentful operation of vpn_gateways"
        }, 
        "vpn_gateway_list_metadata": {
            "title": "Metadata for vpn_gateway list", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter in FIQL syntax used for the results."
                }, 
                "kind": {
                    "default": "vpn_gateway", 
                    "x-ntnx-enum": [
                        "vpn_gateway"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Offset from the start of the entity list", 
                    "format": "int32"
                }, 
                "length": {
                    "minimum": 1, 
                    "type": "integer", 
                    "description": "The number of records to retrieve relative to the offset", 
                    "format": "int32"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block as input\n"
        }, 
        "vpn_gateway_list_metadata_output": {
            "title": "Metadata for vpn_gateway list output", 
            "type": "object", 
            "properties": {
                "filter": {
                    "type": "string", 
                    "description": "The filter used for the results"
                }, 
                "kind": {
                    "default": "vpn_gateway", 
                    "x-ntnx-enum": [
                        "vpn_gateway"
                    ], 
                    "type": "string", 
                    "description": "The kind name"
                }, 
                "sort_order": {
                    "$ref": "#/definitions/sort_order"
                }, 
                "offset": {
                    "type": "integer", 
                    "description": "Offset from the start of the entity list"
                }, 
                "total_matches": {
                    "type": "integer", 
                    "description": "Total matches found"
                }, 
                "length": {
                    "type": "integer", 
                    "description": "The number of records retrieved relative to the offset"
                }, 
                "sort_attribute": {
                    "type": "string", 
                    "description": "The attribute to perform sort on"
                }
            }, 
            "description": "All api calls that return a list will have this metadata block\n"
        }, 
        "vpn_gateway_metadata": {
            "title": "vpn_gateway metadata", 
            "required": [
                "kind"
            ], 
            "type": "object", 
            "properties": {
                "last_update_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vpn_gateway was last updated\n", 
                    "format": "date-time"
                }, 
                "kind": {
                    "default": "vpn_gateway", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vpn_gateway"
                    ]
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "description": "vpn_gateway uuid", 
                    "format": "UUID"
                }, 
                "project_reference": {
                    "description": "The project the vpn_gateway is in.", 
                    "$ref": "#/definitions/project_reference"
                }, 
                "spec_version": {
                    "type": "integer", 
                    "description": "Version number of the latest spec."
                }, 
                "creation_time": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "UTC date and time in RFC-3339 format when vpn_gateway was created\n", 
                    "format": "date-time"
                }, 
                "spec_hash": {
                    "type": "string", 
                    "description": "Hash of the spec. This will be returned from server.\n"
                }, 
                "should_force_translate": {
                    "type": "boolean", 
                    "description": "Applied on Prism Central only. Indicate whether force to translate the spec of the fanout request to fit the target cluster API schema.\n"
                }, 
                "owner_reference": {
                    "$ref": "#/definitions/user_reference"
                }, 
                "categories": {
                    "additionalProperties": {
                        "type": "string"
                    }, 
                    "type": "object", 
                    "description": "Categories for the vpn_gateway"
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string", 
                    "description": "vpn_gateway name", 
                    "maxLength": 64
                }
            }, 
            "description": "The vpn_gateway kind metadata"
        }, 
        "vpn_gateway_reference": {
            "title": "Reference to a vpn_gateway", 
            "required": [
                "kind", 
                "uuid"
            ], 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vpn_gateway", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vpn_gateway"
                    ]
                }, 
                "name": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "uuid": {
                    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$", 
                    "type": "string", 
                    "format": "UUID"
                }
            }, 
            "description": "The reference to a vpn_gateway"
        }, 
        "vpn_gateway_resources": {
            "title": "VPN gateway creation/modification spec", 
            "required": [
                "gateway_type"
            ], 
            "type": "object", 
            "properties": {
                "public_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Public IP address of this gateway."
                }, 
                "gateway_type": {
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "REMOTE"
                    ], 
                    "type": "string", 
                    "description": "Whether this is local or remote gateway entity."
                }, 
                "deployment": {
                    "description": "Deployment configuration for this gateway.", 
                    "$ref": "#/definitions/deployment"
                }, 
                "internal_routing_protocol_config": {
                    "x-ntnx-one-of": [
                        {
                            "required": [
                                "ospf_config"
                            ]
                        }, 
                        {
                            "required": [
                                "bgp_config"
                            ]
                        }
                    ], 
                    "type": "object", 
                    "properties": {
                        "ospf_config": {
                            "$ref": "#/definitions/ospf_config"
                        }, 
                        "bgp_config": {
                            "$ref": "#/definitions/bgp_config"
                        }
                    }, 
                    "description": "Describes the routing protocol configuration needed by this gateway to\npeer and learn routes from internal routers using either iBGP or OSFP.\n"
                }, 
                "ebgp_config": {
                    "description": "External BGP configuration needed for this gateway to peer with remote\ngateway and exchange routes.\n", 
                    "$ref": "#/definitions/bgp_config"
                }, 
                "virtual_network_reference": {
                    "description": "The virtual network this gateway belongs to. Applies only to local gateway entities.\n", 
                    "$ref": "#/definitions/virtual_network_reference"
                }
            }, 
            "description": "VPN gateway creation/modification spec."
        }, 
        "vpn_gateway_resources_def_status": {
            "title": "VPN gateway creation/modification status", 
            "type": "object", 
            "properties": {
                "public_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "Public IP address of this gateway."
                }, 
                "gateway_type": {
                    "x-ntnx-enum": [
                        "LOCAL", 
                        "REMOTE"
                    ], 
                    "type": "string", 
                    "description": "Whether this is local or remote gateway entity."
                }, 
                "deployment": {
                    "description": "Deployment configuration for this gateway.", 
                    "$ref": "#/definitions/deployment_status"
                }, 
                "operational_status": {
                    "description": "Operational status of this gateway.", 
                    "$ref": "#/definitions/vpn_component_status"
                }, 
                "internal_routing_protocol_config": {
                    "type": "object", 
                    "description": "Describes the routing protocol configuration needed by this gateway to\npeer and learn routes from internal routers using either iBGP or OSFP.\n", 
                    "properties": {
                        "ospf_config": {
                            "$ref": "#/definitions/ospf_config"
                        }, 
                        "bgp_config": {
                            "$ref": "#/definitions/bgp_config_status"
                        }
                    }
                }, 
                "ebgp_config": {
                    "description": "External BGP configuration needed for this gateway to peer with remote\ngateway and exchange routes.\n", 
                    "$ref": "#/definitions/bgp_config"
                }, 
                "virtual_network_reference": {
                    "description": "The virtual network this gateway belongs to. Applies only to local gateway entities.\n", 
                    "$ref": "#/definitions/virtual_network_reference"
                }
            }, 
            "description": "VPN gateway creation/modification status."
        }, 
        "vpn_gateway_status": {
            "title": "Response Kind", 
            "type": "object", 
            "properties": {
                "kind": {
                    "default": "vpn_gateway", 
                    "readOnly": true, 
                    "type": "string", 
                    "description": "The kind name", 
                    "x-ntnx-enum": [
                        "vpn_gateway"
                    ]
                }, 
                "code": {
                    "readOnly": true, 
                    "type": "integer", 
                    "description": "The HTTP error code."
                }, 
                "message_list": {
                    "items": {
                        "$ref": "#/definitions/message_resource"
                    }, 
                    "readOnly": true, 
                    "type": "array"
                }, 
                "state": {
                    "readOnly": true, 
                    "type": "string"
                }, 
                "api_version": {
                    "$ref": "#/definitions/api_version"
                }
            }, 
            "description": "The status of a REST API call. Only used when there is a failure to\nreport.\n"
        }, 
        "widget_config": {
            "title": "Configuration of the widget.", 
            "required": [
                "widget_type"
            ], 
            "type": "object", 
            "properties": {
                "widget_field_list": {
                    "items": {
                        "$ref": "#/definitions/widget_field_descriptor"
                    }, 
                    "type": "array", 
                    "description": "List of selected fields for the widget."
                }, 
                "entity_type": {
                    "type": "string", 
                    "description": "Type of the entity."
                }, 
                "repetition_criteria": {
                    "$ref": "#/definitions/repetition_criteria"
                }, 
                "widget_data_projection": {
                    "$ref": "#/definitions/widget_data_projection"
                }, 
                "widget_description": {
                    "type": "string", 
                    "description": "Description of the entity.", 
                    "maxLength": 1000
                }, 
                "widget_type": {
                    "type": "string", 
                    "description": "Type of widget. Widget type can be one of these.\n  - bar_chart\n  - config_summary\n  - count_summary\n  - line_chart\n  - metric_summary_chart\n  - metric_summary_text\n  - table\n  - text\n"
                }, 
                "widget_size": {
                    "x-ntnx-enum": [
                        "SMALL", 
                        "LARGE", 
                        "FULLSPAN"
                    ], 
                    "type": "string", 
                    "description": "Size of the widget."
                }, 
                "widget_heading": {
                    "type": "string", 
                    "description": "Heading for a widget.", 
                    "maxLength": 64
                }
            }, 
            "description": "Configuration of the widget."
        }, 
        "widget_data_projection": {
            "title": "Widget Data Projection.", 
            "type": "object", 
            "properties": {
                "filter_criteria": {
                    "type": "string", 
                    "description": "FIQL criteria that will be used to filter the returned data."
                }, 
                "sort_order": {
                    "x-ntnx-enum": [
                        "ASCENDING", 
                        "DESCENDING"
                    ], 
                    "type": "string", 
                    "description": "Order of sorting."
                }, 
                "limit": {
                    "minimum": 0, 
                    "type": "integer", 
                    "description": "Limit on the maximum number of entities to be represented in the\nwidget. A limit value of more than 10 would not be entertained.\n", 
                    "format": "int64"
                }, 
                "custom_key_values": {
                    "$ref": "#/definitions/generic_key_value_pair"
                }, 
                "sort_key": {
                    "x-ntnx-enum": [
                        "MAX", 
                        "FIRST", 
                        "MIN", 
                        "LAST", 
                        "LATEST"
                    ], 
                    "type": "string", 
                    "description": "Aggregation to be used while sorting time-series data."
                }, 
                "sort_column": {
                    "type": "string", 
                    "description": "Entity Property based on which the result data is to be sorted."
                }
            }, 
            "description": "Filtering, sorting and limit properties for the data to collected."
        }, 
        "widget_field_descriptor": {
            "title": "Widget Field Descriptor.", 
            "type": "object", 
            "properties": {
                "aggregation_operator": {
                    "x-ntnx-enum": [
                        "SUM", 
                        "MAX", 
                        "MIN", 
                        "AVG", 
                        "LAST", 
                        "COUNT"
                    ], 
                    "type": "string", 
                    "description": "Used when aggregating the field data from multiple values."
                }, 
                "property": {
                    "type": "string", 
                    "description": "Entity attribute/metric to be selected for the widget."
                }, 
                "label": {
                    "type": "string", 
                    "description": "Human-readable label for widget fields."
                }
            }, 
            "description": "Description of a field of a widget (eg. column in a table)."
        }, 
        "windows_domain": {
            "title": "Hyper-v Domain", 
            "required": [
                "domain_credential"
            ], 
            "type": "object", 
            "properties": {
                "name": {
                    "type": "string", 
                    "description": "The name of the node to be renamed to during domain-join. If not given,a new name will be automatically assigned.\n"
                }, 
                "name_server_ip": {
                    "pattern": "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$", 
                    "type": "string", 
                    "description": "The ip of name server that can resolve the domain name. Required during joining domain.\n"
                }, 
                "organization_unit_path": {
                    "type": "string", 
                    "description": "Path to organization unit in the domain."
                }, 
                "name_prefix": {
                    "type": "string", 
                    "description": "The name prefix in the domain in case of CPS deployment."
                }, 
                "domain_name": {
                    "type": "string", 
                    "description": "Full name of domain."
                }, 
                "domain_credential": {
                    "$ref": "#/definitions/credentials"
                }
            }, 
            "description": "Hyper-V node domain."
        }, 
        "xfit_service_input": {
            "title": "Xfit service configuration.", 
            "type": "object", 
            "properties": {
                "state": {
                    "x-ntnx-enum": [
                        "ENABLE"
                    ], 
                    "type": "string", 
                    "description": "The desired state of xfit service."
                }, 
                "validation_only": {
                    "type": "boolean", 
                    "description": "Flag indicating whether to do Xfit enablement validation only.\n"
                }
            }, 
            "description": "Input body to configure xfit service."
        }, 
        "xig_dns_config_response": {
            "title": "XIG DNS Config Response", 
            "type": "object", 
            "properties": {
                "rewrite_rules_list": {
                    "items": {
                        "$ref": "#/definitions/rewrite_rule"
                    }, 
                    "type": "array", 
                    "description": "Rules to rewrite API paths."
                }, 
                "jwk_source_list": {
                    "items": {
                        "$ref": "#/definitions/jwk_source"
                    }, 
                    "type": "array", 
                    "description": "-> Required if any proxy rule has token validation on. This is the source information where XIG will poll for JSON web keys and do token validations against."
                }, 
                "bypass_auth_path_list": {
                    "items": {
                        "type": "string"
                    }, 
                    "type": "array", 
                    "description": "-> Api path regex which needs to bypass authendication/token validation."
                }
            }, 
            "description": "PC's DNS Config Response for XIG."
        }
    }, 
    "security": [
        {
            "basicAuth": []
        }
    ], 
    "swagger": "2.0"
}
